//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.DocumentFinderService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentFinderSoap", Namespace="http://filehold.com/librarymanager/documentfinder/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FtsErrorInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FieldDefinition[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrilldownFieldChoice[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DropdownFieldChoice[]))]
    public partial class DocumentFinder : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDocumentDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDetailsWithChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaTypeForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaIdForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDetailsForSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentSystemDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldsForViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserViewFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMergedDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionsWithIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastDocumentVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetColumnForDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsBySnapshotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSnapshotDocumentCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindDocumentInSnapshotOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveSmartFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUserSmartFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadSmartFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadUserSmartFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsageLogUsersListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsageLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsageLogCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalendarEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSearchTextResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtsErrorSubListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtsErrorListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtsErrorInfoCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFtsErrorVisibilityStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllFtsErrorVisibilityStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnindexedDocumentsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnindexedDocumentsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableVisibilityInUnindexedDocumentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableVisibilityInUnindexedDocumentListAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFromUnidexedDocumentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtsStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtsScheduledOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitializeFtsIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtsLastUpdateStateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DocumentFinder() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_DocumentFinderService_DocumentFinder;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDocumentDetailsCompletedEventHandler GetDocumentDetailsCompleted;
        
        /// <remarks/>
        public event GetDocumentDetailsWithChangesCompletedEventHandler GetDocumentDetailsWithChangesCompleted;
        
        /// <remarks/>
        public event GetDocumentExtensionCompletedEventHandler GetDocumentExtensionCompleted;
        
        /// <remarks/>
        public event GetSchemaTypeForDocumentCompletedEventHandler GetSchemaTypeForDocumentCompleted;
        
        /// <remarks/>
        public event GetSchemaIdForDocumentCompletedEventHandler GetSchemaIdForDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentDetailsForSchemaCompletedEventHandler GetDocumentDetailsForSchemaCompleted;
        
        /// <remarks/>
        public event GetDocumentSystemDetailsCompletedEventHandler GetDocumentSystemDetailsCompleted;
        
        /// <remarks/>
        public event GetFieldsForViewCompletedEventHandler GetFieldsForViewCompleted;
        
        /// <remarks/>
        public event GetUserViewFieldsCompletedEventHandler GetUserViewFieldsCompleted;
        
        /// <remarks/>
        public event GetMergedDocumentsCompletedEventHandler GetMergedDocumentsCompleted;
        
        /// <remarks/>
        public event GetVersionsWithIdsCompletedEventHandler GetVersionsWithIdsCompleted;
        
        /// <remarks/>
        public event GetLastDocumentVersionsCompletedEventHandler GetLastDocumentVersionsCompleted;
        
        /// <remarks/>
        public event GetColumnForDocumentsCompletedEventHandler GetColumnForDocumentsCompleted;
        
        /// <remarks/>
        public event GetDocumentsBySnapshotCompletedEventHandler GetDocumentsBySnapshotCompleted;
        
        /// <remarks/>
        public event GetSnapshotDocumentCountCompletedEventHandler GetSnapshotDocumentCountCompleted;
        
        /// <remarks/>
        public event FindDocumentInSnapshotCompletedEventHandler FindDocumentInSnapshotCompleted;
        
        /// <remarks/>
        public event SaveSmartFolderCompletedEventHandler SaveSmartFolderCompleted;
        
        /// <remarks/>
        public event SaveUserSmartFolderCompletedEventHandler SaveUserSmartFolderCompleted;
        
        /// <remarks/>
        public event LoadSmartFolderCompletedEventHandler LoadSmartFolderCompleted;
        
        /// <remarks/>
        public event LoadUserSmartFolderCompletedEventHandler LoadUserSmartFolderCompleted;
        
        /// <remarks/>
        public event GetUsageLogUsersListCompletedEventHandler GetUsageLogUsersListCompleted;
        
        /// <remarks/>
        public event GetUsageLogCompletedEventHandler GetUsageLogCompleted;
        
        /// <remarks/>
        public event GetUsageLogCountCompletedEventHandler GetUsageLogCountCompleted;
        
        /// <remarks/>
        public event GetCalendarEntriesCompletedEventHandler GetCalendarEntriesCompleted;
        
        /// <remarks/>
        public event GetSearchTextResultCompletedEventHandler GetSearchTextResultCompleted;
        
        /// <remarks/>
        public event GetFtsErrorSubListCompletedEventHandler GetFtsErrorSubListCompleted;
        
        /// <remarks/>
        public event GetFtsErrorListCompletedEventHandler GetFtsErrorListCompleted;
        
        /// <remarks/>
        public event GetFtsErrorInfoCountCompletedEventHandler GetFtsErrorInfoCountCompleted;
        
        /// <remarks/>
        public event SetFtsErrorVisibilityStateCompletedEventHandler SetFtsErrorVisibilityStateCompleted;
        
        /// <remarks/>
        public event SetAllFtsErrorVisibilityStateCompletedEventHandler SetAllFtsErrorVisibilityStateCompleted;
        
        /// <remarks/>
        public event GetUnindexedDocumentsListCompletedEventHandler GetUnindexedDocumentsListCompleted;
        
        /// <remarks/>
        public event GetUnindexedDocumentsCountCompletedEventHandler GetUnindexedDocumentsCountCompleted;
        
        /// <remarks/>
        public event DisableVisibilityInUnindexedDocumentListCompletedEventHandler DisableVisibilityInUnindexedDocumentListCompleted;
        
        /// <remarks/>
        public event DisableVisibilityInUnindexedDocumentListAllCompletedEventHandler DisableVisibilityInUnindexedDocumentListAllCompleted;
        
        /// <remarks/>
        public event RemoveFromUnidexedDocumentListCompletedEventHandler RemoveFromUnidexedDocumentListCompleted;
        
        /// <remarks/>
        public event GetFtsStateCompletedEventHandler GetFtsStateCompleted;
        
        /// <remarks/>
        public event GetFtsScheduledCompletedEventHandler GetFtsScheduledCompleted;
        
        /// <remarks/>
        public event InitializeFtsIndexCompletedEventHandler InitializeFtsIndexCompleted;
        
        /// <remarks/>
        public event GetFtsLastUpdateStateCompletedEventHandler GetFtsLastUpdateStateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetDocumentDetails", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ColumnsWithValues GetDocumentDetails(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentDetails", new object[] {
                        metadataVersionId});
            return ((ColumnsWithValues)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDetailsAsync(int metadataVersionId) {
            this.GetDocumentDetailsAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentDetailsAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentDetailsOperationCompleted == null)) {
                this.GetDocumentDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDetailsOperationCompleted);
            }
            this.InvokeAsync("GetDocumentDetails", new object[] {
                        metadataVersionId}, this.GetDocumentDetailsOperationCompleted, userState);
        }
        
        private void OnGetDocumentDetailsOperationCompleted(object arg) {
            if ((this.GetDocumentDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDetailsCompleted(this, new GetDocumentDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetDocumentDetailsWithChanges", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ColumnsWithValues GetDocumentDetailsWithChanges(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentDetailsWithChanges", new object[] {
                        metadataVersionId});
            return ((ColumnsWithValues)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDetailsWithChangesAsync(int metadataVersionId) {
            this.GetDocumentDetailsWithChangesAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentDetailsWithChangesAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentDetailsWithChangesOperationCompleted == null)) {
                this.GetDocumentDetailsWithChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDetailsWithChangesOperationCompleted);
            }
            this.InvokeAsync("GetDocumentDetailsWithChanges", new object[] {
                        metadataVersionId}, this.GetDocumentDetailsWithChangesOperationCompleted, userState);
        }
        
        private void OnGetDocumentDetailsWithChangesOperationCompleted(object arg) {
            if ((this.GetDocumentDetailsWithChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDetailsWithChangesCompleted(this, new GetDocumentDetailsWithChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetDocumentExtension", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentExtension(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentExtension", new object[] {
                        metadataVersionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentExtensionAsync(int metadataVersionId) {
            this.GetDocumentExtensionAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentExtensionAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentExtensionOperationCompleted == null)) {
                this.GetDocumentExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentExtensionOperationCompleted);
            }
            this.InvokeAsync("GetDocumentExtension", new object[] {
                        metadataVersionId}, this.GetDocumentExtensionOperationCompleted, userState);
        }
        
        private void OnGetDocumentExtensionOperationCompleted(object arg) {
            if ((this.GetDocumentExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentExtensionCompleted(this, new GetDocumentExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetSchemaTypeForDocument", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentSchemaType GetSchemaTypeForDocument(int metadataVersionId) {
            object[] results = this.Invoke("GetSchemaTypeForDocument", new object[] {
                        metadataVersionId});
            return ((DocumentSchemaType)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaTypeForDocumentAsync(int metadataVersionId) {
            this.GetSchemaTypeForDocumentAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetSchemaTypeForDocumentAsync(int metadataVersionId, object userState) {
            if ((this.GetSchemaTypeForDocumentOperationCompleted == null)) {
                this.GetSchemaTypeForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaTypeForDocumentOperationCompleted);
            }
            this.InvokeAsync("GetSchemaTypeForDocument", new object[] {
                        metadataVersionId}, this.GetSchemaTypeForDocumentOperationCompleted, userState);
        }
        
        private void OnGetSchemaTypeForDocumentOperationCompleted(object arg) {
            if ((this.GetSchemaTypeForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaTypeForDocumentCompleted(this, new GetSchemaTypeForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetSchemaIdForDocument", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSchemaIdForDocument(int metadataVersionId) {
            object[] results = this.Invoke("GetSchemaIdForDocument", new object[] {
                        metadataVersionId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaIdForDocumentAsync(int metadataVersionId) {
            this.GetSchemaIdForDocumentAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetSchemaIdForDocumentAsync(int metadataVersionId, object userState) {
            if ((this.GetSchemaIdForDocumentOperationCompleted == null)) {
                this.GetSchemaIdForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaIdForDocumentOperationCompleted);
            }
            this.InvokeAsync("GetSchemaIdForDocument", new object[] {
                        metadataVersionId}, this.GetSchemaIdForDocumentOperationCompleted, userState);
        }
        
        private void OnGetSchemaIdForDocumentOperationCompleted(object arg) {
            if ((this.GetSchemaIdForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaIdForDocumentCompleted(this, new GetSchemaIdForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetDocumentDetailsForSchema", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ColumnsWithValues GetDocumentDetailsForSchema(int metadataVersionId, int documentSchemaId) {
            object[] results = this.Invoke("GetDocumentDetailsForSchema", new object[] {
                        metadataVersionId,
                        documentSchemaId});
            return ((ColumnsWithValues)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDetailsForSchemaAsync(int metadataVersionId, int documentSchemaId) {
            this.GetDocumentDetailsForSchemaAsync(metadataVersionId, documentSchemaId, null);
        }
        
        /// <remarks/>
        public void GetDocumentDetailsForSchemaAsync(int metadataVersionId, int documentSchemaId, object userState) {
            if ((this.GetDocumentDetailsForSchemaOperationCompleted == null)) {
                this.GetDocumentDetailsForSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDetailsForSchemaOperationCompleted);
            }
            this.InvokeAsync("GetDocumentDetailsForSchema", new object[] {
                        metadataVersionId,
                        documentSchemaId}, this.GetDocumentDetailsForSchemaOperationCompleted, userState);
        }
        
        private void OnGetDocumentDetailsForSchemaOperationCompleted(object arg) {
            if ((this.GetDocumentDetailsForSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDetailsForSchemaCompleted(this, new GetDocumentDetailsForSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetDocumentSystemDetails", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentSystemFields GetDocumentSystemDetails(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentSystemDetails", new object[] {
                        metadataVersionId});
            return ((DocumentSystemFields)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentSystemDetailsAsync(int metadataVersionId) {
            this.GetDocumentSystemDetailsAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentSystemDetailsAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentSystemDetailsOperationCompleted == null)) {
                this.GetDocumentSystemDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentSystemDetailsOperationCompleted);
            }
            this.InvokeAsync("GetDocumentSystemDetails", new object[] {
                        metadataVersionId}, this.GetDocumentSystemDetailsOperationCompleted, userState);
        }
        
        private void OnGetDocumentSystemDetailsOperationCompleted(object arg) {
            if ((this.GetDocumentSystemDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentSystemDetailsCompleted(this, new GetDocumentSystemDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFieldsForView", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FieldDefinition[] GetFieldsForView(string viewType, int viewParam) {
            object[] results = this.Invoke("GetFieldsForView", new object[] {
                        viewType,
                        viewParam});
            return ((FieldDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldsForViewAsync(string viewType, int viewParam) {
            this.GetFieldsForViewAsync(viewType, viewParam, null);
        }
        
        /// <remarks/>
        public void GetFieldsForViewAsync(string viewType, int viewParam, object userState) {
            if ((this.GetFieldsForViewOperationCompleted == null)) {
                this.GetFieldsForViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldsForViewOperationCompleted);
            }
            this.InvokeAsync("GetFieldsForView", new object[] {
                        viewType,
                        viewParam}, this.GetFieldsForViewOperationCompleted, userState);
        }
        
        private void OnGetFieldsForViewOperationCompleted(object arg) {
            if ((this.GetFieldsForViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldsForViewCompleted(this, new GetFieldsForViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetUserViewFields", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FieldDefinition[] GetUserViewFields(string viewType) {
            object[] results = this.Invoke("GetUserViewFields", new object[] {
                        viewType});
            return ((FieldDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserViewFieldsAsync(string viewType) {
            this.GetUserViewFieldsAsync(viewType, null);
        }
        
        /// <remarks/>
        public void GetUserViewFieldsAsync(string viewType, object userState) {
            if ((this.GetUserViewFieldsOperationCompleted == null)) {
                this.GetUserViewFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserViewFieldsOperationCompleted);
            }
            this.InvokeAsync("GetUserViewFields", new object[] {
                        viewType}, this.GetUserViewFieldsOperationCompleted, userState);
        }
        
        private void OnGetUserViewFieldsOperationCompleted(object arg) {
            if ((this.GetUserViewFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserViewFieldsCompleted(this, new GetUserViewFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetMergedDocuments", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ColumnsWithValues GetMergedDocuments(System.Guid selectionId, int schemaTemplate, int metadataTemplate) {
            object[] results = this.Invoke("GetMergedDocuments", new object[] {
                        selectionId,
                        schemaTemplate,
                        metadataTemplate});
            return ((ColumnsWithValues)(results[0]));
        }
        
        /// <remarks/>
        public void GetMergedDocumentsAsync(System.Guid selectionId, int schemaTemplate, int metadataTemplate) {
            this.GetMergedDocumentsAsync(selectionId, schemaTemplate, metadataTemplate, null);
        }
        
        /// <remarks/>
        public void GetMergedDocumentsAsync(System.Guid selectionId, int schemaTemplate, int metadataTemplate, object userState) {
            if ((this.GetMergedDocumentsOperationCompleted == null)) {
                this.GetMergedDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMergedDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetMergedDocuments", new object[] {
                        selectionId,
                        schemaTemplate,
                        metadataTemplate}, this.GetMergedDocumentsOperationCompleted, userState);
        }
        
        private void OnGetMergedDocumentsOperationCompleted(object arg) {
            if ((this.GetMergedDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMergedDocumentsCompleted(this, new GetMergedDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetVersionsWithIds", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public VersionWithId[] GetVersionsWithIds(int documentId) {
            object[] results = this.Invoke("GetVersionsWithIds", new object[] {
                        documentId});
            return ((VersionWithId[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionsWithIdsAsync(int documentId) {
            this.GetVersionsWithIdsAsync(documentId, null);
        }
        
        /// <remarks/>
        public void GetVersionsWithIdsAsync(int documentId, object userState) {
            if ((this.GetVersionsWithIdsOperationCompleted == null)) {
                this.GetVersionsWithIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionsWithIdsOperationCompleted);
            }
            this.InvokeAsync("GetVersionsWithIds", new object[] {
                        documentId}, this.GetVersionsWithIdsOperationCompleted, userState);
        }
        
        private void OnGetVersionsWithIdsOperationCompleted(object arg) {
            if ((this.GetVersionsWithIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionsWithIdsCompleted(this, new GetVersionsWithIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetLastDocumentVersions", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetLastDocumentVersions(int[] documentIds) {
            object[] results = this.Invoke("GetLastDocumentVersions", new object[] {
                        documentIds});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLastDocumentVersionsAsync(int[] documentIds) {
            this.GetLastDocumentVersionsAsync(documentIds, null);
        }
        
        /// <remarks/>
        public void GetLastDocumentVersionsAsync(int[] documentIds, object userState) {
            if ((this.GetLastDocumentVersionsOperationCompleted == null)) {
                this.GetLastDocumentVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastDocumentVersionsOperationCompleted);
            }
            this.InvokeAsync("GetLastDocumentVersions", new object[] {
                        documentIds}, this.GetLastDocumentVersionsOperationCompleted, userState);
        }
        
        private void OnGetLastDocumentVersionsOperationCompleted(object arg) {
            if ((this.GetLastDocumentVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastDocumentVersionsCompleted(this, new GetLastDocumentVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetColumnForDocuments", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetColumnForDocuments(int[] documentIds, int fieldId) {
            object[] results = this.Invoke("GetColumnForDocuments", new object[] {
                        documentIds,
                        fieldId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetColumnForDocumentsAsync(int[] documentIds, int fieldId) {
            this.GetColumnForDocumentsAsync(documentIds, fieldId, null);
        }
        
        /// <remarks/>
        public void GetColumnForDocumentsAsync(int[] documentIds, int fieldId, object userState) {
            if ((this.GetColumnForDocumentsOperationCompleted == null)) {
                this.GetColumnForDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetColumnForDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetColumnForDocuments", new object[] {
                        documentIds,
                        fieldId}, this.GetColumnForDocumentsOperationCompleted, userState);
        }
        
        private void OnGetColumnForDocumentsOperationCompleted(object arg) {
            if ((this.GetColumnForDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetColumnForDocumentsCompleted(this, new GetColumnForDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetDocumentsBySnapshot", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ColumnsWithValues GetDocumentsBySnapshot(System.Guid prevSnapshotId, ref System.Guid snapshotId, string viewContainerType, SearchCriteria searchCriteria, ColumnSelector[] sortOrder, int firstRowIndex, int pageSize) {
            object[] results = this.Invoke("GetDocumentsBySnapshot", new object[] {
                        prevSnapshotId,
                        snapshotId,
                        viewContainerType,
                        searchCriteria,
                        sortOrder,
                        firstRowIndex,
                        pageSize});
            snapshotId = ((System.Guid)(results[1]));
            return ((ColumnsWithValues)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsBySnapshotAsync(System.Guid prevSnapshotId, System.Guid snapshotId, string viewContainerType, SearchCriteria searchCriteria, ColumnSelector[] sortOrder, int firstRowIndex, int pageSize) {
            this.GetDocumentsBySnapshotAsync(prevSnapshotId, snapshotId, viewContainerType, searchCriteria, sortOrder, firstRowIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetDocumentsBySnapshotAsync(System.Guid prevSnapshotId, System.Guid snapshotId, string viewContainerType, SearchCriteria searchCriteria, ColumnSelector[] sortOrder, int firstRowIndex, int pageSize, object userState) {
            if ((this.GetDocumentsBySnapshotOperationCompleted == null)) {
                this.GetDocumentsBySnapshotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsBySnapshotOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsBySnapshot", new object[] {
                        prevSnapshotId,
                        snapshotId,
                        viewContainerType,
                        searchCriteria,
                        sortOrder,
                        firstRowIndex,
                        pageSize}, this.GetDocumentsBySnapshotOperationCompleted, userState);
        }
        
        private void OnGetDocumentsBySnapshotOperationCompleted(object arg) {
            if ((this.GetDocumentsBySnapshotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsBySnapshotCompleted(this, new GetDocumentsBySnapshotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetSnapshotDocumentCount", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSnapshotDocumentCount(System.Guid snapshotId) {
            object[] results = this.Invoke("GetSnapshotDocumentCount", new object[] {
                        snapshotId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSnapshotDocumentCountAsync(System.Guid snapshotId) {
            this.GetSnapshotDocumentCountAsync(snapshotId, null);
        }
        
        /// <remarks/>
        public void GetSnapshotDocumentCountAsync(System.Guid snapshotId, object userState) {
            if ((this.GetSnapshotDocumentCountOperationCompleted == null)) {
                this.GetSnapshotDocumentCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSnapshotDocumentCountOperationCompleted);
            }
            this.InvokeAsync("GetSnapshotDocumentCount", new object[] {
                        snapshotId}, this.GetSnapshotDocumentCountOperationCompleted, userState);
        }
        
        private void OnGetSnapshotDocumentCountOperationCompleted(object arg) {
            if ((this.GetSnapshotDocumentCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSnapshotDocumentCountCompleted(this, new GetSnapshotDocumentCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/FindDocumentInSnapshot", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int FindDocumentInSnapshot(System.Guid snapshotId, int documentId) {
            object[] results = this.Invoke("FindDocumentInSnapshot", new object[] {
                        snapshotId,
                        documentId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FindDocumentInSnapshotAsync(System.Guid snapshotId, int documentId) {
            this.FindDocumentInSnapshotAsync(snapshotId, documentId, null);
        }
        
        /// <remarks/>
        public void FindDocumentInSnapshotAsync(System.Guid snapshotId, int documentId, object userState) {
            if ((this.FindDocumentInSnapshotOperationCompleted == null)) {
                this.FindDocumentInSnapshotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindDocumentInSnapshotOperationCompleted);
            }
            this.InvokeAsync("FindDocumentInSnapshot", new object[] {
                        snapshotId,
                        documentId}, this.FindDocumentInSnapshotOperationCompleted, userState);
        }
        
        private void OnFindDocumentInSnapshotOperationCompleted(object arg) {
            if ((this.FindDocumentInSnapshotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindDocumentInSnapshotCompleted(this, new FindDocumentInSnapshotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/SaveSmartFolder", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveSmartFolder(int smartFolderId, SearchCriteria searchCriteria) {
            this.Invoke("SaveSmartFolder", new object[] {
                        smartFolderId,
                        searchCriteria});
        }
        
        /// <remarks/>
        public void SaveSmartFolderAsync(int smartFolderId, SearchCriteria searchCriteria) {
            this.SaveSmartFolderAsync(smartFolderId, searchCriteria, null);
        }
        
        /// <remarks/>
        public void SaveSmartFolderAsync(int smartFolderId, SearchCriteria searchCriteria, object userState) {
            if ((this.SaveSmartFolderOperationCompleted == null)) {
                this.SaveSmartFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSmartFolderOperationCompleted);
            }
            this.InvokeAsync("SaveSmartFolder", new object[] {
                        smartFolderId,
                        searchCriteria}, this.SaveSmartFolderOperationCompleted, userState);
        }
        
        private void OnSaveSmartFolderOperationCompleted(object arg) {
            if ((this.SaveSmartFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSmartFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/SaveUserSmartFolder", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveUserSmartFolder(int smartFolderId, System.Guid userId, SearchCriteria searchCriteria) {
            this.Invoke("SaveUserSmartFolder", new object[] {
                        smartFolderId,
                        userId,
                        searchCriteria});
        }
        
        /// <remarks/>
        public void SaveUserSmartFolderAsync(int smartFolderId, System.Guid userId, SearchCriteria searchCriteria) {
            this.SaveUserSmartFolderAsync(smartFolderId, userId, searchCriteria, null);
        }
        
        /// <remarks/>
        public void SaveUserSmartFolderAsync(int smartFolderId, System.Guid userId, SearchCriteria searchCriteria, object userState) {
            if ((this.SaveUserSmartFolderOperationCompleted == null)) {
                this.SaveUserSmartFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUserSmartFolderOperationCompleted);
            }
            this.InvokeAsync("SaveUserSmartFolder", new object[] {
                        smartFolderId,
                        userId,
                        searchCriteria}, this.SaveUserSmartFolderOperationCompleted, userState);
        }
        
        private void OnSaveUserSmartFolderOperationCompleted(object arg) {
            if ((this.SaveUserSmartFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUserSmartFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/LoadSmartFolder", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchCriteria LoadSmartFolder(int smartFolderId) {
            object[] results = this.Invoke("LoadSmartFolder", new object[] {
                        smartFolderId});
            return ((SearchCriteria)(results[0]));
        }
        
        /// <remarks/>
        public void LoadSmartFolderAsync(int smartFolderId) {
            this.LoadSmartFolderAsync(smartFolderId, null);
        }
        
        /// <remarks/>
        public void LoadSmartFolderAsync(int smartFolderId, object userState) {
            if ((this.LoadSmartFolderOperationCompleted == null)) {
                this.LoadSmartFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadSmartFolderOperationCompleted);
            }
            this.InvokeAsync("LoadSmartFolder", new object[] {
                        smartFolderId}, this.LoadSmartFolderOperationCompleted, userState);
        }
        
        private void OnLoadSmartFolderOperationCompleted(object arg) {
            if ((this.LoadSmartFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadSmartFolderCompleted(this, new LoadSmartFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/LoadUserSmartFolder", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchCriteria LoadUserSmartFolder(int smartFolderId, System.Guid userId) {
            object[] results = this.Invoke("LoadUserSmartFolder", new object[] {
                        smartFolderId,
                        userId});
            return ((SearchCriteria)(results[0]));
        }
        
        /// <remarks/>
        public void LoadUserSmartFolderAsync(int smartFolderId, System.Guid userId) {
            this.LoadUserSmartFolderAsync(smartFolderId, userId, null);
        }
        
        /// <remarks/>
        public void LoadUserSmartFolderAsync(int smartFolderId, System.Guid userId, object userState) {
            if ((this.LoadUserSmartFolderOperationCompleted == null)) {
                this.LoadUserSmartFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadUserSmartFolderOperationCompleted);
            }
            this.InvokeAsync("LoadUserSmartFolder", new object[] {
                        smartFolderId,
                        userId}, this.LoadUserSmartFolderOperationCompleted, userState);
        }
        
        private void OnLoadUserSmartFolderOperationCompleted(object arg) {
            if ((this.LoadUserSmartFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadUserSmartFolderCompleted(this, new LoadUserSmartFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetUsageLogUsersList", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserLogEntry[] GetUsageLogUsersList() {
            object[] results = this.Invoke("GetUsageLogUsersList", new object[0]);
            return ((UserLogEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsageLogUsersListAsync() {
            this.GetUsageLogUsersListAsync(null);
        }
        
        /// <remarks/>
        public void GetUsageLogUsersListAsync(object userState) {
            if ((this.GetUsageLogUsersListOperationCompleted == null)) {
                this.GetUsageLogUsersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsageLogUsersListOperationCompleted);
            }
            this.InvokeAsync("GetUsageLogUsersList", new object[0], this.GetUsageLogUsersListOperationCompleted, userState);
        }
        
        private void OnGetUsageLogUsersListOperationCompleted(object arg) {
            if ((this.GetUsageLogUsersListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsageLogUsersListCompleted(this, new GetUsageLogUsersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetUsageLog", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UsageLogEntry[] GetUsageLog(UsageLogCriteria filter) {
            object[] results = this.Invoke("GetUsageLog", new object[] {
                        filter});
            return ((UsageLogEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsageLogAsync(UsageLogCriteria filter) {
            this.GetUsageLogAsync(filter, null);
        }
        
        /// <remarks/>
        public void GetUsageLogAsync(UsageLogCriteria filter, object userState) {
            if ((this.GetUsageLogOperationCompleted == null)) {
                this.GetUsageLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsageLogOperationCompleted);
            }
            this.InvokeAsync("GetUsageLog", new object[] {
                        filter}, this.GetUsageLogOperationCompleted, userState);
        }
        
        private void OnGetUsageLogOperationCompleted(object arg) {
            if ((this.GetUsageLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsageLogCompleted(this, new GetUsageLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetUsageLogCount", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUsageLogCount(UsageLogCriteria filter) {
            object[] results = this.Invoke("GetUsageLogCount", new object[] {
                        filter});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsageLogCountAsync(UsageLogCriteria filter) {
            this.GetUsageLogCountAsync(filter, null);
        }
        
        /// <remarks/>
        public void GetUsageLogCountAsync(UsageLogCriteria filter, object userState) {
            if ((this.GetUsageLogCountOperationCompleted == null)) {
                this.GetUsageLogCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsageLogCountOperationCompleted);
            }
            this.InvokeAsync("GetUsageLogCount", new object[] {
                        filter}, this.GetUsageLogCountOperationCompleted, userState);
        }
        
        private void OnGetUsageLogCountOperationCompleted(object arg) {
            if ((this.GetUsageLogCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsageLogCountCompleted(this, new GetUsageLogCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetCalendarEntries", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CalendarEntry[] GetCalendarEntries(System.DateTime startDate, System.DateTime endDate, bool includeEvents) {
            object[] results = this.Invoke("GetCalendarEntries", new object[] {
                        startDate,
                        endDate,
                        includeEvents});
            return ((CalendarEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCalendarEntriesAsync(System.DateTime startDate, System.DateTime endDate, bool includeEvents) {
            this.GetCalendarEntriesAsync(startDate, endDate, includeEvents, null);
        }
        
        /// <remarks/>
        public void GetCalendarEntriesAsync(System.DateTime startDate, System.DateTime endDate, bool includeEvents, object userState) {
            if ((this.GetCalendarEntriesOperationCompleted == null)) {
                this.GetCalendarEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalendarEntriesOperationCompleted);
            }
            this.InvokeAsync("GetCalendarEntries", new object[] {
                        startDate,
                        endDate,
                        includeEvents}, this.GetCalendarEntriesOperationCompleted, userState);
        }
        
        private void OnGetCalendarEntriesOperationCompleted(object arg) {
            if ((this.GetCalendarEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalendarEntriesCompleted(this, new GetCalendarEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetSearchTextResult", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("textResult")]
        public string GetSearchTextResult(SearchCriteria criteria, int documentVersionId) {
            object[] results = this.Invoke("GetSearchTextResult", new object[] {
                        criteria,
                        documentVersionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSearchTextResultAsync(SearchCriteria criteria, int documentVersionId) {
            this.GetSearchTextResultAsync(criteria, documentVersionId, null);
        }
        
        /// <remarks/>
        public void GetSearchTextResultAsync(SearchCriteria criteria, int documentVersionId, object userState) {
            if ((this.GetSearchTextResultOperationCompleted == null)) {
                this.GetSearchTextResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSearchTextResultOperationCompleted);
            }
            this.InvokeAsync("GetSearchTextResult", new object[] {
                        criteria,
                        documentVersionId}, this.GetSearchTextResultOperationCompleted, userState);
        }
        
        private void OnGetSearchTextResultOperationCompleted(object arg) {
            if ((this.GetSearchTextResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSearchTextResultCompleted(this, new GetSearchTextResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFtsErrorSubList", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FtsErrorExtendedInfo[] GetFtsErrorSubList(string sortExpression, int maximumRows, int startRowIndex) {
            object[] results = this.Invoke("GetFtsErrorSubList", new object[] {
                        sortExpression,
                        maximumRows,
                        startRowIndex});
            return ((FtsErrorExtendedInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFtsErrorSubListAsync(string sortExpression, int maximumRows, int startRowIndex) {
            this.GetFtsErrorSubListAsync(sortExpression, maximumRows, startRowIndex, null);
        }
        
        /// <remarks/>
        public void GetFtsErrorSubListAsync(string sortExpression, int maximumRows, int startRowIndex, object userState) {
            if ((this.GetFtsErrorSubListOperationCompleted == null)) {
                this.GetFtsErrorSubListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtsErrorSubListOperationCompleted);
            }
            this.InvokeAsync("GetFtsErrorSubList", new object[] {
                        sortExpression,
                        maximumRows,
                        startRowIndex}, this.GetFtsErrorSubListOperationCompleted, userState);
        }
        
        private void OnGetFtsErrorSubListOperationCompleted(object arg) {
            if ((this.GetFtsErrorSubListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtsErrorSubListCompleted(this, new GetFtsErrorSubListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFtsErrorList", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FtsErrorExtendedInfo[] GetFtsErrorList() {
            object[] results = this.Invoke("GetFtsErrorList", new object[0]);
            return ((FtsErrorExtendedInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFtsErrorListAsync() {
            this.GetFtsErrorListAsync(null);
        }
        
        /// <remarks/>
        public void GetFtsErrorListAsync(object userState) {
            if ((this.GetFtsErrorListOperationCompleted == null)) {
                this.GetFtsErrorListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtsErrorListOperationCompleted);
            }
            this.InvokeAsync("GetFtsErrorList", new object[0], this.GetFtsErrorListOperationCompleted, userState);
        }
        
        private void OnGetFtsErrorListOperationCompleted(object arg) {
            if ((this.GetFtsErrorListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtsErrorListCompleted(this, new GetFtsErrorListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFtsErrorInfoCount", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFtsErrorInfoCount() {
            object[] results = this.Invoke("GetFtsErrorInfoCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtsErrorInfoCountAsync() {
            this.GetFtsErrorInfoCountAsync(null);
        }
        
        /// <remarks/>
        public void GetFtsErrorInfoCountAsync(object userState) {
            if ((this.GetFtsErrorInfoCountOperationCompleted == null)) {
                this.GetFtsErrorInfoCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtsErrorInfoCountOperationCompleted);
            }
            this.InvokeAsync("GetFtsErrorInfoCount", new object[0], this.GetFtsErrorInfoCountOperationCompleted, userState);
        }
        
        private void OnGetFtsErrorInfoCountOperationCompleted(object arg) {
            if ((this.GetFtsErrorInfoCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtsErrorInfoCountCompleted(this, new GetFtsErrorInfoCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/SetFtsErrorVisibilityState", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFtsErrorVisibilityState(bool isHidden, int id) {
            this.Invoke("SetFtsErrorVisibilityState", new object[] {
                        isHidden,
                        id});
        }
        
        /// <remarks/>
        public void SetFtsErrorVisibilityStateAsync(bool isHidden, int id) {
            this.SetFtsErrorVisibilityStateAsync(isHidden, id, null);
        }
        
        /// <remarks/>
        public void SetFtsErrorVisibilityStateAsync(bool isHidden, int id, object userState) {
            if ((this.SetFtsErrorVisibilityStateOperationCompleted == null)) {
                this.SetFtsErrorVisibilityStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFtsErrorVisibilityStateOperationCompleted);
            }
            this.InvokeAsync("SetFtsErrorVisibilityState", new object[] {
                        isHidden,
                        id}, this.SetFtsErrorVisibilityStateOperationCompleted, userState);
        }
        
        private void OnSetFtsErrorVisibilityStateOperationCompleted(object arg) {
            if ((this.SetFtsErrorVisibilityStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFtsErrorVisibilityStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/SetAllFtsErrorVisibilityState", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAllFtsErrorVisibilityState(bool isHidden) {
            this.Invoke("SetAllFtsErrorVisibilityState", new object[] {
                        isHidden});
        }
        
        /// <remarks/>
        public void SetAllFtsErrorVisibilityStateAsync(bool isHidden) {
            this.SetAllFtsErrorVisibilityStateAsync(isHidden, null);
        }
        
        /// <remarks/>
        public void SetAllFtsErrorVisibilityStateAsync(bool isHidden, object userState) {
            if ((this.SetAllFtsErrorVisibilityStateOperationCompleted == null)) {
                this.SetAllFtsErrorVisibilityStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllFtsErrorVisibilityStateOperationCompleted);
            }
            this.InvokeAsync("SetAllFtsErrorVisibilityState", new object[] {
                        isHidden}, this.SetAllFtsErrorVisibilityStateOperationCompleted, userState);
        }
        
        private void OnSetAllFtsErrorVisibilityStateOperationCompleted(object arg) {
            if ((this.SetAllFtsErrorVisibilityStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllFtsErrorVisibilityStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetUnindexedDocumentsList", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UnindexedDocumentInformation[] GetUnindexedDocumentsList(string sortExpression, int maximumRows, int startRowIndex) {
            object[] results = this.Invoke("GetUnindexedDocumentsList", new object[] {
                        sortExpression,
                        maximumRows,
                        startRowIndex});
            return ((UnindexedDocumentInformation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUnindexedDocumentsListAsync(string sortExpression, int maximumRows, int startRowIndex) {
            this.GetUnindexedDocumentsListAsync(sortExpression, maximumRows, startRowIndex, null);
        }
        
        /// <remarks/>
        public void GetUnindexedDocumentsListAsync(string sortExpression, int maximumRows, int startRowIndex, object userState) {
            if ((this.GetUnindexedDocumentsListOperationCompleted == null)) {
                this.GetUnindexedDocumentsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnindexedDocumentsListOperationCompleted);
            }
            this.InvokeAsync("GetUnindexedDocumentsList", new object[] {
                        sortExpression,
                        maximumRows,
                        startRowIndex}, this.GetUnindexedDocumentsListOperationCompleted, userState);
        }
        
        private void OnGetUnindexedDocumentsListOperationCompleted(object arg) {
            if ((this.GetUnindexedDocumentsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnindexedDocumentsListCompleted(this, new GetUnindexedDocumentsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetUnindexedDocumentsCount", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUnindexedDocumentsCount() {
            object[] results = this.Invoke("GetUnindexedDocumentsCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnindexedDocumentsCountAsync() {
            this.GetUnindexedDocumentsCountAsync(null);
        }
        
        /// <remarks/>
        public void GetUnindexedDocumentsCountAsync(object userState) {
            if ((this.GetUnindexedDocumentsCountOperationCompleted == null)) {
                this.GetUnindexedDocumentsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnindexedDocumentsCountOperationCompleted);
            }
            this.InvokeAsync("GetUnindexedDocumentsCount", new object[0], this.GetUnindexedDocumentsCountOperationCompleted, userState);
        }
        
        private void OnGetUnindexedDocumentsCountOperationCompleted(object arg) {
            if ((this.GetUnindexedDocumentsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnindexedDocumentsCountCompleted(this, new GetUnindexedDocumentsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/DisableVisibilityInUnindexedDoc" +
            "umentList", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableVisibilityInUnindexedDocumentList(int documentVersionId) {
            this.Invoke("DisableVisibilityInUnindexedDocumentList", new object[] {
                        documentVersionId});
        }
        
        /// <remarks/>
        public void DisableVisibilityInUnindexedDocumentListAsync(int documentVersionId) {
            this.DisableVisibilityInUnindexedDocumentListAsync(documentVersionId, null);
        }
        
        /// <remarks/>
        public void DisableVisibilityInUnindexedDocumentListAsync(int documentVersionId, object userState) {
            if ((this.DisableVisibilityInUnindexedDocumentListOperationCompleted == null)) {
                this.DisableVisibilityInUnindexedDocumentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableVisibilityInUnindexedDocumentListOperationCompleted);
            }
            this.InvokeAsync("DisableVisibilityInUnindexedDocumentList", new object[] {
                        documentVersionId}, this.DisableVisibilityInUnindexedDocumentListOperationCompleted, userState);
        }
        
        private void OnDisableVisibilityInUnindexedDocumentListOperationCompleted(object arg) {
            if ((this.DisableVisibilityInUnindexedDocumentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableVisibilityInUnindexedDocumentListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/DisableVisibilityInUnindexedDoc" +
            "umentListAll", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableVisibilityInUnindexedDocumentListAll() {
            this.Invoke("DisableVisibilityInUnindexedDocumentListAll", new object[0]);
        }
        
        /// <remarks/>
        public void DisableVisibilityInUnindexedDocumentListAllAsync() {
            this.DisableVisibilityInUnindexedDocumentListAllAsync(null);
        }
        
        /// <remarks/>
        public void DisableVisibilityInUnindexedDocumentListAllAsync(object userState) {
            if ((this.DisableVisibilityInUnindexedDocumentListAllOperationCompleted == null)) {
                this.DisableVisibilityInUnindexedDocumentListAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableVisibilityInUnindexedDocumentListAllOperationCompleted);
            }
            this.InvokeAsync("DisableVisibilityInUnindexedDocumentListAll", new object[0], this.DisableVisibilityInUnindexedDocumentListAllOperationCompleted, userState);
        }
        
        private void OnDisableVisibilityInUnindexedDocumentListAllOperationCompleted(object arg) {
            if ((this.DisableVisibilityInUnindexedDocumentListAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableVisibilityInUnindexedDocumentListAllCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/RemoveFromUnidexedDocumentList", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveFromUnidexedDocumentList(int documentVersionId) {
            this.Invoke("RemoveFromUnidexedDocumentList", new object[] {
                        documentVersionId});
        }
        
        /// <remarks/>
        public void RemoveFromUnidexedDocumentListAsync(int documentVersionId) {
            this.RemoveFromUnidexedDocumentListAsync(documentVersionId, null);
        }
        
        /// <remarks/>
        public void RemoveFromUnidexedDocumentListAsync(int documentVersionId, object userState) {
            if ((this.RemoveFromUnidexedDocumentListOperationCompleted == null)) {
                this.RemoveFromUnidexedDocumentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFromUnidexedDocumentListOperationCompleted);
            }
            this.InvokeAsync("RemoveFromUnidexedDocumentList", new object[] {
                        documentVersionId}, this.RemoveFromUnidexedDocumentListOperationCompleted, userState);
        }
        
        private void OnRemoveFromUnidexedDocumentListOperationCompleted(object arg) {
            if ((this.RemoveFromUnidexedDocumentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFromUnidexedDocumentListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFtsState", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFtsState() {
            object[] results = this.Invoke("GetFtsState", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtsStateAsync() {
            this.GetFtsStateAsync(null);
        }
        
        /// <remarks/>
        public void GetFtsStateAsync(object userState) {
            if ((this.GetFtsStateOperationCompleted == null)) {
                this.GetFtsStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtsStateOperationCompleted);
            }
            this.InvokeAsync("GetFtsState", new object[0], this.GetFtsStateOperationCompleted, userState);
        }
        
        private void OnGetFtsStateOperationCompleted(object arg) {
            if ((this.GetFtsStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtsStateCompleted(this, new GetFtsStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFtsScheduled", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFtsScheduled() {
            object[] results = this.Invoke("GetFtsScheduled", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtsScheduledAsync() {
            this.GetFtsScheduledAsync(null);
        }
        
        /// <remarks/>
        public void GetFtsScheduledAsync(object userState) {
            if ((this.GetFtsScheduledOperationCompleted == null)) {
                this.GetFtsScheduledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtsScheduledOperationCompleted);
            }
            this.InvokeAsync("GetFtsScheduled", new object[0], this.GetFtsScheduledOperationCompleted, userState);
        }
        
        private void OnGetFtsScheduledOperationCompleted(object arg) {
            if ((this.GetFtsScheduledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtsScheduledCompleted(this, new GetFtsScheduledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/InitializeFtsIndex", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InitializeFtsIndex() {
            this.Invoke("InitializeFtsIndex", new object[0]);
        }
        
        /// <remarks/>
        public void InitializeFtsIndexAsync() {
            this.InitializeFtsIndexAsync(null);
        }
        
        /// <remarks/>
        public void InitializeFtsIndexAsync(object userState) {
            if ((this.InitializeFtsIndexOperationCompleted == null)) {
                this.InitializeFtsIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitializeFtsIndexOperationCompleted);
            }
            this.InvokeAsync("InitializeFtsIndex", new object[0], this.InitializeFtsIndexOperationCompleted, userState);
        }
        
        private void OnInitializeFtsIndexOperationCompleted(object arg) {
            if ((this.InitializeFtsIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitializeFtsIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentfinder/GetFtsLastUpdateState", RequestNamespace="http://filehold.com/librarymanager/documentfinder/", ResponseNamespace="http://filehold.com/librarymanager/documentfinder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFtsLastUpdateState() {
            object[] results = this.Invoke("GetFtsLastUpdateState", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtsLastUpdateStateAsync() {
            this.GetFtsLastUpdateStateAsync(null);
        }
        
        /// <remarks/>
        public void GetFtsLastUpdateStateAsync(object userState) {
            if ((this.GetFtsLastUpdateStateOperationCompleted == null)) {
                this.GetFtsLastUpdateStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtsLastUpdateStateOperationCompleted);
            }
            this.InvokeAsync("GetFtsLastUpdateState", new object[0], this.GetFtsLastUpdateStateOperationCompleted, userState);
        }
        
        private void OnGetFtsLastUpdateStateOperationCompleted(object arg) {
            if ((this.GetFtsLastUpdateStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtsLastUpdateStateCompleted(this, new GetFtsLastUpdateStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class ColumnsWithValues {
        
        private FieldDefinition[] columnsField;
        
        private DocumentData[] documentValuesField;
        
        /// <remarks/>
        public FieldDefinition[] Columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
            }
        }
        
        /// <remarks/>
        public DocumentData[] DocumentValues {
            get {
                return this.documentValuesField;
            }
            set {
                this.documentValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class FieldDefinition {
        
        private int metadataFieldIdField;
        
        private string metadataHeaderTextField;
        
        private int columnIndexField;
        
        private bool isSystemField;
        
        private string descriptionField;
        
        private FieldTypes typeField;
        
        private bool isDatabaseLookupField;
        
        private int systemFieldIdField;
        
        private bool allowEditField;
        
        private bool allowMultiselectionField;
        
        private int minCharCountField;
        
        private int maxCharCountField;
        
        private string currencySymbolField;
        
        private bool selectOnlyLeavesField;
        
        private object minValueField;
        
        private object maxValueField;
        
        private object initialValueField;
        
        private DisplayFormat displayFormatField;
        
        private bool isHighlightedField;
        
        private int[] requiredInSchemasField;
        
        private int[] notRequiredInSchemasField;
        
        private int[] readOnlyInSchemasField;
        
        /// <remarks/>
        public int MetadataFieldId {
            get {
                return this.metadataFieldIdField;
            }
            set {
                this.metadataFieldIdField = value;
            }
        }
        
        /// <remarks/>
        public string MetadataHeaderText {
            get {
                return this.metadataHeaderTextField;
            }
            set {
                this.metadataHeaderTextField = value;
            }
        }
        
        /// <remarks/>
        public int ColumnIndex {
            get {
                return this.columnIndexField;
            }
            set {
                this.columnIndexField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSystem {
            get {
                return this.isSystemField;
            }
            set {
                this.isSystemField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public FieldTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDatabaseLookup {
            get {
                return this.isDatabaseLookupField;
            }
            set {
                this.isDatabaseLookupField = value;
            }
        }
        
        /// <remarks/>
        public int SystemFieldId {
            get {
                return this.systemFieldIdField;
            }
            set {
                this.systemFieldIdField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowEdit {
            get {
                return this.allowEditField;
            }
            set {
                this.allowEditField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowMultiselection {
            get {
                return this.allowMultiselectionField;
            }
            set {
                this.allowMultiselectionField = value;
            }
        }
        
        /// <remarks/>
        public int MinCharCount {
            get {
                return this.minCharCountField;
            }
            set {
                this.minCharCountField = value;
            }
        }
        
        /// <remarks/>
        public int MaxCharCount {
            get {
                return this.maxCharCountField;
            }
            set {
                this.maxCharCountField = value;
            }
        }
        
        /// <remarks/>
        public string CurrencySymbol {
            get {
                return this.currencySymbolField;
            }
            set {
                this.currencySymbolField = value;
            }
        }
        
        /// <remarks/>
        public bool SelectOnlyLeaves {
            get {
                return this.selectOnlyLeavesField;
            }
            set {
                this.selectOnlyLeavesField = value;
            }
        }
        
        /// <remarks/>
        public object MinValue {
            get {
                return this.minValueField;
            }
            set {
                this.minValueField = value;
            }
        }
        
        /// <remarks/>
        public object MaxValue {
            get {
                return this.maxValueField;
            }
            set {
                this.maxValueField = value;
            }
        }
        
        /// <remarks/>
        public object InitialValue {
            get {
                return this.initialValueField;
            }
            set {
                this.initialValueField = value;
            }
        }
        
        /// <remarks/>
        public DisplayFormat DisplayFormat {
            get {
                return this.displayFormatField;
            }
            set {
                this.displayFormatField = value;
            }
        }
        
        /// <remarks/>
        public bool IsHighlighted {
            get {
                return this.isHighlightedField;
            }
            set {
                this.isHighlightedField = value;
            }
        }
        
        /// <remarks/>
        public int[] RequiredInSchemas {
            get {
                return this.requiredInSchemasField;
            }
            set {
                this.requiredInSchemasField = value;
            }
        }
        
        /// <remarks/>
        public int[] NotRequiredInSchemas {
            get {
                return this.notRequiredInSchemasField;
            }
            set {
                this.notRequiredInSchemasField = value;
            }
        }
        
        /// <remarks/>
        public int[] ReadOnlyInSchemas {
            get {
                return this.readOnlyInSchemasField;
            }
            set {
                this.readOnlyInSchemasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum FieldTypes {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Number,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Checkbox,
        
        /// <remarks/>
        DropdownMenu,
        
        /// <remarks/>
        SelectionCheckBox,
        
        /// <remarks/>
        EditCommand,
        
        /// <remarks/>
        ShowMetadataCommand,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        DrilldownMenu,
        
        /// <remarks/>
        Url,
        
        /// <remarks/>
        ShowDocumentsCommand,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class UnindexedDocumentInformation {
        
        private int documentMetadataVersionIdField;
        
        private bool canReplaceField;
        
        private string libraryLocationField;
        
        private int userIdField;
        
        private string userNameField;
        
        private System.DateTime dateTimeField;
        
        private int documentVersionIdField;
        
        private string documentNameField;
        
        /// <remarks/>
        public int DocumentMetadataVersionId {
            get {
                return this.documentMetadataVersionIdField;
            }
            set {
                this.documentMetadataVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public bool CanReplace {
            get {
                return this.canReplaceField;
            }
            set {
                this.canReplaceField = value;
            }
        }
        
        /// <remarks/>
        public string LibraryLocation {
            get {
                return this.libraryLocationField;
            }
            set {
                this.libraryLocationField = value;
            }
        }
        
        /// <remarks/>
        public int UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentVersionId {
            get {
                return this.documentVersionIdField;
            }
            set {
                this.documentVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FtsErrorExtendedInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/fulltextsearch/fulltextsearch/")]
    public partial class FtsErrorInfo {
        
        private string messageField;
        
        private string eventTypeField;
        
        private int idField;
        
        private System.DateTime timeField;
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class FtsErrorExtendedInfo : FtsErrorInfo {
        
        private string shortMessageField;
        
        /// <remarks/>
        public string ShortMessage {
            get {
                return this.shortMessageField;
            }
            set {
                this.shortMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class CalendarEntry {
        
        private System.DateTime dateField;
        
        private CalendarEntryType typeField;
        
        private bool isActiveField;
        
        private int eventTypeField;
        
        private bool isApprovedField;
        
        private int taskTypeField;
        
        private string documentNameField;
        
        private int documentIdField;
        
        private System.Guid taskGuidField;
        
        private string eventNameField;
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public CalendarEntryType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public int EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsApproved {
            get {
                return this.isApprovedField;
            }
            set {
                this.isApprovedField = value;
            }
        }
        
        /// <remarks/>
        public int TaskType {
            get {
                return this.taskTypeField;
            }
            set {
                this.taskTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid TaskGuid {
            get {
                return this.taskGuidField;
            }
            set {
                this.taskGuidField = value;
            }
        }
        
        /// <remarks/>
        public string EventName {
            get {
                return this.eventNameField;
            }
            set {
                this.eventNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum CalendarEntryType {
        
        /// <remarks/>
        Task,
        
        /// <remarks/>
        Reminder,
        
        /// <remarks/>
        Event,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class UsageLogEntry {
        
        private int documentVersionIdField;
        
        private string documentNameField;
        
        private int versionField;
        
        private ActionType typeField;
        
        private System.DateTime actionDateField;
        
        private string documentIconField;
        
        private string schemaField;
        
        private int linkedField;
        
        private string performedByField;
        
        private string recipientsField;
        
        private string detailsField;
        
        private int refDocumentIdField;
        
        private int refDocumentVersionIdField;
        
        private int refDocumentVersionField;
        
        private string locationField;
        
        /// <remarks/>
        public int DocumentVersionId {
            get {
                return this.documentVersionIdField;
            }
            set {
                this.documentVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public int Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public ActionType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActionDate {
            get {
                return this.actionDateField;
            }
            set {
                this.actionDateField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentIcon {
            get {
                return this.documentIconField;
            }
            set {
                this.documentIconField = value;
            }
        }
        
        /// <remarks/>
        public string Schema {
            get {
                return this.schemaField;
            }
            set {
                this.schemaField = value;
            }
        }
        
        /// <remarks/>
        public int Linked {
            get {
                return this.linkedField;
            }
            set {
                this.linkedField = value;
            }
        }
        
        /// <remarks/>
        public string PerformedBy {
            get {
                return this.performedByField;
            }
            set {
                this.performedByField = value;
            }
        }
        
        /// <remarks/>
        public string Recipients {
            get {
                return this.recipientsField;
            }
            set {
                this.recipientsField = value;
            }
        }
        
        /// <remarks/>
        public string Details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
            }
        }
        
        /// <remarks/>
        public int RefDocumentId {
            get {
                return this.refDocumentIdField;
            }
            set {
                this.refDocumentIdField = value;
            }
        }
        
        /// <remarks/>
        public int RefDocumentVersionId {
            get {
                return this.refDocumentVersionIdField;
            }
            set {
                this.refDocumentVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public int RefDocumentVersion {
            get {
                return this.refDocumentVersionField;
            }
            set {
                this.refDocumentVersionField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum ActionType {
        
        /// <remarks/>
        CheckedOut,
        
        /// <remarks/>
        Downloaded,
        
        /// <remarks/>
        EditMetadata,
        
        /// <remarks/>
        CheckedIn,
        
        /// <remarks/>
        CheckedInNoChanges,
        
        /// <remarks/>
        AddDocument,
        
        /// <remarks/>
        ScheduledForDeletion,
        
        /// <remarks/>
        Linked,
        
        /// <remarks/>
        Moved,
        
        /// <remarks/>
        Copied,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        DocumentRecovered,
        
        /// <remarks/>
        PermanentlyDeleted,
        
        /// <remarks/>
        TransferedFrom,
        
        /// <remarks/>
        TransferedTo,
        
        /// <remarks/>
        Archived,
        
        /// <remarks/>
        CreatedByCopy,
        
        /// <remarks/>
        WorkflowInitiated,
        
        /// <remarks/>
        WorkflowCancelled,
        
        /// <remarks/>
        Viewed,
        
        /// <remarks/>
        Printed,
        
        /// <remarks/>
        Published,
        
        /// <remarks/>
        OwnerChanged,
        
        /// <remarks/>
        ConvertToDocument,
        
        /// <remarks/>
        ConvertToRecord,
        
        /// <remarks/>
        ConvertToOffline,
        
        /// <remarks/>
        Unlinked,
        
        /// <remarks/>
        RemovedFromWorkflow,
        
        /// <remarks/>
        AddedSupporting,
        
        /// <remarks/>
        RemovedSupporting,
        
        /// <remarks/>
        Notification,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class UsageLogCriteria {
        
        private int[] documentVersionIdsField;
        
        private bool useDocumentNameField;
        
        private string documentNameField;
        
        private bool useSchemaField;
        
        private string schemaField;
        
        private bool useTypeField;
        
        private ActionType typeField;
        
        private bool useActionDateField;
        
        private System.DateTime actionDateFromField;
        
        private System.DateTime actionDateToField;
        
        private int sortByField;
        
        private bool isAscField;
        
        private int firstRowField;
        
        private int pageSizeField;
        
        private string performedByField;
        
        private bool usePerformedByField;
        
        private int performedByIdField;
        
        private bool usePerformedByIdField;
        
        /// <remarks/>
        public int[] DocumentVersionIds {
            get {
                return this.documentVersionIdsField;
            }
            set {
                this.documentVersionIdsField = value;
            }
        }
        
        /// <remarks/>
        public bool UseDocumentName {
            get {
                return this.useDocumentNameField;
            }
            set {
                this.useDocumentNameField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public bool UseSchema {
            get {
                return this.useSchemaField;
            }
            set {
                this.useSchemaField = value;
            }
        }
        
        /// <remarks/>
        public string Schema {
            get {
                return this.schemaField;
            }
            set {
                this.schemaField = value;
            }
        }
        
        /// <remarks/>
        public bool UseType {
            get {
                return this.useTypeField;
            }
            set {
                this.useTypeField = value;
            }
        }
        
        /// <remarks/>
        public ActionType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool UseActionDate {
            get {
                return this.useActionDateField;
            }
            set {
                this.useActionDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActionDateFrom {
            get {
                return this.actionDateFromField;
            }
            set {
                this.actionDateFromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActionDateTo {
            get {
                return this.actionDateToField;
            }
            set {
                this.actionDateToField = value;
            }
        }
        
        /// <remarks/>
        public int SortBy {
            get {
                return this.sortByField;
            }
            set {
                this.sortByField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAsc {
            get {
                return this.isAscField;
            }
            set {
                this.isAscField = value;
            }
        }
        
        /// <remarks/>
        public int FirstRow {
            get {
                return this.firstRowField;
            }
            set {
                this.firstRowField = value;
            }
        }
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public string PerformedBy {
            get {
                return this.performedByField;
            }
            set {
                this.performedByField = value;
            }
        }
        
        /// <remarks/>
        public bool UsePerformedBy {
            get {
                return this.usePerformedByField;
            }
            set {
                this.usePerformedByField = value;
            }
        }
        
        /// <remarks/>
        public int PerformedById {
            get {
                return this.performedByIdField;
            }
            set {
                this.performedByIdField = value;
            }
        }
        
        /// <remarks/>
        public bool UsePerformedById {
            get {
                return this.usePerformedByIdField;
            }
            set {
                this.usePerformedByIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class UserLogEntry {
        
        private int idField;
        
        private System.Guid guidField;
        
        private string nameField;
        
        private bool isDeletedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class ColumnSelector {
        
        private bool isSystemField;
        
        private int idField;
        
        private bool isAscField;
        
        private bool isGroupByField;
        
        /// <remarks/>
        public bool IsSystem {
            get {
                return this.isSystemField;
            }
            set {
                this.isSystemField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAsc {
            get {
                return this.isAscField;
            }
            set {
                this.isAscField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGroupBy {
            get {
                return this.isGroupByField;
            }
            set {
                this.isGroupByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class SearchCondition {
        
        private SearchType searchTypeField;
        
        private Operator operatorTypeField;
        
        private object[] operandsField;
        
        /// <remarks/>
        public SearchType SearchType {
            get {
                return this.searchTypeField;
            }
            set {
                this.searchTypeField = value;
            }
        }
        
        /// <remarks/>
        public Operator OperatorType {
            get {
                return this.operatorTypeField;
            }
            set {
                this.operatorTypeField = value;
            }
        }
        
        /// <remarks/>
        public object[] Operands {
            get {
                return this.operandsField;
            }
            set {
                this.operandsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum SearchType {
        
        /// <remarks/>
        AnywhereInFileHold,
        
        /// <remarks/>
        FullTextSearch,
        
        /// <remarks/>
        DocumentName,
        
        /// <remarks/>
        FolderName,
        
        /// <remarks/>
        OwnedBy,
        
        /// <remarks/>
        ApprovedBy,
        
        /// <remarks/>
        DateLastModified,
        
        /// <remarks/>
        DateCreated,
        
        /// <remarks/>
        DateApproved,
        
        /// <remarks/>
        FolderId,
        
        /// <remarks/>
        CabinetId,
        
        /// <remarks/>
        DrawerId,
        
        /// <remarks/>
        CategoryId,
        
        /// <remarks/>
        DrawerAndFolderGroup,
        
        /// <remarks/>
        SchemaFieldValue,
        
        /// <remarks/>
        SchemaId,
        
        /// <remarks/>
        IncludeArchive,
        
        /// <remarks/>
        IncludeDeleted,
        
        /// <remarks/>
        OnlyDeleted,
        
        /// <remarks/>
        LogAction,
        
        /// <remarks/>
        LogEntryDate,
        
        /// <remarks/>
        LogActionPerformer,
        
        /// <remarks/>
        FileType,
        
        /// <remarks/>
        DocumentId,
        
        /// <remarks/>
        DocumentVersionId,
        
        /// <remarks/>
        MetadataVersionId,
        
        /// <remarks/>
        ScanningBatchId,
        
        /// <remarks/>
        OnlyLastVersion,
        
        /// <remarks/>
        VirtualFolderId,
        
        /// <remarks/>
        Tray,
        
        /// <remarks/>
        IsStarredByUser,
        
        /// <remarks/>
        IsCheckedOutByUser,
        
        /// <remarks/>
        OnlyWhenCabinetOwner,
        
        /// <remarks/>
        ApprovalStatus,
        
        /// <remarks/>
        WithAlert,
        
        /// <remarks/>
        WithReminder,
        
        /// <remarks/>
        DateAccessed,
        
        /// <remarks/>
        IsLinkedWithDocument,
        
        /// <remarks/>
        IncludeShortcuts,
        
        /// <remarks/>
        OnlyShortcuts,
        
        /// <remarks/>
        ReturnLastForBinaryVersion,
        
        /// <remarks/>
        FileSize,
        
        /// <remarks/>
        IncludeInvisible,
        
        /// <remarks/>
        Location,
        
        /// <remarks/>
        SchemaWithField,
        
        /// <remarks/>
        IsAssociatedWithActiveTask,
        
        /// <remarks/>
        IsAssociatedWithWorkflow,
        
        /// <remarks/>
        HasMarkup,
        
        /// <remarks/>
        DocumentFormat,
        
        /// <remarks/>
        DocumentNumber,
        
        /// <remarks/>
        VersionNumber,
        
        /// <remarks/>
        SmartFolderId,
        
        /// <remarks/>
        HasLink,
        
        /// <remarks/>
        IsFavorite,
        
        /// <remarks/>
        ScheduledEventDate,
        
        /// <remarks/>
        CheckedOutStatus,
        
        /// <remarks/>
        CheckedOutBy,
        
        /// <remarks/>
        AllReminders,
        
        /// <remarks/>
        ActiveTaskDueDate,
        
        /// <remarks/>
        CompletedTaskDate,
        
        /// <remarks/>
        WorkflowInstance,
        
        /// <remarks/>
        ScheduledEventDateId,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum Operator {
        
        /// <remarks/>
        Equal,
        
        /// <remarks/>
        Between,
        
        /// <remarks/>
        Greater,
        
        /// <remarks/>
        GreaterOrEqual,
        
        /// <remarks/>
        Smaller,
        
        /// <remarks/>
        SmallerOrEqual,
        
        /// <remarks/>
        InList,
        
        /// <remarks/>
        IsBlank,
        
        /// <remarks/>
        Contains,
        
        /// <remarks/>
        Below,
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
        
        /// <remarks/>
        Mod,
        
        /// <remarks/>
        BeforeOrToday,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class SearchCriteria {
        
        private SearchCondition[] searchConditionsField;
        
        private bool onlyMetadataField;
        
        /// <remarks/>
        public SearchCondition[] SearchConditions {
            get {
                return this.searchConditionsField;
            }
            set {
                this.searchConditionsField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyMetadata {
            get {
                return this.onlyMetadataField;
            }
            set {
                this.onlyMetadataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class VersionWithId {
        
        private int versionField;
        
        private int versionIdField;
        
        /// <remarks/>
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public int versionId {
            get {
                return this.versionIdField;
            }
            set {
                this.versionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class DocumentSystemFields {
        
        private string ownerField;
        
        private string locationField;
        
        private ApprovalStatus approvalStatusField;
        
        private System.DateTime approvalDateField;
        
        private int versionField;
        
        private int lastAvailableVersionField;
        
        private string documentNumberField;
        
        private string typeField;
        
        private DocumentSchemaType documentSchemaTypeField;
        
        private System.DateTime scheduledArchivizationField;
        
        private System.DateTime scheduledDestructionField;
        
        private System.DateTime scheduledConvertToRecordField;
        
        private long fileSizeField;
        
        private System.DateTime checkOutDateField;
        
        private string checkOutByField;
        
        private System.DateTime lastModifiedOnField;
        
        private string lastModifiedByField;
        
        private System.DateTime createdOnField;
        
        private string createdByField;
        
        private bool neverVersionPendingApprovalField;
        
        private int hasMarkupsField;
        
        private string documentControlNumberField;
        
        private string versionControlNumberField;
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public ApprovalStatus ApprovalStatus {
            get {
                return this.approvalStatusField;
            }
            set {
                this.approvalStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ApprovalDate {
            get {
                return this.approvalDateField;
            }
            set {
                this.approvalDateField = value;
            }
        }
        
        /// <remarks/>
        public int Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public int LastAvailableVersion {
            get {
                return this.lastAvailableVersionField;
            }
            set {
                this.lastAvailableVersionField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentNumber {
            get {
                return this.documentNumberField;
            }
            set {
                this.documentNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public DocumentSchemaType DocumentSchemaType {
            get {
                return this.documentSchemaTypeField;
            }
            set {
                this.documentSchemaTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ScheduledArchivization {
            get {
                return this.scheduledArchivizationField;
            }
            set {
                this.scheduledArchivizationField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ScheduledDestruction {
            get {
                return this.scheduledDestructionField;
            }
            set {
                this.scheduledDestructionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ScheduledConvertToRecord {
            get {
                return this.scheduledConvertToRecordField;
            }
            set {
                this.scheduledConvertToRecordField = value;
            }
        }
        
        /// <remarks/>
        public long FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CheckOutDate {
            get {
                return this.checkOutDateField;
            }
            set {
                this.checkOutDateField = value;
            }
        }
        
        /// <remarks/>
        public string CheckOutBy {
            get {
                return this.checkOutByField;
            }
            set {
                this.checkOutByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifiedOn {
            get {
                return this.lastModifiedOnField;
            }
            set {
                this.lastModifiedOnField = value;
            }
        }
        
        /// <remarks/>
        public string LastModifiedBy {
            get {
                return this.lastModifiedByField;
            }
            set {
                this.lastModifiedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public bool NeverVersionPendingApproval {
            get {
                return this.neverVersionPendingApprovalField;
            }
            set {
                this.neverVersionPendingApprovalField = value;
            }
        }
        
        /// <remarks/>
        public int HasMarkups {
            get {
                return this.hasMarkupsField;
            }
            set {
                this.hasMarkupsField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentControlNumber {
            get {
                return this.documentControlNumberField;
            }
            set {
                this.documentControlNumberField = value;
            }
        }
        
        /// <remarks/>
        public string VersionControlNumber {
            get {
                return this.versionControlNumberField;
            }
            set {
                this.versionControlNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum ApprovalStatus {
        
        /// <remarks/>
        NotSubmittedForApproval,
        
        /// <remarks/>
        PendingApproval,
        
        /// <remarks/>
        Approved,
        
        /// <remarks/>
        NotApproved,
        
        /// <remarks/>
        ApprovalNotDetermined,
        
        /// <remarks/>
        ApprovalPostponed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public enum DocumentSchemaType {
        
        /// <remarks/>
        ElectronicDocument,
        
        /// <remarks/>
        ElectronicRecord,
        
        /// <remarks/>
        OfflineDocument,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class DropdownFieldChoice {
        
        private int idField;
        
        private string valueField;
        
        private string sourceChoiceIdField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string SourceChoiceId {
            get {
                return this.sourceChoiceIdField;
            }
            set {
                this.sourceChoiceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class DrilldownFieldChoice {
        
        private int idField;
        
        private string valueField;
        
        private DrilldownFieldChoice[] childChoicesField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public DrilldownFieldChoice[] ChildChoices {
            get {
                return this.childChoicesField;
            }
            set {
                this.childChoicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class WorkflowItem {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class DocumentData {
        
        private int documentIdField;
        
        private string reportObjectIdField;
        
        private int sourceDocumentIdField;
        
        private int documentVersionIdField;
        
        private int metadataVersionIdField;
        
        private int documentSchemaIdField;
        
        private DocumentSchemaType documentTypeField;
        
        private object[] dataColumnsField;
        
        private bool canEditField;
        
        private bool showEditField;
        
        private bool canEditReadOnlyFieldsField;
        
        private bool canChangeTypeField;
        
        private bool canConvertToOfflineField;
        
        private bool canConvertToElectronicField;
        
        private bool canArchiveField;
        
        private bool canCheckInField;
        
        private bool showCheckInField;
        
        private bool canCheckOutField;
        
        private bool canCreateShortcutField;
        
        private bool showCreateShortcutField;
        
        private bool canViewHistoryField;
        
        private bool showViewHistoryField;
        
        private bool canSetAlertField;
        
        private bool showSetAlertField;
        
        private bool canSetReminderField;
        
        private bool showSetReminderField;
        
        private bool canDeleteField;
        
        private bool alertMeOfChangesField;
        
        private bool isDeletedField;
        
        private bool isArchiveField;
        
        private bool canCancelWorkflowField;
        
        private bool canRestartWorkflowField;
        
        private WorkflowItem[] availableWorkflowTemplatesField;
        
        private bool canAddToWorkflowField;
        
        private bool hasAccessToSignOffSheetField;
        
        private bool hasAccessToWFFeedbackField;
        
        private bool hasLinkedDocumentsField;
        
        private bool hasActiveWorkflowField;
        
        private string originalFileNameField;
        
        private bool canAddMarkupField;
        
        private bool showAddMarkupField;
        
        private bool hasMarkupField;
        
        private bool isLastVersionField;
        
        private string extensionField;
        
        private int checkedOutByField;
        
        private bool isCheckedOutByMeField;
        
        private int[] autoTaggedFieldsField;
        
        private string versionNumberField;
        
        private bool isCabinetOwnerField;
        
        private bool isHiddenVersionField;
        
        private bool isWFExternalField;
        
        private bool hasSupportingWorkflowField;
        
        private bool hasLockedMarkupField;
        
        /// <remarks/>
        public int DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public string ReportObjectId {
            get {
                return this.reportObjectIdField;
            }
            set {
                this.reportObjectIdField = value;
            }
        }
        
        /// <remarks/>
        public int SourceDocumentId {
            get {
                return this.sourceDocumentIdField;
            }
            set {
                this.sourceDocumentIdField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentVersionId {
            get {
                return this.documentVersionIdField;
            }
            set {
                this.documentVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public int MetadataVersionId {
            get {
                return this.metadataVersionIdField;
            }
            set {
                this.metadataVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentSchemaId {
            get {
                return this.documentSchemaIdField;
            }
            set {
                this.documentSchemaIdField = value;
            }
        }
        
        /// <remarks/>
        public DocumentSchemaType DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public object[] DataColumns {
            get {
                return this.dataColumnsField;
            }
            set {
                this.dataColumnsField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowEdit {
            get {
                return this.showEditField;
            }
            set {
                this.showEditField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEditReadOnlyFields {
            get {
                return this.canEditReadOnlyFieldsField;
            }
            set {
                this.canEditReadOnlyFieldsField = value;
            }
        }
        
        /// <remarks/>
        public bool CanChangeType {
            get {
                return this.canChangeTypeField;
            }
            set {
                this.canChangeTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool CanConvertToOffline {
            get {
                return this.canConvertToOfflineField;
            }
            set {
                this.canConvertToOfflineField = value;
            }
        }
        
        /// <remarks/>
        public bool CanConvertToElectronic {
            get {
                return this.canConvertToElectronicField;
            }
            set {
                this.canConvertToElectronicField = value;
            }
        }
        
        /// <remarks/>
        public bool CanArchive {
            get {
                return this.canArchiveField;
            }
            set {
                this.canArchiveField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCheckIn {
            get {
                return this.canCheckInField;
            }
            set {
                this.canCheckInField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowCheckIn {
            get {
                return this.showCheckInField;
            }
            set {
                this.showCheckInField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCheckOut {
            get {
                return this.canCheckOutField;
            }
            set {
                this.canCheckOutField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCreateShortcut {
            get {
                return this.canCreateShortcutField;
            }
            set {
                this.canCreateShortcutField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowCreateShortcut {
            get {
                return this.showCreateShortcutField;
            }
            set {
                this.showCreateShortcutField = value;
            }
        }
        
        /// <remarks/>
        public bool CanViewHistory {
            get {
                return this.canViewHistoryField;
            }
            set {
                this.canViewHistoryField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowViewHistory {
            get {
                return this.showViewHistoryField;
            }
            set {
                this.showViewHistoryField = value;
            }
        }
        
        /// <remarks/>
        public bool CanSetAlert {
            get {
                return this.canSetAlertField;
            }
            set {
                this.canSetAlertField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSetAlert {
            get {
                return this.showSetAlertField;
            }
            set {
                this.showSetAlertField = value;
            }
        }
        
        /// <remarks/>
        public bool CanSetReminder {
            get {
                return this.canSetReminderField;
            }
            set {
                this.canSetReminderField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSetReminder {
            get {
                return this.showSetReminderField;
            }
            set {
                this.showSetReminderField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool AlertMeOfChanges {
            get {
                return this.alertMeOfChangesField;
            }
            set {
                this.alertMeOfChangesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsArchive {
            get {
                return this.isArchiveField;
            }
            set {
                this.isArchiveField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCancelWorkflow {
            get {
                return this.canCancelWorkflowField;
            }
            set {
                this.canCancelWorkflowField = value;
            }
        }
        
        /// <remarks/>
        public bool CanRestartWorkflow {
            get {
                return this.canRestartWorkflowField;
            }
            set {
                this.canRestartWorkflowField = value;
            }
        }
        
        /// <remarks/>
        public WorkflowItem[] AvailableWorkflowTemplates {
            get {
                return this.availableWorkflowTemplatesField;
            }
            set {
                this.availableWorkflowTemplatesField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddToWorkflow {
            get {
                return this.canAddToWorkflowField;
            }
            set {
                this.canAddToWorkflowField = value;
            }
        }
        
        /// <remarks/>
        public bool HasAccessToSignOffSheet {
            get {
                return this.hasAccessToSignOffSheetField;
            }
            set {
                this.hasAccessToSignOffSheetField = value;
            }
        }
        
        /// <remarks/>
        public bool HasAccessToWFFeedback {
            get {
                return this.hasAccessToWFFeedbackField;
            }
            set {
                this.hasAccessToWFFeedbackField = value;
            }
        }
        
        /// <remarks/>
        public bool HasLinkedDocuments {
            get {
                return this.hasLinkedDocumentsField;
            }
            set {
                this.hasLinkedDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasActiveWorkflow {
            get {
                return this.hasActiveWorkflowField;
            }
            set {
                this.hasActiveWorkflowField = value;
            }
        }
        
        /// <remarks/>
        public string OriginalFileName {
            get {
                return this.originalFileNameField;
            }
            set {
                this.originalFileNameField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddMarkup {
            get {
                return this.canAddMarkupField;
            }
            set {
                this.canAddMarkupField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowAddMarkup {
            get {
                return this.showAddMarkupField;
            }
            set {
                this.showAddMarkupField = value;
            }
        }
        
        /// <remarks/>
        public bool HasMarkup {
            get {
                return this.hasMarkupField;
            }
            set {
                this.hasMarkupField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLastVersion {
            get {
                return this.isLastVersionField;
            }
            set {
                this.isLastVersionField = value;
            }
        }
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        public int CheckedOutBy {
            get {
                return this.checkedOutByField;
            }
            set {
                this.checkedOutByField = value;
            }
        }
        
        /// <remarks/>
        public bool IsCheckedOutByMe {
            get {
                return this.isCheckedOutByMeField;
            }
            set {
                this.isCheckedOutByMeField = value;
            }
        }
        
        /// <remarks/>
        public int[] AutoTaggedFields {
            get {
                return this.autoTaggedFieldsField;
            }
            set {
                this.autoTaggedFieldsField = value;
            }
        }
        
        /// <remarks/>
        public string VersionNumber {
            get {
                return this.versionNumberField;
            }
            set {
                this.versionNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool IsCabinetOwner {
            get {
                return this.isCabinetOwnerField;
            }
            set {
                this.isCabinetOwnerField = value;
            }
        }
        
        /// <remarks/>
        public bool IsHiddenVersion {
            get {
                return this.isHiddenVersionField;
            }
            set {
                this.isHiddenVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsWFExternal {
            get {
                return this.isWFExternalField;
            }
            set {
                this.isWFExternalField = value;
            }
        }
        
        /// <remarks/>
        public bool HasSupportingWorkflow {
            get {
                return this.hasSupportingWorkflowField;
            }
            set {
                this.hasSupportingWorkflowField = value;
            }
        }
        
        /// <remarks/>
        public bool HasLockedMarkup {
            get {
                return this.hasLockedMarkupField;
            }
            set {
                this.hasLockedMarkupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentfinder/")]
    public partial class DisplayFormat {
        
        private int decimalPlacesField;
        
        private string decimalSeparatorField;
        
        private string groupSeparatorField;
        
        private bool currencySymbolAtBeginningField;
        
        private string dateOrNegativeFormatField;
        
        private string negativeColorField;
        
        private int rowsField;
        
        private bool showFullPathField;
        
        private string pathSeparatorField;
        
        /// <remarks/>
        public int DecimalPlaces {
            get {
                return this.decimalPlacesField;
            }
            set {
                this.decimalPlacesField = value;
            }
        }
        
        /// <remarks/>
        public string DecimalSeparator {
            get {
                return this.decimalSeparatorField;
            }
            set {
                this.decimalSeparatorField = value;
            }
        }
        
        /// <remarks/>
        public string GroupSeparator {
            get {
                return this.groupSeparatorField;
            }
            set {
                this.groupSeparatorField = value;
            }
        }
        
        /// <remarks/>
        public bool CurrencySymbolAtBeginning {
            get {
                return this.currencySymbolAtBeginningField;
            }
            set {
                this.currencySymbolAtBeginningField = value;
            }
        }
        
        /// <remarks/>
        public string DateOrNegativeFormat {
            get {
                return this.dateOrNegativeFormatField;
            }
            set {
                this.dateOrNegativeFormatField = value;
            }
        }
        
        /// <remarks/>
        public string NegativeColor {
            get {
                return this.negativeColorField;
            }
            set {
                this.negativeColorField = value;
            }
        }
        
        /// <remarks/>
        public int Rows {
            get {
                return this.rowsField;
            }
            set {
                this.rowsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowFullPath {
            get {
                return this.showFullPathField;
            }
            set {
                this.showFullPathField = value;
            }
        }
        
        /// <remarks/>
        public string PathSeparator {
            get {
                return this.pathSeparatorField;
            }
            set {
                this.pathSeparatorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentDetailsCompletedEventHandler(object sender, GetDocumentDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ColumnsWithValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ColumnsWithValues)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentDetailsWithChangesCompletedEventHandler(object sender, GetDocumentDetailsWithChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentDetailsWithChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentDetailsWithChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ColumnsWithValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ColumnsWithValues)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentExtensionCompletedEventHandler(object sender, GetDocumentExtensionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSchemaTypeForDocumentCompletedEventHandler(object sender, GetSchemaTypeForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaTypeForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaTypeForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentSchemaType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentSchemaType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSchemaIdForDocumentCompletedEventHandler(object sender, GetSchemaIdForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaIdForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaIdForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentDetailsForSchemaCompletedEventHandler(object sender, GetDocumentDetailsForSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentDetailsForSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentDetailsForSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ColumnsWithValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ColumnsWithValues)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentSystemDetailsCompletedEventHandler(object sender, GetDocumentSystemDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentSystemDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentSystemDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentSystemFields Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentSystemFields)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFieldsForViewCompletedEventHandler(object sender, GetFieldsForViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldsForViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldsForViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FieldDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FieldDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserViewFieldsCompletedEventHandler(object sender, GetUserViewFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserViewFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserViewFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FieldDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FieldDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMergedDocumentsCompletedEventHandler(object sender, GetMergedDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMergedDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMergedDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ColumnsWithValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ColumnsWithValues)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetVersionsWithIdsCompletedEventHandler(object sender, GetVersionsWithIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionsWithIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionsWithIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VersionWithId[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VersionWithId[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLastDocumentVersionsCompletedEventHandler(object sender, GetLastDocumentVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastDocumentVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastDocumentVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetColumnForDocumentsCompletedEventHandler(object sender, GetColumnForDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetColumnForDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetColumnForDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsBySnapshotCompletedEventHandler(object sender, GetDocumentsBySnapshotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsBySnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsBySnapshotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ColumnsWithValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ColumnsWithValues)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid snapshotId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSnapshotDocumentCountCompletedEventHandler(object sender, GetSnapshotDocumentCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSnapshotDocumentCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSnapshotDocumentCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FindDocumentInSnapshotCompletedEventHandler(object sender, FindDocumentInSnapshotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindDocumentInSnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindDocumentInSnapshotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SaveSmartFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SaveUserSmartFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void LoadSmartFolderCompletedEventHandler(object sender, LoadSmartFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadSmartFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadSmartFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchCriteria Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchCriteria)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void LoadUserSmartFolderCompletedEventHandler(object sender, LoadUserSmartFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadUserSmartFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadUserSmartFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchCriteria Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchCriteria)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUsageLogUsersListCompletedEventHandler(object sender, GetUsageLogUsersListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsageLogUsersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsageLogUsersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserLogEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserLogEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUsageLogCompletedEventHandler(object sender, GetUsageLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsageLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsageLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UsageLogEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UsageLogEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUsageLogCountCompletedEventHandler(object sender, GetUsageLogCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsageLogCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsageLogCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCalendarEntriesCompletedEventHandler(object sender, GetCalendarEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalendarEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalendarEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CalendarEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CalendarEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSearchTextResultCompletedEventHandler(object sender, GetSearchTextResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSearchTextResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSearchTextResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFtsErrorSubListCompletedEventHandler(object sender, GetFtsErrorSubListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtsErrorSubListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtsErrorSubListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FtsErrorExtendedInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FtsErrorExtendedInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFtsErrorListCompletedEventHandler(object sender, GetFtsErrorListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtsErrorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtsErrorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FtsErrorExtendedInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FtsErrorExtendedInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFtsErrorInfoCountCompletedEventHandler(object sender, GetFtsErrorInfoCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtsErrorInfoCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtsErrorInfoCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFtsErrorVisibilityStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetAllFtsErrorVisibilityStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUnindexedDocumentsListCompletedEventHandler(object sender, GetUnindexedDocumentsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnindexedDocumentsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnindexedDocumentsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UnindexedDocumentInformation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UnindexedDocumentInformation[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUnindexedDocumentsCountCompletedEventHandler(object sender, GetUnindexedDocumentsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnindexedDocumentsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnindexedDocumentsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DisableVisibilityInUnindexedDocumentListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DisableVisibilityInUnindexedDocumentListAllCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveFromUnidexedDocumentListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFtsStateCompletedEventHandler(object sender, GetFtsStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtsStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtsStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFtsScheduledCompletedEventHandler(object sender, GetFtsScheduledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtsScheduledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtsScheduledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void InitializeFtsIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFtsLastUpdateStateCompletedEventHandler(object sender, GetFtsLastUpdateStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtsLastUpdateStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtsLastUpdateStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591