//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.adeActiveDocs {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="adeDocumentAssemblySoap", Namespace="http://www.activedocs.com/webservices/adeDocumentAssembly")]
    public partial class adeDocumentAssembly : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompileStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkDocumentForDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentBytesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetErrorDetailsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobProgressOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAnswerFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnswerFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnswerFileAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDocumentBytesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliverDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliverDocumentPrintQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliverDocumentEmailQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeliveryStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliverJobPrintQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeliveryProgressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeliveryJobProgressOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeDeliveryQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableDeliveryQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableDeliveryQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinalizeDocumentOnUserBehalfOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinalizeDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanDocumentSetBeFinalizedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDocumentWorkFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentWorkFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplateWorkFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubsiteWorkFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentApproveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecallDocumentApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDocumentForApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentDocumentUsageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveDocsEventLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckHealthOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessDocumentsNowOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPM_PingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public adeDocumentAssembly() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_adeActiveDocs_adeDocumentAssembly;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsCompleteCompletedEventHandler IsCompleteCompleted;
        
        /// <remarks/>
        public event GetCompileStatusCompletedEventHandler GetCompileStatusCompleted;
        
        /// <remarks/>
        public event GetDocumentStatusCompletedEventHandler GetDocumentStatusCompleted;
        
        /// <remarks/>
        public event MarkDocumentForDeleteCompletedEventHandler MarkDocumentForDeleteCompleted;
        
        /// <remarks/>
        public event DeleteDocumentCompletedEventHandler DeleteDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentBytesCompletedEventHandler GetDocumentBytesCompleted;
        
        /// <remarks/>
        public event GetErrorDetailsXMLCompletedEventHandler GetErrorDetailsXMLCompleted;
        
        /// <remarks/>
        public event StartJobCompletedEventHandler StartJobCompleted;
        
        /// <remarks/>
        public event GetJobStatusCompletedEventHandler GetJobStatusCompleted;
        
        /// <remarks/>
        public event GetDocumentIDsCompletedEventHandler GetDocumentIDsCompleted;
        
        /// <remarks/>
        public event DeleteJobCompletedEventHandler DeleteJobCompleted;
        
        /// <remarks/>
        public event GetJobProgressCompletedEventHandler GetJobProgressCompleted;
        
        /// <remarks/>
        public event CancelJobCompletedEventHandler CancelJobCompleted;
        
        /// <remarks/>
        public event SetAnswerFileCompletedEventHandler SetAnswerFileCompleted;
        
        /// <remarks/>
        public event GetAnswerFileCompletedEventHandler GetAnswerFileCompleted;
        
        /// <remarks/>
        public event GetAnswerFileAttachmentCompletedEventHandler GetAnswerFileAttachmentCompleted;
        
        /// <remarks/>
        public event SetDocumentBytesCompletedEventHandler SetDocumentBytesCompleted;
        
        /// <remarks/>
        public event FindDocumentsCompletedEventHandler FindDocumentsCompleted;
        
        /// <remarks/>
        public event GetDocumentPropertiesCompletedEventHandler GetDocumentPropertiesCompleted;
        
        /// <remarks/>
        public event ConvertDocumentCompletedEventHandler ConvertDocumentCompleted;
        
        /// <remarks/>
        public event DeliverDocumentCompletedEventHandler DeliverDocumentCompleted;
        
        /// <remarks/>
        public event DeliverDocumentPrintQueueCompletedEventHandler DeliverDocumentPrintQueueCompleted;
        
        /// <remarks/>
        public event DeliverDocumentEmailQueueCompletedEventHandler DeliverDocumentEmailQueueCompleted;
        
        /// <remarks/>
        public event GetDeliveryStatusCompletedEventHandler GetDeliveryStatusCompleted;
        
        /// <remarks/>
        public event DeliverJobPrintQueueCompletedEventHandler DeliverJobPrintQueueCompleted;
        
        /// <remarks/>
        public event GetDeliveryProgressCompletedEventHandler GetDeliveryProgressCompleted;
        
        /// <remarks/>
        public event GetDeliveryJobProgressCompletedEventHandler GetDeliveryJobProgressCompleted;
        
        /// <remarks/>
        public event PurgeDeliveryQueueCompletedEventHandler PurgeDeliveryQueueCompleted;
        
        /// <remarks/>
        public event EnableDeliveryQueueCompletedEventHandler EnableDeliveryQueueCompleted;
        
        /// <remarks/>
        public event DisableDeliveryQueueCompletedEventHandler DisableDeliveryQueueCompleted;
        
        /// <remarks/>
        public event FinalizeDocumentOnUserBehalfCompletedEventHandler FinalizeDocumentOnUserBehalfCompleted;
        
        /// <remarks/>
        public event FinalizeDocumentCompletedEventHandler FinalizeDocumentCompleted;
        
        /// <remarks/>
        public event CanDocumentSetBeFinalizedCompletedEventHandler CanDocumentSetBeFinalizedCompleted;
        
        /// <remarks/>
        public event SetDocumentWorkFlowCompletedEventHandler SetDocumentWorkFlowCompleted;
        
        /// <remarks/>
        public event GetDocumentWorkFlowCompletedEventHandler GetDocumentWorkFlowCompleted;
        
        /// <remarks/>
        public event GetTemplateWorkFlowCompletedEventHandler GetTemplateWorkFlowCompleted;
        
        /// <remarks/>
        public event GetSubsiteWorkFlowCompletedEventHandler GetSubsiteWorkFlowCompleted;
        
        /// <remarks/>
        public event DocumentApproveCompletedEventHandler DocumentApproveCompleted;
        
        /// <remarks/>
        public event RecallDocumentApprovalCompletedEventHandler RecallDocumentApprovalCompleted;
        
        /// <remarks/>
        public event SendDocumentForApprovalCompletedEventHandler SendDocumentForApprovalCompleted;
        
        /// <remarks/>
        public event GetCurrentDocumentUsageCompletedEventHandler GetCurrentDocumentUsageCompleted;
        
        /// <remarks/>
        public event GetActiveDocsEventLogCompletedEventHandler GetActiveDocsEventLogCompleted;
        
        /// <remarks/>
        public event CheckHealthCompletedEventHandler CheckHealthCompleted;
        
        /// <remarks/>
        public event ProcessDocumentsNowCompletedEventHandler ProcessDocumentsNowCompleted;
        
        /// <remarks/>
        public event SPM_PingCompletedEventHandler SPM_PingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/IsComplete", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsComplete(string sID, string sCallerID) {
            object[] results = this.Invoke("IsComplete", new object[] {
                        sID,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCompleteAsync(string sID, string sCallerID) {
            this.IsCompleteAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void IsCompleteAsync(string sID, string sCallerID, object userState) {
            if ((this.IsCompleteOperationCompleted == null)) {
                this.IsCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCompleteOperationCompleted);
            }
            this.InvokeAsync("IsComplete", new object[] {
                        sID,
                        sCallerID}, this.IsCompleteOperationCompleted, userState);
        }
        
        private void OnIsCompleteOperationCompleted(object arg) {
            if ((this.IsCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCompleteCompleted(this, new IsCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetCompileStatus", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public short GetCompileStatus(string sID, string sCallerID) {
            object[] results = this.Invoke("GetCompileStatus", new object[] {
                        sID,
                        sCallerID});
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompileStatusAsync(string sID, string sCallerID) {
            this.GetCompileStatusAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetCompileStatusAsync(string sID, string sCallerID, object userState) {
            if ((this.GetCompileStatusOperationCompleted == null)) {
                this.GetCompileStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompileStatusOperationCompleted);
            }
            this.InvokeAsync("GetCompileStatus", new object[] {
                        sID,
                        sCallerID}, this.GetCompileStatusOperationCompleted, userState);
        }
        
        private void OnGetCompileStatusOperationCompleted(object arg) {
            if ((this.GetCompileStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompileStatusCompleted(this, new GetCompileStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDocumentStatus", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public short GetDocumentStatus(string sID, string sCallerID) {
            object[] results = this.Invoke("GetDocumentStatus", new object[] {
                        sID,
                        sCallerID});
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentStatusAsync(string sID, string sCallerID) {
            this.GetDocumentStatusAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDocumentStatusAsync(string sID, string sCallerID, object userState) {
            if ((this.GetDocumentStatusOperationCompleted == null)) {
                this.GetDocumentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentStatusOperationCompleted);
            }
            this.InvokeAsync("GetDocumentStatus", new object[] {
                        sID,
                        sCallerID}, this.GetDocumentStatusOperationCompleted, userState);
        }
        
        private void OnGetDocumentStatusOperationCompleted(object arg) {
            if ((this.GetDocumentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentStatusCompleted(this, new GetDocumentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/MarkDocumentForDelete", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MarkDocumentForDelete(string sID, string sCallerID) {
            object[] results = this.Invoke("MarkDocumentForDelete", new object[] {
                        sID,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MarkDocumentForDeleteAsync(string sID, string sCallerID) {
            this.MarkDocumentForDeleteAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void MarkDocumentForDeleteAsync(string sID, string sCallerID, object userState) {
            if ((this.MarkDocumentForDeleteOperationCompleted == null)) {
                this.MarkDocumentForDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkDocumentForDeleteOperationCompleted);
            }
            this.InvokeAsync("MarkDocumentForDelete", new object[] {
                        sID,
                        sCallerID}, this.MarkDocumentForDeleteOperationCompleted, userState);
        }
        
        private void OnMarkDocumentForDeleteOperationCompleted(object arg) {
            if ((this.MarkDocumentForDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkDocumentForDeleteCompleted(this, new MarkDocumentForDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DeleteDocument", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteDocument(string sID, string sCallerID) {
            object[] results = this.Invoke("DeleteDocument", new object[] {
                        sID,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDocumentAsync(string sID, string sCallerID) {
            this.DeleteDocumentAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void DeleteDocumentAsync(string sID, string sCallerID, object userState) {
            if ((this.DeleteDocumentOperationCompleted == null)) {
                this.DeleteDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentOperationCompleted);
            }
            this.InvokeAsync("DeleteDocument", new object[] {
                        sID,
                        sCallerID}, this.DeleteDocumentOperationCompleted, userState);
        }
        
        private void OnDeleteDocumentOperationCompleted(object arg) {
            if ((this.DeleteDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDocumentCompleted(this, new DeleteDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDocumentBytes", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentBytes(string sID, string sCallerID) {
            object[] results = this.Invoke("GetDocumentBytes", new object[] {
                        sID,
                        sCallerID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentBytesAsync(string sID, string sCallerID) {
            this.GetDocumentBytesAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDocumentBytesAsync(string sID, string sCallerID, object userState) {
            if ((this.GetDocumentBytesOperationCompleted == null)) {
                this.GetDocumentBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentBytesOperationCompleted);
            }
            this.InvokeAsync("GetDocumentBytes", new object[] {
                        sID,
                        sCallerID}, this.GetDocumentBytesOperationCompleted, userState);
        }
        
        private void OnGetDocumentBytesOperationCompleted(object arg) {
            if ((this.GetDocumentBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentBytesCompleted(this, new GetDocumentBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetErrorDetailsXML", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetErrorDetailsXML(string sID, string sCallerID) {
            object[] results = this.Invoke("GetErrorDetailsXML", new object[] {
                        sID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetErrorDetailsXMLAsync(string sID, string sCallerID) {
            this.GetErrorDetailsXMLAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetErrorDetailsXMLAsync(string sID, string sCallerID, object userState) {
            if ((this.GetErrorDetailsXMLOperationCompleted == null)) {
                this.GetErrorDetailsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetErrorDetailsXMLOperationCompleted);
            }
            this.InvokeAsync("GetErrorDetailsXML", new object[] {
                        sID,
                        sCallerID}, this.GetErrorDetailsXMLOperationCompleted, userState);
        }
        
        private void OnGetErrorDetailsXMLOperationCompleted(object arg) {
            if ((this.GetErrorDetailsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetErrorDetailsXMLCompleted(this, new GetErrorDetailsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/StartJob", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartJob(string sADEJobXML, string sCallerID) {
            object[] results = this.Invoke("StartJob", new object[] {
                        sADEJobXML,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartJobAsync(string sADEJobXML, string sCallerID) {
            this.StartJobAsync(sADEJobXML, sCallerID, null);
        }
        
        /// <remarks/>
        public void StartJobAsync(string sADEJobXML, string sCallerID, object userState) {
            if ((this.StartJobOperationCompleted == null)) {
                this.StartJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartJobOperationCompleted);
            }
            this.InvokeAsync("StartJob", new object[] {
                        sADEJobXML,
                        sCallerID}, this.StartJobOperationCompleted, userState);
        }
        
        private void OnStartJobOperationCompleted(object arg) {
            if ((this.StartJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartJobCompleted(this, new StartJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetJobStatus", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobStatus(string sJobID, string sCallerID) {
            object[] results = this.Invoke("GetJobStatus", new object[] {
                        sJobID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobStatusAsync(string sJobID, string sCallerID) {
            this.GetJobStatusAsync(sJobID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetJobStatusAsync(string sJobID, string sCallerID, object userState) {
            if ((this.GetJobStatusOperationCompleted == null)) {
                this.GetJobStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobStatusOperationCompleted);
            }
            this.InvokeAsync("GetJobStatus", new object[] {
                        sJobID,
                        sCallerID}, this.GetJobStatusOperationCompleted, userState);
        }
        
        private void OnGetJobStatusOperationCompleted(object arg) {
            if ((this.GetJobStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobStatusCompleted(this, new GetJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDocumentIDs", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentIDs(string sJobID, string sCallerID) {
            object[] results = this.Invoke("GetDocumentIDs", new object[] {
                        sJobID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentIDsAsync(string sJobID, string sCallerID) {
            this.GetDocumentIDsAsync(sJobID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDocumentIDsAsync(string sJobID, string sCallerID, object userState) {
            if ((this.GetDocumentIDsOperationCompleted == null)) {
                this.GetDocumentIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentIDsOperationCompleted);
            }
            this.InvokeAsync("GetDocumentIDs", new object[] {
                        sJobID,
                        sCallerID}, this.GetDocumentIDsOperationCompleted, userState);
        }
        
        private void OnGetDocumentIDsOperationCompleted(object arg) {
            if ((this.GetDocumentIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentIDsCompleted(this, new GetDocumentIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DeleteJob", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteJob(string sJobID, string sCallerID) {
            this.Invoke("DeleteJob", new object[] {
                        sJobID,
                        sCallerID});
        }
        
        /// <remarks/>
        public void DeleteJobAsync(string sJobID, string sCallerID) {
            this.DeleteJobAsync(sJobID, sCallerID, null);
        }
        
        /// <remarks/>
        public void DeleteJobAsync(string sJobID, string sCallerID, object userState) {
            if ((this.DeleteJobOperationCompleted == null)) {
                this.DeleteJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteJobOperationCompleted);
            }
            this.InvokeAsync("DeleteJob", new object[] {
                        sJobID,
                        sCallerID}, this.DeleteJobOperationCompleted, userState);
        }
        
        private void OnDeleteJobOperationCompleted(object arg) {
            if ((this.DeleteJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetJobProgress", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetJobProgress(string sID, string sCallerID) {
            object[] results = this.Invoke("GetJobProgress", new object[] {
                        sID,
                        sCallerID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobProgressAsync(string sID, string sCallerID) {
            this.GetJobProgressAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetJobProgressAsync(string sID, string sCallerID, object userState) {
            if ((this.GetJobProgressOperationCompleted == null)) {
                this.GetJobProgressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobProgressOperationCompleted);
            }
            this.InvokeAsync("GetJobProgress", new object[] {
                        sID,
                        sCallerID}, this.GetJobProgressOperationCompleted, userState);
        }
        
        private void OnGetJobProgressOperationCompleted(object arg) {
            if ((this.GetJobProgressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobProgressCompleted(this, new GetJobProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/CancelJob", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CancelJob(string sID, string sLogMessage, string sCallerID) {
            object[] results = this.Invoke("CancelJob", new object[] {
                        sID,
                        sLogMessage,
                        sCallerID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CancelJobAsync(string sID, string sLogMessage, string sCallerID) {
            this.CancelJobAsync(sID, sLogMessage, sCallerID, null);
        }
        
        /// <remarks/>
        public void CancelJobAsync(string sID, string sLogMessage, string sCallerID, object userState) {
            if ((this.CancelJobOperationCompleted == null)) {
                this.CancelJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelJobOperationCompleted);
            }
            this.InvokeAsync("CancelJob", new object[] {
                        sID,
                        sLogMessage,
                        sCallerID}, this.CancelJobOperationCompleted, userState);
        }
        
        private void OnCancelJobOperationCompleted(object arg) {
            if ((this.CancelJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelJobCompleted(this, new CancelJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/SetAnswerFile", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetAnswerFile(string sAnswerXML, string sName, string sSubsiteName, string sCallerID) {
            object[] results = this.Invoke("SetAnswerFile", new object[] {
                        sAnswerXML,
                        sName,
                        sSubsiteName,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetAnswerFileAsync(string sAnswerXML, string sName, string sSubsiteName, string sCallerID) {
            this.SetAnswerFileAsync(sAnswerXML, sName, sSubsiteName, sCallerID, null);
        }
        
        /// <remarks/>
        public void SetAnswerFileAsync(string sAnswerXML, string sName, string sSubsiteName, string sCallerID, object userState) {
            if ((this.SetAnswerFileOperationCompleted == null)) {
                this.SetAnswerFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAnswerFileOperationCompleted);
            }
            this.InvokeAsync("SetAnswerFile", new object[] {
                        sAnswerXML,
                        sName,
                        sSubsiteName,
                        sCallerID}, this.SetAnswerFileOperationCompleted, userState);
        }
        
        private void OnSetAnswerFileOperationCompleted(object arg) {
            if ((this.SetAnswerFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAnswerFileCompleted(this, new SetAnswerFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetAnswerFile", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnswerFile(string sID, string sCallerID) {
            object[] results = this.Invoke("GetAnswerFile", new object[] {
                        sID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnswerFileAsync(string sID, string sCallerID) {
            this.GetAnswerFileAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetAnswerFileAsync(string sID, string sCallerID, object userState) {
            if ((this.GetAnswerFileOperationCompleted == null)) {
                this.GetAnswerFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnswerFileOperationCompleted);
            }
            this.InvokeAsync("GetAnswerFile", new object[] {
                        sID,
                        sCallerID}, this.GetAnswerFileOperationCompleted, userState);
        }
        
        private void OnGetAnswerFileOperationCompleted(object arg) {
            if ((this.GetAnswerFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnswerFileCompleted(this, new GetAnswerFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetAnswerFileAttachment" +
            "", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetAnswerFileAttachment(string sSnippetAttachmentID, string sCallerID) {
            object[] results = this.Invoke("GetAnswerFileAttachment", new object[] {
                        sSnippetAttachmentID,
                        sCallerID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAnswerFileAttachmentAsync(string sSnippetAttachmentID, string sCallerID) {
            this.GetAnswerFileAttachmentAsync(sSnippetAttachmentID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetAnswerFileAttachmentAsync(string sSnippetAttachmentID, string sCallerID, object userState) {
            if ((this.GetAnswerFileAttachmentOperationCompleted == null)) {
                this.GetAnswerFileAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnswerFileAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetAnswerFileAttachment", new object[] {
                        sSnippetAttachmentID,
                        sCallerID}, this.GetAnswerFileAttachmentOperationCompleted, userState);
        }
        
        private void OnGetAnswerFileAttachmentOperationCompleted(object arg) {
            if ((this.GetAnswerFileAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnswerFileAttachmentCompleted(this, new GetAnswerFileAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/SetDocumentBytes", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDocumentBytes(string sID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] yDocument, string sCallerID) {
            this.Invoke("SetDocumentBytes", new object[] {
                        sID,
                        yDocument,
                        sCallerID});
        }
        
        /// <remarks/>
        public void SetDocumentBytesAsync(string sID, byte[] yDocument, string sCallerID) {
            this.SetDocumentBytesAsync(sID, yDocument, sCallerID, null);
        }
        
        /// <remarks/>
        public void SetDocumentBytesAsync(string sID, byte[] yDocument, string sCallerID, object userState) {
            if ((this.SetDocumentBytesOperationCompleted == null)) {
                this.SetDocumentBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDocumentBytesOperationCompleted);
            }
            this.InvokeAsync("SetDocumentBytes", new object[] {
                        sID,
                        yDocument,
                        sCallerID}, this.SetDocumentBytesOperationCompleted, userState);
        }
        
        private void OnSetDocumentBytesOperationCompleted(object arg) {
            if ((this.SetDocumentBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDocumentBytesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/FindDocuments", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FindDocuments(string sSearchFor, int iFilterOption, string sCallerID) {
            object[] results = this.Invoke("FindDocuments", new object[] {
                        sSearchFor,
                        iFilterOption,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FindDocumentsAsync(string sSearchFor, int iFilterOption, string sCallerID) {
            this.FindDocumentsAsync(sSearchFor, iFilterOption, sCallerID, null);
        }
        
        /// <remarks/>
        public void FindDocumentsAsync(string sSearchFor, int iFilterOption, string sCallerID, object userState) {
            if ((this.FindDocumentsOperationCompleted == null)) {
                this.FindDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindDocumentsOperationCompleted);
            }
            this.InvokeAsync("FindDocuments", new object[] {
                        sSearchFor,
                        iFilterOption,
                        sCallerID}, this.FindDocumentsOperationCompleted, userState);
        }
        
        private void OnFindDocumentsOperationCompleted(object arg) {
            if ((this.FindDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindDocumentsCompleted(this, new FindDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDocumentProperties", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentProperties(string sID, string sCallerID) {
            object[] results = this.Invoke("GetDocumentProperties", new object[] {
                        sID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentPropertiesAsync(string sID, string sCallerID) {
            this.GetDocumentPropertiesAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDocumentPropertiesAsync(string sID, string sCallerID, object userState) {
            if ((this.GetDocumentPropertiesOperationCompleted == null)) {
                this.GetDocumentPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetDocumentProperties", new object[] {
                        sID,
                        sCallerID}, this.GetDocumentPropertiesOperationCompleted, userState);
        }
        
        private void OnGetDocumentPropertiesOperationCompleted(object arg) {
            if ((this.GetDocumentPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentPropertiesCompleted(this, new GetDocumentPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/ConvertDocument", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertDocument([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] yDocument, int iSourceFormat, int iConvertToFormat, string sForInternalUse, string sDocumentName, string sCallerID) {
            object[] results = this.Invoke("ConvertDocument", new object[] {
                        yDocument,
                        iSourceFormat,
                        iConvertToFormat,
                        sForInternalUse,
                        sDocumentName,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertDocumentAsync(byte[] yDocument, int iSourceFormat, int iConvertToFormat, string sForInternalUse, string sDocumentName, string sCallerID) {
            this.ConvertDocumentAsync(yDocument, iSourceFormat, iConvertToFormat, sForInternalUse, sDocumentName, sCallerID, null);
        }
        
        /// <remarks/>
        public void ConvertDocumentAsync(byte[] yDocument, int iSourceFormat, int iConvertToFormat, string sForInternalUse, string sDocumentName, string sCallerID, object userState) {
            if ((this.ConvertDocumentOperationCompleted == null)) {
                this.ConvertDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertDocumentOperationCompleted);
            }
            this.InvokeAsync("ConvertDocument", new object[] {
                        yDocument,
                        iSourceFormat,
                        iConvertToFormat,
                        sForInternalUse,
                        sDocumentName,
                        sCallerID}, this.ConvertDocumentOperationCompleted, userState);
        }
        
        private void OnConvertDocumentOperationCompleted(object arg) {
            if ((this.ConvertDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertDocumentCompleted(this, new ConvertDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DeliverDocument", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeliverDocument(string sSourceDocumentID, string sQueueName, string sSettingOverrideXML, string sCallerID) {
            object[] results = this.Invoke("DeliverDocument", new object[] {
                        sSourceDocumentID,
                        sQueueName,
                        sSettingOverrideXML,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeliverDocumentAsync(string sSourceDocumentID, string sQueueName, string sSettingOverrideXML, string sCallerID) {
            this.DeliverDocumentAsync(sSourceDocumentID, sQueueName, sSettingOverrideXML, sCallerID, null);
        }
        
        /// <remarks/>
        public void DeliverDocumentAsync(string sSourceDocumentID, string sQueueName, string sSettingOverrideXML, string sCallerID, object userState) {
            if ((this.DeliverDocumentOperationCompleted == null)) {
                this.DeliverDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliverDocumentOperationCompleted);
            }
            this.InvokeAsync("DeliverDocument", new object[] {
                        sSourceDocumentID,
                        sQueueName,
                        sSettingOverrideXML,
                        sCallerID}, this.DeliverDocumentOperationCompleted, userState);
        }
        
        private void OnDeliverDocumentOperationCompleted(object arg) {
            if ((this.DeliverDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliverDocumentCompleted(this, new DeliverDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DeliverDocumentPrintQue" +
            "ue", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeliverDocumentPrintQueue(string sSourceDocumentID, string sQueueName, long lCopies, string sSubSiteName, string sCallerID) {
            object[] results = this.Invoke("DeliverDocumentPrintQueue", new object[] {
                        sSourceDocumentID,
                        sQueueName,
                        lCopies,
                        sSubSiteName,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeliverDocumentPrintQueueAsync(string sSourceDocumentID, string sQueueName, long lCopies, string sSubSiteName, string sCallerID) {
            this.DeliverDocumentPrintQueueAsync(sSourceDocumentID, sQueueName, lCopies, sSubSiteName, sCallerID, null);
        }
        
        /// <remarks/>
        public void DeliverDocumentPrintQueueAsync(string sSourceDocumentID, string sQueueName, long lCopies, string sSubSiteName, string sCallerID, object userState) {
            if ((this.DeliverDocumentPrintQueueOperationCompleted == null)) {
                this.DeliverDocumentPrintQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliverDocumentPrintQueueOperationCompleted);
            }
            this.InvokeAsync("DeliverDocumentPrintQueue", new object[] {
                        sSourceDocumentID,
                        sQueueName,
                        lCopies,
                        sSubSiteName,
                        sCallerID}, this.DeliverDocumentPrintQueueOperationCompleted, userState);
        }
        
        private void OnDeliverDocumentPrintQueueOperationCompleted(object arg) {
            if ((this.DeliverDocumentPrintQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliverDocumentPrintQueueCompleted(this, new DeliverDocumentPrintQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DeliverDocumentEmailQue" +
            "ue", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeliverDocumentEmailQueue(string sSourceDocumentID, string sQueueName, string sToEmailAddress, string sFromEmailAddress, string sSubject, string sBody, int iAttachDocumentOption, string sSubSiteName, string sCallerID) {
            object[] results = this.Invoke("DeliverDocumentEmailQueue", new object[] {
                        sSourceDocumentID,
                        sQueueName,
                        sToEmailAddress,
                        sFromEmailAddress,
                        sSubject,
                        sBody,
                        iAttachDocumentOption,
                        sSubSiteName,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeliverDocumentEmailQueueAsync(string sSourceDocumentID, string sQueueName, string sToEmailAddress, string sFromEmailAddress, string sSubject, string sBody, int iAttachDocumentOption, string sSubSiteName, string sCallerID) {
            this.DeliverDocumentEmailQueueAsync(sSourceDocumentID, sQueueName, sToEmailAddress, sFromEmailAddress, sSubject, sBody, iAttachDocumentOption, sSubSiteName, sCallerID, null);
        }
        
        /// <remarks/>
        public void DeliverDocumentEmailQueueAsync(string sSourceDocumentID, string sQueueName, string sToEmailAddress, string sFromEmailAddress, string sSubject, string sBody, int iAttachDocumentOption, string sSubSiteName, string sCallerID, object userState) {
            if ((this.DeliverDocumentEmailQueueOperationCompleted == null)) {
                this.DeliverDocumentEmailQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliverDocumentEmailQueueOperationCompleted);
            }
            this.InvokeAsync("DeliverDocumentEmailQueue", new object[] {
                        sSourceDocumentID,
                        sQueueName,
                        sToEmailAddress,
                        sFromEmailAddress,
                        sSubject,
                        sBody,
                        iAttachDocumentOption,
                        sSubSiteName,
                        sCallerID}, this.DeliverDocumentEmailQueueOperationCompleted, userState);
        }
        
        private void OnDeliverDocumentEmailQueueOperationCompleted(object arg) {
            if ((this.DeliverDocumentEmailQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliverDocumentEmailQueueCompleted(this, new DeliverDocumentEmailQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDeliveryStatus", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public short GetDeliveryStatus(string sID, string sCallerID) {
            object[] results = this.Invoke("GetDeliveryStatus", new object[] {
                        sID,
                        sCallerID});
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeliveryStatusAsync(string sID, string sCallerID) {
            this.GetDeliveryStatusAsync(sID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDeliveryStatusAsync(string sID, string sCallerID, object userState) {
            if ((this.GetDeliveryStatusOperationCompleted == null)) {
                this.GetDeliveryStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeliveryStatusOperationCompleted);
            }
            this.InvokeAsync("GetDeliveryStatus", new object[] {
                        sID,
                        sCallerID}, this.GetDeliveryStatusOperationCompleted, userState);
        }
        
        private void OnGetDeliveryStatusOperationCompleted(object arg) {
            if ((this.GetDeliveryStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeliveryStatusCompleted(this, new GetDeliveryStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DeliverJobPrintQueue", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DeliverJobPrintQueue(string sID, string sQueueName, long lCopies, string sSubSiteName, string sCallerID) {
            object[] results = this.Invoke("DeliverJobPrintQueue", new object[] {
                        sID,
                        sQueueName,
                        lCopies,
                        sSubSiteName,
                        sCallerID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DeliverJobPrintQueueAsync(string sID, string sQueueName, long lCopies, string sSubSiteName, string sCallerID) {
            this.DeliverJobPrintQueueAsync(sID, sQueueName, lCopies, sSubSiteName, sCallerID, null);
        }
        
        /// <remarks/>
        public void DeliverJobPrintQueueAsync(string sID, string sQueueName, long lCopies, string sSubSiteName, string sCallerID, object userState) {
            if ((this.DeliverJobPrintQueueOperationCompleted == null)) {
                this.DeliverJobPrintQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliverJobPrintQueueOperationCompleted);
            }
            this.InvokeAsync("DeliverJobPrintQueue", new object[] {
                        sID,
                        sQueueName,
                        lCopies,
                        sSubSiteName,
                        sCallerID}, this.DeliverJobPrintQueueOperationCompleted, userState);
        }
        
        private void OnDeliverJobPrintQueueOperationCompleted(object arg) {
            if ((this.DeliverJobPrintQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliverJobPrintQueueCompleted(this, new DeliverJobPrintQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDeliveryProgress", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetDeliveryProgress(string sDeliveryQueueName, System.DateTime dtDeliveryDate, string sCallerID) {
            object[] results = this.Invoke("GetDeliveryProgress", new object[] {
                        sDeliveryQueueName,
                        dtDeliveryDate,
                        sCallerID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeliveryProgressAsync(string sDeliveryQueueName, System.DateTime dtDeliveryDate, string sCallerID) {
            this.GetDeliveryProgressAsync(sDeliveryQueueName, dtDeliveryDate, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDeliveryProgressAsync(string sDeliveryQueueName, System.DateTime dtDeliveryDate, string sCallerID, object userState) {
            if ((this.GetDeliveryProgressOperationCompleted == null)) {
                this.GetDeliveryProgressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeliveryProgressOperationCompleted);
            }
            this.InvokeAsync("GetDeliveryProgress", new object[] {
                        sDeliveryQueueName,
                        dtDeliveryDate,
                        sCallerID}, this.GetDeliveryProgressOperationCompleted, userState);
        }
        
        private void OnGetDeliveryProgressOperationCompleted(object arg) {
            if ((this.GetDeliveryProgressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeliveryProgressCompleted(this, new GetDeliveryProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDeliveryJobProgress", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetDeliveryJobProgress(string sJobID, string sCallerID) {
            object[] results = this.Invoke("GetDeliveryJobProgress", new object[] {
                        sJobID,
                        sCallerID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeliveryJobProgressAsync(string sJobID, string sCallerID) {
            this.GetDeliveryJobProgressAsync(sJobID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDeliveryJobProgressAsync(string sJobID, string sCallerID, object userState) {
            if ((this.GetDeliveryJobProgressOperationCompleted == null)) {
                this.GetDeliveryJobProgressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeliveryJobProgressOperationCompleted);
            }
            this.InvokeAsync("GetDeliveryJobProgress", new object[] {
                        sJobID,
                        sCallerID}, this.GetDeliveryJobProgressOperationCompleted, userState);
        }
        
        private void OnGetDeliveryJobProgressOperationCompleted(object arg) {
            if ((this.GetDeliveryJobProgressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeliveryJobProgressCompleted(this, new GetDeliveryJobProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/PurgeDeliveryQueue", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PurgeDeliveryQueue(string sDeliveryQueueName, System.DateTime dtBeforeDate, string sCallerID) {
            this.Invoke("PurgeDeliveryQueue", new object[] {
                        sDeliveryQueueName,
                        dtBeforeDate,
                        sCallerID});
        }
        
        /// <remarks/>
        public void PurgeDeliveryQueueAsync(string sDeliveryQueueName, System.DateTime dtBeforeDate, string sCallerID) {
            this.PurgeDeliveryQueueAsync(sDeliveryQueueName, dtBeforeDate, sCallerID, null);
        }
        
        /// <remarks/>
        public void PurgeDeliveryQueueAsync(string sDeliveryQueueName, System.DateTime dtBeforeDate, string sCallerID, object userState) {
            if ((this.PurgeDeliveryQueueOperationCompleted == null)) {
                this.PurgeDeliveryQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeDeliveryQueueOperationCompleted);
            }
            this.InvokeAsync("PurgeDeliveryQueue", new object[] {
                        sDeliveryQueueName,
                        dtBeforeDate,
                        sCallerID}, this.PurgeDeliveryQueueOperationCompleted, userState);
        }
        
        private void OnPurgeDeliveryQueueOperationCompleted(object arg) {
            if ((this.PurgeDeliveryQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeDeliveryQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/EnableDeliveryQueue", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableDeliveryQueue(string sDeliveryQueueName, bool bResetLastRunTime, string sCallerID) {
            this.Invoke("EnableDeliveryQueue", new object[] {
                        sDeliveryQueueName,
                        bResetLastRunTime,
                        sCallerID});
        }
        
        /// <remarks/>
        public void EnableDeliveryQueueAsync(string sDeliveryQueueName, bool bResetLastRunTime, string sCallerID) {
            this.EnableDeliveryQueueAsync(sDeliveryQueueName, bResetLastRunTime, sCallerID, null);
        }
        
        /// <remarks/>
        public void EnableDeliveryQueueAsync(string sDeliveryQueueName, bool bResetLastRunTime, string sCallerID, object userState) {
            if ((this.EnableDeliveryQueueOperationCompleted == null)) {
                this.EnableDeliveryQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableDeliveryQueueOperationCompleted);
            }
            this.InvokeAsync("EnableDeliveryQueue", new object[] {
                        sDeliveryQueueName,
                        bResetLastRunTime,
                        sCallerID}, this.EnableDeliveryQueueOperationCompleted, userState);
        }
        
        private void OnEnableDeliveryQueueOperationCompleted(object arg) {
            if ((this.EnableDeliveryQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableDeliveryQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DisableDeliveryQueue", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableDeliveryQueue(string sDeliveryQueueName, string sCallerID) {
            this.Invoke("DisableDeliveryQueue", new object[] {
                        sDeliveryQueueName,
                        sCallerID});
        }
        
        /// <remarks/>
        public void DisableDeliveryQueueAsync(string sDeliveryQueueName, string sCallerID) {
            this.DisableDeliveryQueueAsync(sDeliveryQueueName, sCallerID, null);
        }
        
        /// <remarks/>
        public void DisableDeliveryQueueAsync(string sDeliveryQueueName, string sCallerID, object userState) {
            if ((this.DisableDeliveryQueueOperationCompleted == null)) {
                this.DisableDeliveryQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableDeliveryQueueOperationCompleted);
            }
            this.InvokeAsync("DisableDeliveryQueue", new object[] {
                        sDeliveryQueueName,
                        sCallerID}, this.DisableDeliveryQueueOperationCompleted, userState);
        }
        
        private void OnDisableDeliveryQueueOperationCompleted(object arg) {
            if ((this.DisableDeliveryQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableDeliveryQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/FinalizeDocumentOnUserB" +
            "ehalf", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FinalizeDocumentOnUserBehalf(string sDocumentID, string sFinalizeUser, string sCallerID) {
            object[] results = this.Invoke("FinalizeDocumentOnUserBehalf", new object[] {
                        sDocumentID,
                        sFinalizeUser,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FinalizeDocumentOnUserBehalfAsync(string sDocumentID, string sFinalizeUser, string sCallerID) {
            this.FinalizeDocumentOnUserBehalfAsync(sDocumentID, sFinalizeUser, sCallerID, null);
        }
        
        /// <remarks/>
        public void FinalizeDocumentOnUserBehalfAsync(string sDocumentID, string sFinalizeUser, string sCallerID, object userState) {
            if ((this.FinalizeDocumentOnUserBehalfOperationCompleted == null)) {
                this.FinalizeDocumentOnUserBehalfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinalizeDocumentOnUserBehalfOperationCompleted);
            }
            this.InvokeAsync("FinalizeDocumentOnUserBehalf", new object[] {
                        sDocumentID,
                        sFinalizeUser,
                        sCallerID}, this.FinalizeDocumentOnUserBehalfOperationCompleted, userState);
        }
        
        private void OnFinalizeDocumentOnUserBehalfOperationCompleted(object arg) {
            if ((this.FinalizeDocumentOnUserBehalfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinalizeDocumentOnUserBehalfCompleted(this, new FinalizeDocumentOnUserBehalfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/FinalizeDocument", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FinalizeDocument(string sDocumentID, string sCallerID) {
            object[] results = this.Invoke("FinalizeDocument", new object[] {
                        sDocumentID,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FinalizeDocumentAsync(string sDocumentID, string sCallerID) {
            this.FinalizeDocumentAsync(sDocumentID, sCallerID, null);
        }
        
        /// <remarks/>
        public void FinalizeDocumentAsync(string sDocumentID, string sCallerID, object userState) {
            if ((this.FinalizeDocumentOperationCompleted == null)) {
                this.FinalizeDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinalizeDocumentOperationCompleted);
            }
            this.InvokeAsync("FinalizeDocument", new object[] {
                        sDocumentID,
                        sCallerID}, this.FinalizeDocumentOperationCompleted, userState);
        }
        
        private void OnFinalizeDocumentOperationCompleted(object arg) {
            if ((this.FinalizeDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinalizeDocumentCompleted(this, new FinalizeDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/CanDocumentSetBeFinaliz" +
            "ed", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CanDocumentSetBeFinalized(string sDocumentSetID, string sCallerID) {
            object[] results = this.Invoke("CanDocumentSetBeFinalized", new object[] {
                        sDocumentSetID,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanDocumentSetBeFinalizedAsync(string sDocumentSetID, string sCallerID) {
            this.CanDocumentSetBeFinalizedAsync(sDocumentSetID, sCallerID, null);
        }
        
        /// <remarks/>
        public void CanDocumentSetBeFinalizedAsync(string sDocumentSetID, string sCallerID, object userState) {
            if ((this.CanDocumentSetBeFinalizedOperationCompleted == null)) {
                this.CanDocumentSetBeFinalizedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanDocumentSetBeFinalizedOperationCompleted);
            }
            this.InvokeAsync("CanDocumentSetBeFinalized", new object[] {
                        sDocumentSetID,
                        sCallerID}, this.CanDocumentSetBeFinalizedOperationCompleted, userState);
        }
        
        private void OnCanDocumentSetBeFinalizedOperationCompleted(object arg) {
            if ((this.CanDocumentSetBeFinalizedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanDocumentSetBeFinalizedCompleted(this, new CanDocumentSetBeFinalizedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/SetDocumentWorkFlow", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDocumentWorkFlow(string sDocumentID, string sWorkFlowXML, string sCallerID) {
            this.Invoke("SetDocumentWorkFlow", new object[] {
                        sDocumentID,
                        sWorkFlowXML,
                        sCallerID});
        }
        
        /// <remarks/>
        public void SetDocumentWorkFlowAsync(string sDocumentID, string sWorkFlowXML, string sCallerID) {
            this.SetDocumentWorkFlowAsync(sDocumentID, sWorkFlowXML, sCallerID, null);
        }
        
        /// <remarks/>
        public void SetDocumentWorkFlowAsync(string sDocumentID, string sWorkFlowXML, string sCallerID, object userState) {
            if ((this.SetDocumentWorkFlowOperationCompleted == null)) {
                this.SetDocumentWorkFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDocumentWorkFlowOperationCompleted);
            }
            this.InvokeAsync("SetDocumentWorkFlow", new object[] {
                        sDocumentID,
                        sWorkFlowXML,
                        sCallerID}, this.SetDocumentWorkFlowOperationCompleted, userState);
        }
        
        private void OnSetDocumentWorkFlowOperationCompleted(object arg) {
            if ((this.SetDocumentWorkFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDocumentWorkFlowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetDocumentWorkFlow", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentWorkFlow(string sDocumentID, string sCallerID) {
            object[] results = this.Invoke("GetDocumentWorkFlow", new object[] {
                        sDocumentID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentWorkFlowAsync(string sDocumentID, string sCallerID) {
            this.GetDocumentWorkFlowAsync(sDocumentID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetDocumentWorkFlowAsync(string sDocumentID, string sCallerID, object userState) {
            if ((this.GetDocumentWorkFlowOperationCompleted == null)) {
                this.GetDocumentWorkFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentWorkFlowOperationCompleted);
            }
            this.InvokeAsync("GetDocumentWorkFlow", new object[] {
                        sDocumentID,
                        sCallerID}, this.GetDocumentWorkFlowOperationCompleted, userState);
        }
        
        private void OnGetDocumentWorkFlowOperationCompleted(object arg) {
            if ((this.GetDocumentWorkFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentWorkFlowCompleted(this, new GetDocumentWorkFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetTemplateWorkFlow", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTemplateWorkFlow(string sTemplateID, string sCallerID) {
            object[] results = this.Invoke("GetTemplateWorkFlow", new object[] {
                        sTemplateID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplateWorkFlowAsync(string sTemplateID, string sCallerID) {
            this.GetTemplateWorkFlowAsync(sTemplateID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetTemplateWorkFlowAsync(string sTemplateID, string sCallerID, object userState) {
            if ((this.GetTemplateWorkFlowOperationCompleted == null)) {
                this.GetTemplateWorkFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplateWorkFlowOperationCompleted);
            }
            this.InvokeAsync("GetTemplateWorkFlow", new object[] {
                        sTemplateID,
                        sCallerID}, this.GetTemplateWorkFlowOperationCompleted, userState);
        }
        
        private void OnGetTemplateWorkFlowOperationCompleted(object arg) {
            if ((this.GetTemplateWorkFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplateWorkFlowCompleted(this, new GetTemplateWorkFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetSubsiteWorkFlow", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubsiteWorkFlow(string sSubsiteID, string sCallerID) {
            object[] results = this.Invoke("GetSubsiteWorkFlow", new object[] {
                        sSubsiteID,
                        sCallerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubsiteWorkFlowAsync(string sSubsiteID, string sCallerID) {
            this.GetSubsiteWorkFlowAsync(sSubsiteID, sCallerID, null);
        }
        
        /// <remarks/>
        public void GetSubsiteWorkFlowAsync(string sSubsiteID, string sCallerID, object userState) {
            if ((this.GetSubsiteWorkFlowOperationCompleted == null)) {
                this.GetSubsiteWorkFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubsiteWorkFlowOperationCompleted);
            }
            this.InvokeAsync("GetSubsiteWorkFlow", new object[] {
                        sSubsiteID,
                        sCallerID}, this.GetSubsiteWorkFlowOperationCompleted, userState);
        }
        
        private void OnGetSubsiteWorkFlowOperationCompleted(object arg) {
            if ((this.GetSubsiteWorkFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubsiteWorkFlowCompleted(this, new GetSubsiteWorkFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/DocumentApprove", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DocumentApprove(string sDocumentID, int iApprovalType, string sApproverUser, string sComment, string sCallerID) {
            object[] results = this.Invoke("DocumentApprove", new object[] {
                        sDocumentID,
                        iApprovalType,
                        sApproverUser,
                        sComment,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentApproveAsync(string sDocumentID, int iApprovalType, string sApproverUser, string sComment, string sCallerID) {
            this.DocumentApproveAsync(sDocumentID, iApprovalType, sApproverUser, sComment, sCallerID, null);
        }
        
        /// <remarks/>
        public void DocumentApproveAsync(string sDocumentID, int iApprovalType, string sApproverUser, string sComment, string sCallerID, object userState) {
            if ((this.DocumentApproveOperationCompleted == null)) {
                this.DocumentApproveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentApproveOperationCompleted);
            }
            this.InvokeAsync("DocumentApprove", new object[] {
                        sDocumentID,
                        iApprovalType,
                        sApproverUser,
                        sComment,
                        sCallerID}, this.DocumentApproveOperationCompleted, userState);
        }
        
        private void OnDocumentApproveOperationCompleted(object arg) {
            if ((this.DocumentApproveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentApproveCompleted(this, new DocumentApproveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/RecallDocumentApproval", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecallDocumentApproval(string sDocumentID, string sCallerID) {
            object[] results = this.Invoke("RecallDocumentApproval", new object[] {
                        sDocumentID,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecallDocumentApprovalAsync(string sDocumentID, string sCallerID) {
            this.RecallDocumentApprovalAsync(sDocumentID, sCallerID, null);
        }
        
        /// <remarks/>
        public void RecallDocumentApprovalAsync(string sDocumentID, string sCallerID, object userState) {
            if ((this.RecallDocumentApprovalOperationCompleted == null)) {
                this.RecallDocumentApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecallDocumentApprovalOperationCompleted);
            }
            this.InvokeAsync("RecallDocumentApproval", new object[] {
                        sDocumentID,
                        sCallerID}, this.RecallDocumentApprovalOperationCompleted, userState);
        }
        
        private void OnRecallDocumentApprovalOperationCompleted(object arg) {
            if ((this.RecallDocumentApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecallDocumentApprovalCompleted(this, new RecallDocumentApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/SendDocumentForApproval" +
            "", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendDocumentForApproval(string sDocumentID, string sApproverUser, string sCallerID) {
            object[] results = this.Invoke("SendDocumentForApproval", new object[] {
                        sDocumentID,
                        sApproverUser,
                        sCallerID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendDocumentForApprovalAsync(string sDocumentID, string sApproverUser, string sCallerID) {
            this.SendDocumentForApprovalAsync(sDocumentID, sApproverUser, sCallerID, null);
        }
        
        /// <remarks/>
        public void SendDocumentForApprovalAsync(string sDocumentID, string sApproverUser, string sCallerID, object userState) {
            if ((this.SendDocumentForApprovalOperationCompleted == null)) {
                this.SendDocumentForApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDocumentForApprovalOperationCompleted);
            }
            this.InvokeAsync("SendDocumentForApproval", new object[] {
                        sDocumentID,
                        sApproverUser,
                        sCallerID}, this.SendDocumentForApprovalOperationCompleted, userState);
        }
        
        private void OnSendDocumentForApprovalOperationCompleted(object arg) {
            if ((this.SendDocumentForApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDocumentForApprovalCompleted(this, new SendDocumentForApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetCurrentDocumentUsage" +
            "", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentDocumentUsage(string sApiKey) {
            object[] results = this.Invoke("GetCurrentDocumentUsage", new object[] {
                        sApiKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentDocumentUsageAsync(string sApiKey) {
            this.GetCurrentDocumentUsageAsync(sApiKey, null);
        }
        
        /// <remarks/>
        public void GetCurrentDocumentUsageAsync(string sApiKey, object userState) {
            if ((this.GetCurrentDocumentUsageOperationCompleted == null)) {
                this.GetCurrentDocumentUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentDocumentUsageOperationCompleted);
            }
            this.InvokeAsync("GetCurrentDocumentUsage", new object[] {
                        sApiKey}, this.GetCurrentDocumentUsageOperationCompleted, userState);
        }
        
        private void OnGetCurrentDocumentUsageOperationCompleted(object arg) {
            if ((this.GetCurrentDocumentUsageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentDocumentUsageCompleted(this, new GetCurrentDocumentUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/GetActiveDocsEventLog", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetActiveDocsEventLog(int iEntryType, System.DateTime startDate, System.DateTime endDate, string sApiKey) {
            object[] results = this.Invoke("GetActiveDocsEventLog", new object[] {
                        iEntryType,
                        startDate,
                        endDate,
                        sApiKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveDocsEventLogAsync(int iEntryType, System.DateTime startDate, System.DateTime endDate, string sApiKey) {
            this.GetActiveDocsEventLogAsync(iEntryType, startDate, endDate, sApiKey, null);
        }
        
        /// <remarks/>
        public void GetActiveDocsEventLogAsync(int iEntryType, System.DateTime startDate, System.DateTime endDate, string sApiKey, object userState) {
            if ((this.GetActiveDocsEventLogOperationCompleted == null)) {
                this.GetActiveDocsEventLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveDocsEventLogOperationCompleted);
            }
            this.InvokeAsync("GetActiveDocsEventLog", new object[] {
                        iEntryType,
                        startDate,
                        endDate,
                        sApiKey}, this.GetActiveDocsEventLogOperationCompleted, userState);
        }
        
        private void OnGetActiveDocsEventLogOperationCompleted(object arg) {
            if ((this.GetActiveDocsEventLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveDocsEventLogCompleted(this, new GetActiveDocsEventLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/CheckHealth", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckHealth(int iCommand, string sApiKey, string sTemplateID, string sSubSite) {
            object[] results = this.Invoke("CheckHealth", new object[] {
                        iCommand,
                        sApiKey,
                        sTemplateID,
                        sSubSite});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckHealthAsync(int iCommand, string sApiKey, string sTemplateID, string sSubSite) {
            this.CheckHealthAsync(iCommand, sApiKey, sTemplateID, sSubSite, null);
        }
        
        /// <remarks/>
        public void CheckHealthAsync(int iCommand, string sApiKey, string sTemplateID, string sSubSite, object userState) {
            if ((this.CheckHealthOperationCompleted == null)) {
                this.CheckHealthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckHealthOperationCompleted);
            }
            this.InvokeAsync("CheckHealth", new object[] {
                        iCommand,
                        sApiKey,
                        sTemplateID,
                        sSubSite}, this.CheckHealthOperationCompleted, userState);
        }
        
        private void OnCheckHealthOperationCompleted(object arg) {
            if ((this.CheckHealthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckHealthCompleted(this, new CheckHealthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/ProcessDocumentsNow", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcessDocumentsNow(string sCallerID) {
            this.Invoke("ProcessDocumentsNow", new object[] {
                        sCallerID});
        }
        
        /// <remarks/>
        public void ProcessDocumentsNowAsync(string sCallerID) {
            this.ProcessDocumentsNowAsync(sCallerID, null);
        }
        
        /// <remarks/>
        public void ProcessDocumentsNowAsync(string sCallerID, object userState) {
            if ((this.ProcessDocumentsNowOperationCompleted == null)) {
                this.ProcessDocumentsNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessDocumentsNowOperationCompleted);
            }
            this.InvokeAsync("ProcessDocumentsNow", new object[] {
                        sCallerID}, this.ProcessDocumentsNowOperationCompleted, userState);
        }
        
        private void OnProcessDocumentsNowOperationCompleted(object arg) {
            if ((this.ProcessDocumentsNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessDocumentsNowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activedocs.com/webservices/adeDocumentAssembly/SPM_Ping", RequestNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", ResponseNamespace="http://www.activedocs.com/webservices/adeDocumentAssembly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SPM_Ping() {
            object[] results = this.Invoke("SPM_Ping", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SPM_PingAsync() {
            this.SPM_PingAsync(null);
        }
        
        /// <remarks/>
        public void SPM_PingAsync(object userState) {
            if ((this.SPM_PingOperationCompleted == null)) {
                this.SPM_PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPM_PingOperationCompleted);
            }
            this.InvokeAsync("SPM_Ping", new object[0], this.SPM_PingOperationCompleted, userState);
        }
        
        private void OnSPM_PingOperationCompleted(object arg) {
            if ((this.SPM_PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPM_PingCompleted(this, new SPM_PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IsCompleteCompletedEventHandler(object sender, IsCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCompileStatusCompletedEventHandler(object sender, GetCompileStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompileStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompileStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentStatusCompletedEventHandler(object sender, GetDocumentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MarkDocumentForDeleteCompletedEventHandler(object sender, MarkDocumentForDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkDocumentForDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkDocumentForDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteDocumentCompletedEventHandler(object sender, DeleteDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentBytesCompletedEventHandler(object sender, GetDocumentBytesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentBytesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentBytesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetErrorDetailsXMLCompletedEventHandler(object sender, GetErrorDetailsXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetErrorDetailsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetErrorDetailsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void StartJobCompletedEventHandler(object sender, StartJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetJobStatusCompletedEventHandler(object sender, GetJobStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentIDsCompletedEventHandler(object sender, GetDocumentIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetJobProgressCompletedEventHandler(object sender, GetJobProgressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobProgressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobProgressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CancelJobCompletedEventHandler(object sender, CancelJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetAnswerFileCompletedEventHandler(object sender, SetAnswerFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAnswerFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAnswerFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAnswerFileCompletedEventHandler(object sender, GetAnswerFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnswerFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnswerFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAnswerFileAttachmentCompletedEventHandler(object sender, GetAnswerFileAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnswerFileAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnswerFileAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDocumentBytesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FindDocumentsCompletedEventHandler(object sender, FindDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentPropertiesCompletedEventHandler(object sender, GetDocumentPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ConvertDocumentCompletedEventHandler(object sender, ConvertDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeliverDocumentCompletedEventHandler(object sender, DeliverDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliverDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliverDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeliverDocumentPrintQueueCompletedEventHandler(object sender, DeliverDocumentPrintQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliverDocumentPrintQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliverDocumentPrintQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeliverDocumentEmailQueueCompletedEventHandler(object sender, DeliverDocumentEmailQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliverDocumentEmailQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliverDocumentEmailQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDeliveryStatusCompletedEventHandler(object sender, GetDeliveryStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeliveryStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeliveryStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeliverJobPrintQueueCompletedEventHandler(object sender, DeliverJobPrintQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliverJobPrintQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliverJobPrintQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDeliveryProgressCompletedEventHandler(object sender, GetDeliveryProgressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeliveryProgressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeliveryProgressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDeliveryJobProgressCompletedEventHandler(object sender, GetDeliveryJobProgressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeliveryJobProgressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeliveryJobProgressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PurgeDeliveryQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void EnableDeliveryQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DisableDeliveryQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FinalizeDocumentOnUserBehalfCompletedEventHandler(object sender, FinalizeDocumentOnUserBehalfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinalizeDocumentOnUserBehalfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinalizeDocumentOnUserBehalfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FinalizeDocumentCompletedEventHandler(object sender, FinalizeDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinalizeDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinalizeDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CanDocumentSetBeFinalizedCompletedEventHandler(object sender, CanDocumentSetBeFinalizedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanDocumentSetBeFinalizedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanDocumentSetBeFinalizedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDocumentWorkFlowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentWorkFlowCompletedEventHandler(object sender, GetDocumentWorkFlowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentWorkFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentWorkFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTemplateWorkFlowCompletedEventHandler(object sender, GetTemplateWorkFlowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplateWorkFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplateWorkFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSubsiteWorkFlowCompletedEventHandler(object sender, GetSubsiteWorkFlowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubsiteWorkFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubsiteWorkFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DocumentApproveCompletedEventHandler(object sender, DocumentApproveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentApproveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentApproveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RecallDocumentApprovalCompletedEventHandler(object sender, RecallDocumentApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecallDocumentApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecallDocumentApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SendDocumentForApprovalCompletedEventHandler(object sender, SendDocumentForApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendDocumentForApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendDocumentForApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCurrentDocumentUsageCompletedEventHandler(object sender, GetCurrentDocumentUsageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentDocumentUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentDocumentUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetActiveDocsEventLogCompletedEventHandler(object sender, GetActiveDocsEventLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveDocsEventLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveDocsEventLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckHealthCompletedEventHandler(object sender, CheckHealthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckHealthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckHealthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ProcessDocumentsNowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SPM_PingCompletedEventHandler(object sender, SPM_PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPM_PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPM_PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591