//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.LibraryStructureManagerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LibraryStructureManagerSoap", Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LibraryStructureObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Cabinet[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AutoTaggingField[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Folder[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Category[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Drawer[]))]
    public partial class LibraryStructureManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTreeStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchiveTreeStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTreeStructureWithAllCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchiveTreeStructureWithAllCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCabinetStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrawerStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPagedCategoriesForCabinetCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPagedCategoriesForCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoriesForCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLibraryObjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeLibraryObjectsOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLibraryObjectsOwnersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLibraryObjectsOwnersExOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindOrAddCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetFoldersMembershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchFolderGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloneCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloneDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloneCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloneFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBasicUserRolesInScopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRolesForUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRolesForUsersInCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateEligibleMemberObjectsInCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableFolderOwnersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateEffectiveMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveExpandedNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExpandedRootsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderGroupStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrawerStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCabinetStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWholeLibraryStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveCabinetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveDrawerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDrawerWeightOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCategoryWeightOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCabinetWeightOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFolderWeightOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderPathAndLocationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LibraryStructureManager() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_LibraryStructureManagerService_LibraryStructureManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTreeStructureCompletedEventHandler GetTreeStructureCompleted;
        
        /// <remarks/>
        public event GetArchiveTreeStructureCompletedEventHandler GetArchiveTreeStructureCompleted;
        
        /// <remarks/>
        public event GetTreeStructureWithAllCategoriesCompletedEventHandler GetTreeStructureWithAllCategoriesCompleted;
        
        /// <remarks/>
        public event GetArchiveTreeStructureWithAllCategoriesCompletedEventHandler GetArchiveTreeStructureWithAllCategoriesCompleted;
        
        /// <remarks/>
        public event GetCabinetStructureCompletedEventHandler GetCabinetStructureCompleted;
        
        /// <remarks/>
        public event GetDrawerStructureCompletedEventHandler GetDrawerStructureCompleted;
        
        /// <remarks/>
        public event GetCategoryStructureCompletedEventHandler GetCategoryStructureCompleted;
        
        /// <remarks/>
        public event GetFolderStructureCompletedEventHandler GetFolderStructureCompleted;
        
        /// <remarks/>
        public event GetPagedCategoriesForCabinetCountCompletedEventHandler GetPagedCategoriesForCabinetCountCompleted;
        
        /// <remarks/>
        public event GetPagedCategoriesForCabinetCompletedEventHandler GetPagedCategoriesForCabinetCompleted;
        
        /// <remarks/>
        public event GetCategoriesForCabinetCompletedEventHandler GetCategoriesForCabinetCompleted;
        
        /// <remarks/>
        public event GetUserLibraryObjectsCompletedEventHandler GetUserLibraryObjectsCompleted;
        
        /// <remarks/>
        public event ChangeLibraryObjectsOwnerCompletedEventHandler ChangeLibraryObjectsOwnerCompleted;
        
        /// <remarks/>
        public event GetLibraryObjectsOwnersCompletedEventHandler GetLibraryObjectsOwnersCompleted;
        
        /// <remarks/>
        public event GetLibraryObjectsOwnersExCompletedEventHandler GetLibraryObjectsOwnersExCompleted;
        
        /// <remarks/>
        public event AddCabinetCompletedEventHandler AddCabinetCompleted;
        
        /// <remarks/>
        public event AddDrawerCompletedEventHandler AddDrawerCompleted;
        
        /// <remarks/>
        public event AddCategoryCompletedEventHandler AddCategoryCompleted;
        
        /// <remarks/>
        public event FindOrAddCategoryCompletedEventHandler FindOrAddCategoryCompleted;
        
        /// <remarks/>
        public event AddFolderCompletedEventHandler AddFolderCompleted;
        
        /// <remarks/>
        public event RemoveCabinetCompletedEventHandler RemoveCabinetCompleted;
        
        /// <remarks/>
        public event RemoveCategoryCompletedEventHandler RemoveCategoryCompleted;
        
        /// <remarks/>
        public event RemoveDrawerCompletedEventHandler RemoveDrawerCompleted;
        
        /// <remarks/>
        public event RemoveFolderCompletedEventHandler RemoveFolderCompleted;
        
        /// <remarks/>
        public event ResetFoldersMembershipCompletedEventHandler ResetFoldersMembershipCompleted;
        
        /// <remarks/>
        public event UpdateFolderCompletedEventHandler UpdateFolderCompleted;
        
        /// <remarks/>
        public event UpdateCategoryCompletedEventHandler UpdateCategoryCompleted;
        
        /// <remarks/>
        public event UpdateDrawerCompletedEventHandler UpdateDrawerCompleted;
        
        /// <remarks/>
        public event UpdateCabinetCompletedEventHandler UpdateCabinetCompleted;
        
        /// <remarks/>
        public event MoveDrawerCompletedEventHandler MoveDrawerCompleted;
        
        /// <remarks/>
        public event MoveCategoryCompletedEventHandler MoveCategoryCompleted;
        
        /// <remarks/>
        public event MoveFolderCompletedEventHandler MoveFolderCompleted;
        
        /// <remarks/>
        public event SwitchFolderGroupsCompletedEventHandler SwitchFolderGroupsCompleted;
        
        /// <remarks/>
        public event CloneCabinetCompletedEventHandler CloneCabinetCompleted;
        
        /// <remarks/>
        public event CloneDrawerCompletedEventHandler CloneDrawerCompleted;
        
        /// <remarks/>
        public event CloneCategoryCompletedEventHandler CloneCategoryCompleted;
        
        /// <remarks/>
        public event CloneFolderCompletedEventHandler CloneFolderCompleted;
        
        /// <remarks/>
        public event CopyCabinetCompletedEventHandler CopyCabinetCompleted;
        
        /// <remarks/>
        public event CopyDrawerCompletedEventHandler CopyDrawerCompleted;
        
        /// <remarks/>
        public event CopyCategoryCompletedEventHandler CopyCategoryCompleted;
        
        /// <remarks/>
        public event CopyFolderCompletedEventHandler CopyFolderCompleted;
        
        /// <remarks/>
        public event GetBasicUserRolesInScopeCompletedEventHandler GetBasicUserRolesInScopeCompleted;
        
        /// <remarks/>
        public event GetAvailableRolesForUsersCompletedEventHandler GetAvailableRolesForUsersCompleted;
        
        /// <remarks/>
        public event GetAvailableRolesForUsersInCabinetCompletedEventHandler GetAvailableRolesForUsersInCabinetCompleted;
        
        /// <remarks/>
        public event CalculateEligibleMemberObjectsInCabinetCompletedEventHandler CalculateEligibleMemberObjectsInCabinetCompleted;
        
        /// <remarks/>
        public event GetAvailableFolderOwnersCompletedEventHandler GetAvailableFolderOwnersCompleted;
        
        /// <remarks/>
        public event CalculateEffectiveMembersCompletedEventHandler CalculateEffectiveMembersCompleted;
        
        /// <remarks/>
        public event SaveExpandedNodesCompletedEventHandler SaveExpandedNodesCompleted;
        
        /// <remarks/>
        public event GetExpandedRootsCompletedEventHandler GetExpandedRootsCompleted;
        
        /// <remarks/>
        public event GetFolderStatisticsCompletedEventHandler GetFolderStatisticsCompleted;
        
        /// <remarks/>
        public event GetFolderGroupStatisticsCompletedEventHandler GetFolderGroupStatisticsCompleted;
        
        /// <remarks/>
        public event GetDrawerStatisticsCompletedEventHandler GetDrawerStatisticsCompleted;
        
        /// <remarks/>
        public event GetCabinetStatisticsCompletedEventHandler GetCabinetStatisticsCompleted;
        
        /// <remarks/>
        public event GetWholeLibraryStatisticsCompletedEventHandler GetWholeLibraryStatisticsCompleted;
        
        /// <remarks/>
        public event ArchiveCabinetCompletedEventHandler ArchiveCabinetCompleted;
        
        /// <remarks/>
        public event ArchiveDrawerCompletedEventHandler ArchiveDrawerCompleted;
        
        /// <remarks/>
        public event ArchiveCategoryCompletedEventHandler ArchiveCategoryCompleted;
        
        /// <remarks/>
        public event ArchiveFolderCompletedEventHandler ArchiveFolderCompleted;
        
        /// <remarks/>
        public event SetDrawerWeightCompletedEventHandler SetDrawerWeightCompleted;
        
        /// <remarks/>
        public event SetCategoryWeightCompletedEventHandler SetCategoryWeightCompleted;
        
        /// <remarks/>
        public event SetCabinetWeightCompletedEventHandler SetCabinetWeightCompleted;
        
        /// <remarks/>
        public event SetFolderWeightCompletedEventHandler SetFolderWeightCompleted;
        
        /// <remarks/>
        public event GetFolderPathAndLocationCompletedEventHandler GetFolderPathAndLocationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetTreeStructure", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Cabinet[] GetTreeStructure() {
            object[] results = this.Invoke("GetTreeStructure", new object[0]);
            return ((Cabinet[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTreeStructureAsync() {
            this.GetTreeStructureAsync(null);
        }
        
        /// <remarks/>
        public void GetTreeStructureAsync(object userState) {
            if ((this.GetTreeStructureOperationCompleted == null)) {
                this.GetTreeStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTreeStructureOperationCompleted);
            }
            this.InvokeAsync("GetTreeStructure", new object[0], this.GetTreeStructureOperationCompleted, userState);
        }
        
        private void OnGetTreeStructureOperationCompleted(object arg) {
            if ((this.GetTreeStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTreeStructureCompleted(this, new GetTreeStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetArchiveTreeStructur" +
            "e", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Cabinet[] GetArchiveTreeStructure() {
            object[] results = this.Invoke("GetArchiveTreeStructure", new object[0]);
            return ((Cabinet[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArchiveTreeStructureAsync() {
            this.GetArchiveTreeStructureAsync(null);
        }
        
        /// <remarks/>
        public void GetArchiveTreeStructureAsync(object userState) {
            if ((this.GetArchiveTreeStructureOperationCompleted == null)) {
                this.GetArchiveTreeStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchiveTreeStructureOperationCompleted);
            }
            this.InvokeAsync("GetArchiveTreeStructure", new object[0], this.GetArchiveTreeStructureOperationCompleted, userState);
        }
        
        private void OnGetArchiveTreeStructureOperationCompleted(object arg) {
            if ((this.GetArchiveTreeStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchiveTreeStructureCompleted(this, new GetArchiveTreeStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetTreeStructureWithAl" +
            "lCategories", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Cabinet[] GetTreeStructureWithAllCategories() {
            object[] results = this.Invoke("GetTreeStructureWithAllCategories", new object[0]);
            return ((Cabinet[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTreeStructureWithAllCategoriesAsync() {
            this.GetTreeStructureWithAllCategoriesAsync(null);
        }
        
        /// <remarks/>
        public void GetTreeStructureWithAllCategoriesAsync(object userState) {
            if ((this.GetTreeStructureWithAllCategoriesOperationCompleted == null)) {
                this.GetTreeStructureWithAllCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTreeStructureWithAllCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetTreeStructureWithAllCategories", new object[0], this.GetTreeStructureWithAllCategoriesOperationCompleted, userState);
        }
        
        private void OnGetTreeStructureWithAllCategoriesOperationCompleted(object arg) {
            if ((this.GetTreeStructureWithAllCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTreeStructureWithAllCategoriesCompleted(this, new GetTreeStructureWithAllCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetArchiveTreeStructur" +
            "eWithAllCategories", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Cabinet[] GetArchiveTreeStructureWithAllCategories() {
            object[] results = this.Invoke("GetArchiveTreeStructureWithAllCategories", new object[0]);
            return ((Cabinet[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArchiveTreeStructureWithAllCategoriesAsync() {
            this.GetArchiveTreeStructureWithAllCategoriesAsync(null);
        }
        
        /// <remarks/>
        public void GetArchiveTreeStructureWithAllCategoriesAsync(object userState) {
            if ((this.GetArchiveTreeStructureWithAllCategoriesOperationCompleted == null)) {
                this.GetArchiveTreeStructureWithAllCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchiveTreeStructureWithAllCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetArchiveTreeStructureWithAllCategories", new object[0], this.GetArchiveTreeStructureWithAllCategoriesOperationCompleted, userState);
        }
        
        private void OnGetArchiveTreeStructureWithAllCategoriesOperationCompleted(object arg) {
            if ((this.GetArchiveTreeStructureWithAllCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchiveTreeStructureWithAllCategoriesCompleted(this, new GetArchiveTreeStructureWithAllCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetCabinetStructure", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Cabinet GetCabinetStructure(int cabinetId) {
            object[] results = this.Invoke("GetCabinetStructure", new object[] {
                        cabinetId});
            return ((Cabinet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCabinetStructureAsync(int cabinetId) {
            this.GetCabinetStructureAsync(cabinetId, null);
        }
        
        /// <remarks/>
        public void GetCabinetStructureAsync(int cabinetId, object userState) {
            if ((this.GetCabinetStructureOperationCompleted == null)) {
                this.GetCabinetStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCabinetStructureOperationCompleted);
            }
            this.InvokeAsync("GetCabinetStructure", new object[] {
                        cabinetId}, this.GetCabinetStructureOperationCompleted, userState);
        }
        
        private void OnGetCabinetStructureOperationCompleted(object arg) {
            if ((this.GetCabinetStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCabinetStructureCompleted(this, new GetCabinetStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetDrawerStructure", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Drawer GetDrawerStructure(int drawerId) {
            object[] results = this.Invoke("GetDrawerStructure", new object[] {
                        drawerId});
            return ((Drawer)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrawerStructureAsync(int drawerId) {
            this.GetDrawerStructureAsync(drawerId, null);
        }
        
        /// <remarks/>
        public void GetDrawerStructureAsync(int drawerId, object userState) {
            if ((this.GetDrawerStructureOperationCompleted == null)) {
                this.GetDrawerStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrawerStructureOperationCompleted);
            }
            this.InvokeAsync("GetDrawerStructure", new object[] {
                        drawerId}, this.GetDrawerStructureOperationCompleted, userState);
        }
        
        private void OnGetDrawerStructureOperationCompleted(object arg) {
            if ((this.GetDrawerStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrawerStructureCompleted(this, new GetDrawerStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetCategoryStructure", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Category GetCategoryStructure(int drawerId, int categoryId) {
            object[] results = this.Invoke("GetCategoryStructure", new object[] {
                        drawerId,
                        categoryId});
            return ((Category)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryStructureAsync(int drawerId, int categoryId) {
            this.GetCategoryStructureAsync(drawerId, categoryId, null);
        }
        
        /// <remarks/>
        public void GetCategoryStructureAsync(int drawerId, int categoryId, object userState) {
            if ((this.GetCategoryStructureOperationCompleted == null)) {
                this.GetCategoryStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryStructureOperationCompleted);
            }
            this.InvokeAsync("GetCategoryStructure", new object[] {
                        drawerId,
                        categoryId}, this.GetCategoryStructureOperationCompleted, userState);
        }
        
        private void OnGetCategoryStructureOperationCompleted(object arg) {
            if ((this.GetCategoryStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryStructureCompleted(this, new GetCategoryStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetFolderStructure", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Folder GetFolderStructure(int folderId) {
            object[] results = this.Invoke("GetFolderStructure", new object[] {
                        folderId});
            return ((Folder)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderStructureAsync(int folderId) {
            this.GetFolderStructureAsync(folderId, null);
        }
        
        /// <remarks/>
        public void GetFolderStructureAsync(int folderId, object userState) {
            if ((this.GetFolderStructureOperationCompleted == null)) {
                this.GetFolderStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderStructureOperationCompleted);
            }
            this.InvokeAsync("GetFolderStructure", new object[] {
                        folderId}, this.GetFolderStructureOperationCompleted, userState);
        }
        
        private void OnGetFolderStructureOperationCompleted(object arg) {
            if ((this.GetFolderStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderStructureCompleted(this, new GetFolderStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetPagedCategoriesForC" +
            "abinetCount", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetPagedCategoriesForCabinetCount(int cabinetId, int maximumRows, int startRowIndex, string SortExpression) {
            object[] results = this.Invoke("GetPagedCategoriesForCabinetCount", new object[] {
                        cabinetId,
                        maximumRows,
                        startRowIndex,
                        SortExpression});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPagedCategoriesForCabinetCountAsync(int cabinetId, int maximumRows, int startRowIndex, string SortExpression) {
            this.GetPagedCategoriesForCabinetCountAsync(cabinetId, maximumRows, startRowIndex, SortExpression, null);
        }
        
        /// <remarks/>
        public void GetPagedCategoriesForCabinetCountAsync(int cabinetId, int maximumRows, int startRowIndex, string SortExpression, object userState) {
            if ((this.GetPagedCategoriesForCabinetCountOperationCompleted == null)) {
                this.GetPagedCategoriesForCabinetCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPagedCategoriesForCabinetCountOperationCompleted);
            }
            this.InvokeAsync("GetPagedCategoriesForCabinetCount", new object[] {
                        cabinetId,
                        maximumRows,
                        startRowIndex,
                        SortExpression}, this.GetPagedCategoriesForCabinetCountOperationCompleted, userState);
        }
        
        private void OnGetPagedCategoriesForCabinetCountOperationCompleted(object arg) {
            if ((this.GetPagedCategoriesForCabinetCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPagedCategoriesForCabinetCountCompleted(this, new GetPagedCategoriesForCabinetCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetPagedCategoriesForC" +
            "abinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Category[] GetPagedCategoriesForCabinet(int cabinetId, int maximumRows, int startRowIndex, string SortExpression) {
            object[] results = this.Invoke("GetPagedCategoriesForCabinet", new object[] {
                        cabinetId,
                        maximumRows,
                        startRowIndex,
                        SortExpression});
            return ((Category[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPagedCategoriesForCabinetAsync(int cabinetId, int maximumRows, int startRowIndex, string SortExpression) {
            this.GetPagedCategoriesForCabinetAsync(cabinetId, maximumRows, startRowIndex, SortExpression, null);
        }
        
        /// <remarks/>
        public void GetPagedCategoriesForCabinetAsync(int cabinetId, int maximumRows, int startRowIndex, string SortExpression, object userState) {
            if ((this.GetPagedCategoriesForCabinetOperationCompleted == null)) {
                this.GetPagedCategoriesForCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPagedCategoriesForCabinetOperationCompleted);
            }
            this.InvokeAsync("GetPagedCategoriesForCabinet", new object[] {
                        cabinetId,
                        maximumRows,
                        startRowIndex,
                        SortExpression}, this.GetPagedCategoriesForCabinetOperationCompleted, userState);
        }
        
        private void OnGetPagedCategoriesForCabinetOperationCompleted(object arg) {
            if ((this.GetPagedCategoriesForCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPagedCategoriesForCabinetCompleted(this, new GetPagedCategoriesForCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetCategoriesForCabine" +
            "t", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Category[] GetCategoriesForCabinet(int cabinetId) {
            object[] results = this.Invoke("GetCategoriesForCabinet", new object[] {
                        cabinetId});
            return ((Category[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoriesForCabinetAsync(int cabinetId) {
            this.GetCategoriesForCabinetAsync(cabinetId, null);
        }
        
        /// <remarks/>
        public void GetCategoriesForCabinetAsync(int cabinetId, object userState) {
            if ((this.GetCategoriesForCabinetOperationCompleted == null)) {
                this.GetCategoriesForCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoriesForCabinetOperationCompleted);
            }
            this.InvokeAsync("GetCategoriesForCabinet", new object[] {
                        cabinetId}, this.GetCategoriesForCabinetOperationCompleted, userState);
        }
        
        private void OnGetCategoriesForCabinetOperationCompleted(object arg) {
            if ((this.GetCategoriesForCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoriesForCabinetCompleted(this, new GetCategoriesForCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetUserLibraryObjects", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LibraryObjectInfo[] GetUserLibraryObjects(System.Guid[] userGuidIds) {
            object[] results = this.Invoke("GetUserLibraryObjects", new object[] {
                        userGuidIds});
            return ((LibraryObjectInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLibraryObjectsAsync(System.Guid[] userGuidIds) {
            this.GetUserLibraryObjectsAsync(userGuidIds, null);
        }
        
        /// <remarks/>
        public void GetUserLibraryObjectsAsync(System.Guid[] userGuidIds, object userState) {
            if ((this.GetUserLibraryObjectsOperationCompleted == null)) {
                this.GetUserLibraryObjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLibraryObjectsOperationCompleted);
            }
            this.InvokeAsync("GetUserLibraryObjects", new object[] {
                        userGuidIds}, this.GetUserLibraryObjectsOperationCompleted, userState);
        }
        
        private void OnGetUserLibraryObjectsOperationCompleted(object arg) {
            if ((this.GetUserLibraryObjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLibraryObjectsCompleted(this, new GetUserLibraryObjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/ChangeLibraryObjectsOw" +
            "ner", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeLibraryObjectsOwner(System.Guid newOwner, LibraryObjectInfo[] libObjects) {
            this.Invoke("ChangeLibraryObjectsOwner", new object[] {
                        newOwner,
                        libObjects});
        }
        
        /// <remarks/>
        public void ChangeLibraryObjectsOwnerAsync(System.Guid newOwner, LibraryObjectInfo[] libObjects) {
            this.ChangeLibraryObjectsOwnerAsync(newOwner, libObjects, null);
        }
        
        /// <remarks/>
        public void ChangeLibraryObjectsOwnerAsync(System.Guid newOwner, LibraryObjectInfo[] libObjects, object userState) {
            if ((this.ChangeLibraryObjectsOwnerOperationCompleted == null)) {
                this.ChangeLibraryObjectsOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeLibraryObjectsOwnerOperationCompleted);
            }
            this.InvokeAsync("ChangeLibraryObjectsOwner", new object[] {
                        newOwner,
                        libObjects}, this.ChangeLibraryObjectsOwnerOperationCompleted, userState);
        }
        
        private void OnChangeLibraryObjectsOwnerOperationCompleted(object arg) {
            if ((this.ChangeLibraryObjectsOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeLibraryObjectsOwnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetLibraryObjectsOwner" +
            "s", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ADAMObject[] GetLibraryObjectsOwners(SearchUsersCriteria criteria) {
            object[] results = this.Invoke("GetLibraryObjectsOwners", new object[] {
                        criteria});
            return ((ADAMObject[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLibraryObjectsOwnersAsync(SearchUsersCriteria criteria) {
            this.GetLibraryObjectsOwnersAsync(criteria, null);
        }
        
        /// <remarks/>
        public void GetLibraryObjectsOwnersAsync(SearchUsersCriteria criteria, object userState) {
            if ((this.GetLibraryObjectsOwnersOperationCompleted == null)) {
                this.GetLibraryObjectsOwnersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLibraryObjectsOwnersOperationCompleted);
            }
            this.InvokeAsync("GetLibraryObjectsOwners", new object[] {
                        criteria}, this.GetLibraryObjectsOwnersOperationCompleted, userState);
        }
        
        private void OnGetLibraryObjectsOwnersOperationCompleted(object arg) {
            if ((this.GetLibraryObjectsOwnersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLibraryObjectsOwnersCompleted(this, new GetLibraryObjectsOwnersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetLibraryObjectsOwner" +
            "sEx", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ADAMOwner[] GetLibraryObjectsOwnersEx(SearchUsersCriteria criteria) {
            object[] results = this.Invoke("GetLibraryObjectsOwnersEx", new object[] {
                        criteria});
            return ((ADAMOwner[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLibraryObjectsOwnersExAsync(SearchUsersCriteria criteria) {
            this.GetLibraryObjectsOwnersExAsync(criteria, null);
        }
        
        /// <remarks/>
        public void GetLibraryObjectsOwnersExAsync(SearchUsersCriteria criteria, object userState) {
            if ((this.GetLibraryObjectsOwnersExOperationCompleted == null)) {
                this.GetLibraryObjectsOwnersExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLibraryObjectsOwnersExOperationCompleted);
            }
            this.InvokeAsync("GetLibraryObjectsOwnersEx", new object[] {
                        criteria}, this.GetLibraryObjectsOwnersExOperationCompleted, userState);
        }
        
        private void OnGetLibraryObjectsOwnersExOperationCompleted(object arg) {
            if ((this.GetLibraryObjectsOwnersExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLibraryObjectsOwnersExCompleted(this, new GetLibraryObjectsOwnersExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/AddCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCabinet(bool isArchive, Cabinet newCabinet) {
            object[] results = this.Invoke("AddCabinet", new object[] {
                        isArchive,
                        newCabinet});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCabinetAsync(bool isArchive, Cabinet newCabinet) {
            this.AddCabinetAsync(isArchive, newCabinet, null);
        }
        
        /// <remarks/>
        public void AddCabinetAsync(bool isArchive, Cabinet newCabinet, object userState) {
            if ((this.AddCabinetOperationCompleted == null)) {
                this.AddCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCabinetOperationCompleted);
            }
            this.InvokeAsync("AddCabinet", new object[] {
                        isArchive,
                        newCabinet}, this.AddCabinetOperationCompleted, userState);
        }
        
        private void OnAddCabinetOperationCompleted(object arg) {
            if ((this.AddCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCabinetCompleted(this, new AddCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/AddDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDrawer(int cabinetId, Drawer newDrawer) {
            object[] results = this.Invoke("AddDrawer", new object[] {
                        cabinetId,
                        newDrawer});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDrawerAsync(int cabinetId, Drawer newDrawer) {
            this.AddDrawerAsync(cabinetId, newDrawer, null);
        }
        
        /// <remarks/>
        public void AddDrawerAsync(int cabinetId, Drawer newDrawer, object userState) {
            if ((this.AddDrawerOperationCompleted == null)) {
                this.AddDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDrawerOperationCompleted);
            }
            this.InvokeAsync("AddDrawer", new object[] {
                        cabinetId,
                        newDrawer}, this.AddDrawerOperationCompleted, userState);
        }
        
        private void OnAddDrawerOperationCompleted(object arg) {
            if ((this.AddDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDrawerCompleted(this, new AddDrawerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/AddCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCategory(int cabinetId, string categoryName) {
            object[] results = this.Invoke("AddCategory", new object[] {
                        cabinetId,
                        categoryName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCategoryAsync(int cabinetId, string categoryName) {
            this.AddCategoryAsync(cabinetId, categoryName, null);
        }
        
        /// <remarks/>
        public void AddCategoryAsync(int cabinetId, string categoryName, object userState) {
            if ((this.AddCategoryOperationCompleted == null)) {
                this.AddCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCategoryOperationCompleted);
            }
            this.InvokeAsync("AddCategory", new object[] {
                        cabinetId,
                        categoryName}, this.AddCategoryOperationCompleted, userState);
        }
        
        private void OnAddCategoryOperationCompleted(object arg) {
            if ((this.AddCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCategoryCompleted(this, new AddCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/FindOrAddCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int FindOrAddCategory(int cabinetId, string categoryName) {
            object[] results = this.Invoke("FindOrAddCategory", new object[] {
                        cabinetId,
                        categoryName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FindOrAddCategoryAsync(int cabinetId, string categoryName) {
            this.FindOrAddCategoryAsync(cabinetId, categoryName, null);
        }
        
        /// <remarks/>
        public void FindOrAddCategoryAsync(int cabinetId, string categoryName, object userState) {
            if ((this.FindOrAddCategoryOperationCompleted == null)) {
                this.FindOrAddCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindOrAddCategoryOperationCompleted);
            }
            this.InvokeAsync("FindOrAddCategory", new object[] {
                        cabinetId,
                        categoryName}, this.FindOrAddCategoryOperationCompleted, userState);
        }
        
        private void OnFindOrAddCategoryOperationCompleted(object arg) {
            if ((this.FindOrAddCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindOrAddCategoryCompleted(this, new FindOrAddCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/AddFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddFolder(int drawerId, Folder newFolder) {
            object[] results = this.Invoke("AddFolder", new object[] {
                        drawerId,
                        newFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolderAsync(int drawerId, Folder newFolder) {
            this.AddFolderAsync(drawerId, newFolder, null);
        }
        
        /// <remarks/>
        public void AddFolderAsync(int drawerId, Folder newFolder, object userState) {
            if ((this.AddFolderOperationCompleted == null)) {
                this.AddFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderOperationCompleted);
            }
            this.InvokeAsync("AddFolder", new object[] {
                        drawerId,
                        newFolder}, this.AddFolderOperationCompleted, userState);
        }
        
        private void OnAddFolderOperationCompleted(object arg) {
            if ((this.AddFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderCompleted(this, new AddFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/RemoveCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCabinet(int cabinetId, bool forceContentRemoval) {
            this.Invoke("RemoveCabinet", new object[] {
                        cabinetId,
                        forceContentRemoval});
        }
        
        /// <remarks/>
        public void RemoveCabinetAsync(int cabinetId, bool forceContentRemoval) {
            this.RemoveCabinetAsync(cabinetId, forceContentRemoval, null);
        }
        
        /// <remarks/>
        public void RemoveCabinetAsync(int cabinetId, bool forceContentRemoval, object userState) {
            if ((this.RemoveCabinetOperationCompleted == null)) {
                this.RemoveCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCabinetOperationCompleted);
            }
            this.InvokeAsync("RemoveCabinet", new object[] {
                        cabinetId,
                        forceContentRemoval}, this.RemoveCabinetOperationCompleted, userState);
        }
        
        private void OnRemoveCabinetOperationCompleted(object arg) {
            if ((this.RemoveCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCabinetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/RemoveCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCategory(int categoryId, int drawerId, bool forceContentRemoval) {
            this.Invoke("RemoveCategory", new object[] {
                        categoryId,
                        drawerId,
                        forceContentRemoval});
        }
        
        /// <remarks/>
        public void RemoveCategoryAsync(int categoryId, int drawerId, bool forceContentRemoval) {
            this.RemoveCategoryAsync(categoryId, drawerId, forceContentRemoval, null);
        }
        
        /// <remarks/>
        public void RemoveCategoryAsync(int categoryId, int drawerId, bool forceContentRemoval, object userState) {
            if ((this.RemoveCategoryOperationCompleted == null)) {
                this.RemoveCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCategoryOperationCompleted);
            }
            this.InvokeAsync("RemoveCategory", new object[] {
                        categoryId,
                        drawerId,
                        forceContentRemoval}, this.RemoveCategoryOperationCompleted, userState);
        }
        
        private void OnRemoveCategoryOperationCompleted(object arg) {
            if ((this.RemoveCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/RemoveDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveDrawer(int drawerId, bool forceContentRemoval) {
            this.Invoke("RemoveDrawer", new object[] {
                        drawerId,
                        forceContentRemoval});
        }
        
        /// <remarks/>
        public void RemoveDrawerAsync(int drawerId, bool forceContentRemoval) {
            this.RemoveDrawerAsync(drawerId, forceContentRemoval, null);
        }
        
        /// <remarks/>
        public void RemoveDrawerAsync(int drawerId, bool forceContentRemoval, object userState) {
            if ((this.RemoveDrawerOperationCompleted == null)) {
                this.RemoveDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDrawerOperationCompleted);
            }
            this.InvokeAsync("RemoveDrawer", new object[] {
                        drawerId,
                        forceContentRemoval}, this.RemoveDrawerOperationCompleted, userState);
        }
        
        private void OnRemoveDrawerOperationCompleted(object arg) {
            if ((this.RemoveDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDrawerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/RemoveFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveFolder(int folderId, bool forceContentRemoval) {
            this.Invoke("RemoveFolder", new object[] {
                        folderId,
                        forceContentRemoval});
        }
        
        /// <remarks/>
        public void RemoveFolderAsync(int folderId, bool forceContentRemoval) {
            this.RemoveFolderAsync(folderId, forceContentRemoval, null);
        }
        
        /// <remarks/>
        public void RemoveFolderAsync(int folderId, bool forceContentRemoval, object userState) {
            if ((this.RemoveFolderOperationCompleted == null)) {
                this.RemoveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFolderOperationCompleted);
            }
            this.InvokeAsync("RemoveFolder", new object[] {
                        folderId,
                        forceContentRemoval}, this.RemoveFolderOperationCompleted, userState);
        }
        
        private void OnRemoveFolderOperationCompleted(object arg) {
            if ((this.RemoveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/ResetFoldersMembership" +
            "", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetFoldersMembership(int cabinetId, bool inheritSecurityPermissons) {
            this.Invoke("ResetFoldersMembership", new object[] {
                        cabinetId,
                        inheritSecurityPermissons});
        }
        
        /// <remarks/>
        public void ResetFoldersMembershipAsync(int cabinetId, bool inheritSecurityPermissons) {
            this.ResetFoldersMembershipAsync(cabinetId, inheritSecurityPermissons, null);
        }
        
        /// <remarks/>
        public void ResetFoldersMembershipAsync(int cabinetId, bool inheritSecurityPermissons, object userState) {
            if ((this.ResetFoldersMembershipOperationCompleted == null)) {
                this.ResetFoldersMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetFoldersMembershipOperationCompleted);
            }
            this.InvokeAsync("ResetFoldersMembership", new object[] {
                        cabinetId,
                        inheritSecurityPermissons}, this.ResetFoldersMembershipOperationCompleted, userState);
        }
        
        private void OnResetFoldersMembershipOperationCompleted(object arg) {
            if ((this.ResetFoldersMembershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetFoldersMembershipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/UpdateFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFolder(Folder changedFolder) {
            this.Invoke("UpdateFolder", new object[] {
                        changedFolder});
        }
        
        /// <remarks/>
        public void UpdateFolderAsync(Folder changedFolder) {
            this.UpdateFolderAsync(changedFolder, null);
        }
        
        /// <remarks/>
        public void UpdateFolderAsync(Folder changedFolder, object userState) {
            if ((this.UpdateFolderOperationCompleted == null)) {
                this.UpdateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateFolder", new object[] {
                        changedFolder}, this.UpdateFolderOperationCompleted, userState);
        }
        
        private void OnUpdateFolderOperationCompleted(object arg) {
            if ((this.UpdateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/UpdateCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCategory(Category changedCategory) {
            this.Invoke("UpdateCategory", new object[] {
                        changedCategory});
        }
        
        /// <remarks/>
        public void UpdateCategoryAsync(Category changedCategory) {
            this.UpdateCategoryAsync(changedCategory, null);
        }
        
        /// <remarks/>
        public void UpdateCategoryAsync(Category changedCategory, object userState) {
            if ((this.UpdateCategoryOperationCompleted == null)) {
                this.UpdateCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCategoryOperationCompleted);
            }
            this.InvokeAsync("UpdateCategory", new object[] {
                        changedCategory}, this.UpdateCategoryOperationCompleted, userState);
        }
        
        private void OnUpdateCategoryOperationCompleted(object arg) {
            if ((this.UpdateCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/UpdateDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDrawer(Drawer changedDrawer) {
            this.Invoke("UpdateDrawer", new object[] {
                        changedDrawer});
        }
        
        /// <remarks/>
        public void UpdateDrawerAsync(Drawer changedDrawer) {
            this.UpdateDrawerAsync(changedDrawer, null);
        }
        
        /// <remarks/>
        public void UpdateDrawerAsync(Drawer changedDrawer, object userState) {
            if ((this.UpdateDrawerOperationCompleted == null)) {
                this.UpdateDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDrawerOperationCompleted);
            }
            this.InvokeAsync("UpdateDrawer", new object[] {
                        changedDrawer}, this.UpdateDrawerOperationCompleted, userState);
        }
        
        private void OnUpdateDrawerOperationCompleted(object arg) {
            if ((this.UpdateDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDrawerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/UpdateCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCabinet(Cabinet changedCabinet) {
            this.Invoke("UpdateCabinet", new object[] {
                        changedCabinet});
        }
        
        /// <remarks/>
        public void UpdateCabinetAsync(Cabinet changedCabinet) {
            this.UpdateCabinetAsync(changedCabinet, null);
        }
        
        /// <remarks/>
        public void UpdateCabinetAsync(Cabinet changedCabinet, object userState) {
            if ((this.UpdateCabinetOperationCompleted == null)) {
                this.UpdateCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCabinetOperationCompleted);
            }
            this.InvokeAsync("UpdateCabinet", new object[] {
                        changedCabinet}, this.UpdateCabinetOperationCompleted, userState);
        }
        
        private void OnUpdateCabinetOperationCompleted(object arg) {
            if ((this.UpdateCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCabinetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/MoveDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveDrawer(int drawerId, int destCabinetId) {
            this.Invoke("MoveDrawer", new object[] {
                        drawerId,
                        destCabinetId});
        }
        
        /// <remarks/>
        public void MoveDrawerAsync(int drawerId, int destCabinetId) {
            this.MoveDrawerAsync(drawerId, destCabinetId, null);
        }
        
        /// <remarks/>
        public void MoveDrawerAsync(int drawerId, int destCabinetId, object userState) {
            if ((this.MoveDrawerOperationCompleted == null)) {
                this.MoveDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveDrawerOperationCompleted);
            }
            this.InvokeAsync("MoveDrawer", new object[] {
                        drawerId,
                        destCabinetId}, this.MoveDrawerOperationCompleted, userState);
        }
        
        private void OnMoveDrawerOperationCompleted(object arg) {
            if ((this.MoveDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveDrawerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/MoveCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveCategory(int drawerId, int categoryId, int destDrawerId) {
            this.Invoke("MoveCategory", new object[] {
                        drawerId,
                        categoryId,
                        destDrawerId});
        }
        
        /// <remarks/>
        public void MoveCategoryAsync(int drawerId, int categoryId, int destDrawerId) {
            this.MoveCategoryAsync(drawerId, categoryId, destDrawerId, null);
        }
        
        /// <remarks/>
        public void MoveCategoryAsync(int drawerId, int categoryId, int destDrawerId, object userState) {
            if ((this.MoveCategoryOperationCompleted == null)) {
                this.MoveCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveCategoryOperationCompleted);
            }
            this.InvokeAsync("MoveCategory", new object[] {
                        drawerId,
                        categoryId,
                        destDrawerId}, this.MoveCategoryOperationCompleted, userState);
        }
        
        private void OnMoveCategoryOperationCompleted(object arg) {
            if ((this.MoveCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/MoveFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveFolder(int folderId, int destDrawerId, int destCategoryId) {
            this.Invoke("MoveFolder", new object[] {
                        folderId,
                        destDrawerId,
                        destCategoryId});
        }
        
        /// <remarks/>
        public void MoveFolderAsync(int folderId, int destDrawerId, int destCategoryId) {
            this.MoveFolderAsync(folderId, destDrawerId, destCategoryId, null);
        }
        
        /// <remarks/>
        public void MoveFolderAsync(int folderId, int destDrawerId, int destCategoryId, object userState) {
            if ((this.MoveFolderOperationCompleted == null)) {
                this.MoveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveFolderOperationCompleted);
            }
            this.InvokeAsync("MoveFolder", new object[] {
                        folderId,
                        destDrawerId,
                        destCategoryId}, this.MoveFolderOperationCompleted, userState);
        }
        
        private void OnMoveFolderOperationCompleted(object arg) {
            if ((this.MoveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/SwitchFolderGroups", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchFolderGroups(int drawerId, int sourceCategoryId, int destCategoryId) {
            this.Invoke("SwitchFolderGroups", new object[] {
                        drawerId,
                        sourceCategoryId,
                        destCategoryId});
        }
        
        /// <remarks/>
        public void SwitchFolderGroupsAsync(int drawerId, int sourceCategoryId, int destCategoryId) {
            this.SwitchFolderGroupsAsync(drawerId, sourceCategoryId, destCategoryId, null);
        }
        
        /// <remarks/>
        public void SwitchFolderGroupsAsync(int drawerId, int sourceCategoryId, int destCategoryId, object userState) {
            if ((this.SwitchFolderGroupsOperationCompleted == null)) {
                this.SwitchFolderGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchFolderGroupsOperationCompleted);
            }
            this.InvokeAsync("SwitchFolderGroups", new object[] {
                        drawerId,
                        sourceCategoryId,
                        destCategoryId}, this.SwitchFolderGroupsOperationCompleted, userState);
        }
        
        private void OnSwitchFolderGroupsOperationCompleted(object arg) {
            if ((this.SwitchFolderGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchFolderGroupsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CloneCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloneCabinet(int cabinetId, string destName) {
            this.Invoke("CloneCabinet", new object[] {
                        cabinetId,
                        destName});
        }
        
        /// <remarks/>
        public void CloneCabinetAsync(int cabinetId, string destName) {
            this.CloneCabinetAsync(cabinetId, destName, null);
        }
        
        /// <remarks/>
        public void CloneCabinetAsync(int cabinetId, string destName, object userState) {
            if ((this.CloneCabinetOperationCompleted == null)) {
                this.CloneCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloneCabinetOperationCompleted);
            }
            this.InvokeAsync("CloneCabinet", new object[] {
                        cabinetId,
                        destName}, this.CloneCabinetOperationCompleted, userState);
        }
        
        private void OnCloneCabinetOperationCompleted(object arg) {
            if ((this.CloneCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloneCabinetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CloneDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloneDrawer(int drawerId, int destCabinetId, string destName) {
            this.Invoke("CloneDrawer", new object[] {
                        drawerId,
                        destCabinetId,
                        destName});
        }
        
        /// <remarks/>
        public void CloneDrawerAsync(int drawerId, int destCabinetId, string destName) {
            this.CloneDrawerAsync(drawerId, destCabinetId, destName, null);
        }
        
        /// <remarks/>
        public void CloneDrawerAsync(int drawerId, int destCabinetId, string destName, object userState) {
            if ((this.CloneDrawerOperationCompleted == null)) {
                this.CloneDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloneDrawerOperationCompleted);
            }
            this.InvokeAsync("CloneDrawer", new object[] {
                        drawerId,
                        destCabinetId,
                        destName}, this.CloneDrawerOperationCompleted, userState);
        }
        
        private void OnCloneDrawerOperationCompleted(object arg) {
            if ((this.CloneDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloneDrawerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CloneCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloneCategory(int drawerId, int categoryId, int destDrawerId, string destName) {
            this.Invoke("CloneCategory", new object[] {
                        drawerId,
                        categoryId,
                        destDrawerId,
                        destName});
        }
        
        /// <remarks/>
        public void CloneCategoryAsync(int drawerId, int categoryId, int destDrawerId, string destName) {
            this.CloneCategoryAsync(drawerId, categoryId, destDrawerId, destName, null);
        }
        
        /// <remarks/>
        public void CloneCategoryAsync(int drawerId, int categoryId, int destDrawerId, string destName, object userState) {
            if ((this.CloneCategoryOperationCompleted == null)) {
                this.CloneCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloneCategoryOperationCompleted);
            }
            this.InvokeAsync("CloneCategory", new object[] {
                        drawerId,
                        categoryId,
                        destDrawerId,
                        destName}, this.CloneCategoryOperationCompleted, userState);
        }
        
        private void OnCloneCategoryOperationCompleted(object arg) {
            if ((this.CloneCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloneCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CloneFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloneFolder(int folderId, int destDrawerId, int destCategoryId, string destName) {
            this.Invoke("CloneFolder", new object[] {
                        folderId,
                        destDrawerId,
                        destCategoryId,
                        destName});
        }
        
        /// <remarks/>
        public void CloneFolderAsync(int folderId, int destDrawerId, int destCategoryId, string destName) {
            this.CloneFolderAsync(folderId, destDrawerId, destCategoryId, destName, null);
        }
        
        /// <remarks/>
        public void CloneFolderAsync(int folderId, int destDrawerId, int destCategoryId, string destName, object userState) {
            if ((this.CloneFolderOperationCompleted == null)) {
                this.CloneFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloneFolderOperationCompleted);
            }
            this.InvokeAsync("CloneFolder", new object[] {
                        folderId,
                        destDrawerId,
                        destCategoryId,
                        destName}, this.CloneFolderOperationCompleted, userState);
        }
        
        private void OnCloneFolderOperationCompleted(object arg) {
            if ((this.CloneFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloneFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CopyCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CopyCabinet(int cabinetId, string destName) {
            this.Invoke("CopyCabinet", new object[] {
                        cabinetId,
                        destName});
        }
        
        /// <remarks/>
        public void CopyCabinetAsync(int cabinetId, string destName) {
            this.CopyCabinetAsync(cabinetId, destName, null);
        }
        
        /// <remarks/>
        public void CopyCabinetAsync(int cabinetId, string destName, object userState) {
            if ((this.CopyCabinetOperationCompleted == null)) {
                this.CopyCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyCabinetOperationCompleted);
            }
            this.InvokeAsync("CopyCabinet", new object[] {
                        cabinetId,
                        destName}, this.CopyCabinetOperationCompleted, userState);
        }
        
        private void OnCopyCabinetOperationCompleted(object arg) {
            if ((this.CopyCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyCabinetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CopyDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CopyDrawer(int drawerId, int destCabinetId, string destName) {
            this.Invoke("CopyDrawer", new object[] {
                        drawerId,
                        destCabinetId,
                        destName});
        }
        
        /// <remarks/>
        public void CopyDrawerAsync(int drawerId, int destCabinetId, string destName) {
            this.CopyDrawerAsync(drawerId, destCabinetId, destName, null);
        }
        
        /// <remarks/>
        public void CopyDrawerAsync(int drawerId, int destCabinetId, string destName, object userState) {
            if ((this.CopyDrawerOperationCompleted == null)) {
                this.CopyDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyDrawerOperationCompleted);
            }
            this.InvokeAsync("CopyDrawer", new object[] {
                        drawerId,
                        destCabinetId,
                        destName}, this.CopyDrawerOperationCompleted, userState);
        }
        
        private void OnCopyDrawerOperationCompleted(object arg) {
            if ((this.CopyDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyDrawerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CopyCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CopyCategory(int drawerId, int categoryId, int destDrawerId, string destName) {
            this.Invoke("CopyCategory", new object[] {
                        drawerId,
                        categoryId,
                        destDrawerId,
                        destName});
        }
        
        /// <remarks/>
        public void CopyCategoryAsync(int drawerId, int categoryId, int destDrawerId, string destName) {
            this.CopyCategoryAsync(drawerId, categoryId, destDrawerId, destName, null);
        }
        
        /// <remarks/>
        public void CopyCategoryAsync(int drawerId, int categoryId, int destDrawerId, string destName, object userState) {
            if ((this.CopyCategoryOperationCompleted == null)) {
                this.CopyCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyCategoryOperationCompleted);
            }
            this.InvokeAsync("CopyCategory", new object[] {
                        drawerId,
                        categoryId,
                        destDrawerId,
                        destName}, this.CopyCategoryOperationCompleted, userState);
        }
        
        private void OnCopyCategoryOperationCompleted(object arg) {
            if ((this.CopyCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CopyFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CopyFolder(int folderId, int destDrawerId, int destCategoryId, string destName) {
            this.Invoke("CopyFolder", new object[] {
                        folderId,
                        destDrawerId,
                        destCategoryId,
                        destName});
        }
        
        /// <remarks/>
        public void CopyFolderAsync(int folderId, int destDrawerId, int destCategoryId, string destName) {
            this.CopyFolderAsync(folderId, destDrawerId, destCategoryId, destName, null);
        }
        
        /// <remarks/>
        public void CopyFolderAsync(int folderId, int destDrawerId, int destCategoryId, string destName, object userState) {
            if ((this.CopyFolderOperationCompleted == null)) {
                this.CopyFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyFolderOperationCompleted);
            }
            this.InvokeAsync("CopyFolder", new object[] {
                        folderId,
                        destDrawerId,
                        destCategoryId,
                        destName}, this.CopyFolderOperationCompleted, userState);
        }
        
        private void OnCopyFolderOperationCompleted(object arg) {
            if ((this.CopyFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetBasicUserRolesInSco" +
            "pe", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MemberInRole[] GetBasicUserRolesInScope(int parentCabinetId, System.Guid[] guids) {
            object[] results = this.Invoke("GetBasicUserRolesInScope", new object[] {
                        parentCabinetId,
                        guids});
            return ((MemberInRole[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBasicUserRolesInScopeAsync(int parentCabinetId, System.Guid[] guids) {
            this.GetBasicUserRolesInScopeAsync(parentCabinetId, guids, null);
        }
        
        /// <remarks/>
        public void GetBasicUserRolesInScopeAsync(int parentCabinetId, System.Guid[] guids, object userState) {
            if ((this.GetBasicUserRolesInScopeOperationCompleted == null)) {
                this.GetBasicUserRolesInScopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasicUserRolesInScopeOperationCompleted);
            }
            this.InvokeAsync("GetBasicUserRolesInScope", new object[] {
                        parentCabinetId,
                        guids}, this.GetBasicUserRolesInScopeOperationCompleted, userState);
        }
        
        private void OnGetBasicUserRolesInScopeOperationCompleted(object arg) {
            if ((this.GetBasicUserRolesInScopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasicUserRolesInScopeCompleted(this, new GetBasicUserRolesInScopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetAvailableRolesForUs" +
            "ers", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AzRole[] GetAvailableRolesForUsers(int parentCabinetId, System.Guid[] guids, ref bool canBeRestricted) {
            object[] results = this.Invoke("GetAvailableRolesForUsers", new object[] {
                        parentCabinetId,
                        guids,
                        canBeRestricted});
            canBeRestricted = ((bool)(results[1]));
            return ((AzRole[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRolesForUsersAsync(int parentCabinetId, System.Guid[] guids, bool canBeRestricted) {
            this.GetAvailableRolesForUsersAsync(parentCabinetId, guids, canBeRestricted, null);
        }
        
        /// <remarks/>
        public void GetAvailableRolesForUsersAsync(int parentCabinetId, System.Guid[] guids, bool canBeRestricted, object userState) {
            if ((this.GetAvailableRolesForUsersOperationCompleted == null)) {
                this.GetAvailableRolesForUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRolesForUsersOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRolesForUsers", new object[] {
                        parentCabinetId,
                        guids,
                        canBeRestricted}, this.GetAvailableRolesForUsersOperationCompleted, userState);
        }
        
        private void OnGetAvailableRolesForUsersOperationCompleted(object arg) {
            if ((this.GetAvailableRolesForUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRolesForUsersCompleted(this, new GetAvailableRolesForUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetAvailableRolesForUs" +
            "ersInCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AzRole[] GetAvailableRolesForUsersInCabinet(System.Guid cabinetOwner, System.Guid[] guids, ref bool canBeRestricted) {
            object[] results = this.Invoke("GetAvailableRolesForUsersInCabinet", new object[] {
                        cabinetOwner,
                        guids,
                        canBeRestricted});
            canBeRestricted = ((bool)(results[1]));
            return ((AzRole[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRolesForUsersInCabinetAsync(System.Guid cabinetOwner, System.Guid[] guids, bool canBeRestricted) {
            this.GetAvailableRolesForUsersInCabinetAsync(cabinetOwner, guids, canBeRestricted, null);
        }
        
        /// <remarks/>
        public void GetAvailableRolesForUsersInCabinetAsync(System.Guid cabinetOwner, System.Guid[] guids, bool canBeRestricted, object userState) {
            if ((this.GetAvailableRolesForUsersInCabinetOperationCompleted == null)) {
                this.GetAvailableRolesForUsersInCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRolesForUsersInCabinetOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRolesForUsersInCabinet", new object[] {
                        cabinetOwner,
                        guids,
                        canBeRestricted}, this.GetAvailableRolesForUsersInCabinetOperationCompleted, userState);
        }
        
        private void OnGetAvailableRolesForUsersInCabinetOperationCompleted(object arg) {
            if ((this.GetAvailableRolesForUsersInCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRolesForUsersInCabinetCompleted(this, new GetAvailableRolesForUsersInCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CalculateEligibleMembe" +
            "rObjectsInCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CalculateEligibleMemberObjectsInCabinet(int cabinetId, ref System.Guid[] eligibleGroupIds, ref System.Guid[] eligibleUserIds, ref ADAMObject[] usersBelongingDirectly, ref System.Guid cabinetOwner) {
            object[] results = this.Invoke("CalculateEligibleMemberObjectsInCabinet", new object[] {
                        cabinetId,
                        eligibleGroupIds,
                        eligibleUserIds,
                        usersBelongingDirectly,
                        cabinetOwner});
            eligibleGroupIds = ((System.Guid[])(results[0]));
            eligibleUserIds = ((System.Guid[])(results[1]));
            usersBelongingDirectly = ((ADAMObject[])(results[2]));
            cabinetOwner = ((System.Guid)(results[3]));
        }
        
        /// <remarks/>
        public void CalculateEligibleMemberObjectsInCabinetAsync(int cabinetId, System.Guid[] eligibleGroupIds, System.Guid[] eligibleUserIds, ADAMObject[] usersBelongingDirectly, System.Guid cabinetOwner) {
            this.CalculateEligibleMemberObjectsInCabinetAsync(cabinetId, eligibleGroupIds, eligibleUserIds, usersBelongingDirectly, cabinetOwner, null);
        }
        
        /// <remarks/>
        public void CalculateEligibleMemberObjectsInCabinetAsync(int cabinetId, System.Guid[] eligibleGroupIds, System.Guid[] eligibleUserIds, ADAMObject[] usersBelongingDirectly, System.Guid cabinetOwner, object userState) {
            if ((this.CalculateEligibleMemberObjectsInCabinetOperationCompleted == null)) {
                this.CalculateEligibleMemberObjectsInCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateEligibleMemberObjectsInCabinetOperationCompleted);
            }
            this.InvokeAsync("CalculateEligibleMemberObjectsInCabinet", new object[] {
                        cabinetId,
                        eligibleGroupIds,
                        eligibleUserIds,
                        usersBelongingDirectly,
                        cabinetOwner}, this.CalculateEligibleMemberObjectsInCabinetOperationCompleted, userState);
        }
        
        private void OnCalculateEligibleMemberObjectsInCabinetOperationCompleted(object arg) {
            if ((this.CalculateEligibleMemberObjectsInCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateEligibleMemberObjectsInCabinetCompleted(this, new CalculateEligibleMemberObjectsInCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetAvailableFolderOwne" +
            "rs", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ADAMObject[] GetAvailableFolderOwners(int cabinetId, ref bool canAddFolderGroup) {
            object[] results = this.Invoke("GetAvailableFolderOwners", new object[] {
                        cabinetId,
                        canAddFolderGroup});
            canAddFolderGroup = ((bool)(results[1]));
            return ((ADAMObject[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableFolderOwnersAsync(int cabinetId, bool canAddFolderGroup) {
            this.GetAvailableFolderOwnersAsync(cabinetId, canAddFolderGroup, null);
        }
        
        /// <remarks/>
        public void GetAvailableFolderOwnersAsync(int cabinetId, bool canAddFolderGroup, object userState) {
            if ((this.GetAvailableFolderOwnersOperationCompleted == null)) {
                this.GetAvailableFolderOwnersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableFolderOwnersOperationCompleted);
            }
            this.InvokeAsync("GetAvailableFolderOwners", new object[] {
                        cabinetId,
                        canAddFolderGroup}, this.GetAvailableFolderOwnersOperationCompleted, userState);
        }
        
        private void OnGetAvailableFolderOwnersOperationCompleted(object arg) {
            if ((this.GetAvailableFolderOwnersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableFolderOwnersCompleted(this, new GetAvailableFolderOwnersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/CalculateEffectiveMemb" +
            "ers", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EffectiveMember[] CalculateEffectiveMembers(int cabinetId, MemberInRole[] members) {
            object[] results = this.Invoke("CalculateEffectiveMembers", new object[] {
                        cabinetId,
                        members});
            return ((EffectiveMember[])(results[0]));
        }
        
        /// <remarks/>
        public void CalculateEffectiveMembersAsync(int cabinetId, MemberInRole[] members) {
            this.CalculateEffectiveMembersAsync(cabinetId, members, null);
        }
        
        /// <remarks/>
        public void CalculateEffectiveMembersAsync(int cabinetId, MemberInRole[] members, object userState) {
            if ((this.CalculateEffectiveMembersOperationCompleted == null)) {
                this.CalculateEffectiveMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateEffectiveMembersOperationCompleted);
            }
            this.InvokeAsync("CalculateEffectiveMembers", new object[] {
                        cabinetId,
                        members}, this.CalculateEffectiveMembersOperationCompleted, userState);
        }
        
        private void OnCalculateEffectiveMembersOperationCompleted(object arg) {
            if ((this.CalculateEffectiveMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateEffectiveMembersCompleted(this, new CalculateEffectiveMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/SaveExpandedNodes", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveExpandedNodes(NodeInfo[] nodes) {
            this.Invoke("SaveExpandedNodes", new object[] {
                        nodes});
        }
        
        /// <remarks/>
        public void SaveExpandedNodesAsync(NodeInfo[] nodes) {
            this.SaveExpandedNodesAsync(nodes, null);
        }
        
        /// <remarks/>
        public void SaveExpandedNodesAsync(NodeInfo[] nodes, object userState) {
            if ((this.SaveExpandedNodesOperationCompleted == null)) {
                this.SaveExpandedNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveExpandedNodesOperationCompleted);
            }
            this.InvokeAsync("SaveExpandedNodes", new object[] {
                        nodes}, this.SaveExpandedNodesOperationCompleted, userState);
        }
        
        private void OnSaveExpandedNodesOperationCompleted(object arg) {
            if ((this.SaveExpandedNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveExpandedNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetExpandedRoots", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetExpandedRoots() {
            object[] results = this.Invoke("GetExpandedRoots", new object[0]);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExpandedRootsAsync() {
            this.GetExpandedRootsAsync(null);
        }
        
        /// <remarks/>
        public void GetExpandedRootsAsync(object userState) {
            if ((this.GetExpandedRootsOperationCompleted == null)) {
                this.GetExpandedRootsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpandedRootsOperationCompleted);
            }
            this.InvokeAsync("GetExpandedRoots", new object[0], this.GetExpandedRootsOperationCompleted, userState);
        }
        
        private void OnGetExpandedRootsOperationCompleted(object arg) {
            if ((this.GetExpandedRootsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpandedRootsCompleted(this, new GetExpandedRootsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetFolderStatistics", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LibraryObjectStatistics GetFolderStatistics(int folderId) {
            object[] results = this.Invoke("GetFolderStatistics", new object[] {
                        folderId});
            return ((LibraryObjectStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderStatisticsAsync(int folderId) {
            this.GetFolderStatisticsAsync(folderId, null);
        }
        
        /// <remarks/>
        public void GetFolderStatisticsAsync(int folderId, object userState) {
            if ((this.GetFolderStatisticsOperationCompleted == null)) {
                this.GetFolderStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetFolderStatistics", new object[] {
                        folderId}, this.GetFolderStatisticsOperationCompleted, userState);
        }
        
        private void OnGetFolderStatisticsOperationCompleted(object arg) {
            if ((this.GetFolderStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderStatisticsCompleted(this, new GetFolderStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetFolderGroupStatisti" +
            "cs", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LibraryObjectStatistics GetFolderGroupStatistics(int folderGroupId, int drawerId) {
            object[] results = this.Invoke("GetFolderGroupStatistics", new object[] {
                        folderGroupId,
                        drawerId});
            return ((LibraryObjectStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderGroupStatisticsAsync(int folderGroupId, int drawerId) {
            this.GetFolderGroupStatisticsAsync(folderGroupId, drawerId, null);
        }
        
        /// <remarks/>
        public void GetFolderGroupStatisticsAsync(int folderGroupId, int drawerId, object userState) {
            if ((this.GetFolderGroupStatisticsOperationCompleted == null)) {
                this.GetFolderGroupStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderGroupStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetFolderGroupStatistics", new object[] {
                        folderGroupId,
                        drawerId}, this.GetFolderGroupStatisticsOperationCompleted, userState);
        }
        
        private void OnGetFolderGroupStatisticsOperationCompleted(object arg) {
            if ((this.GetFolderGroupStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderGroupStatisticsCompleted(this, new GetFolderGroupStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetDrawerStatistics", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LibraryObjectStatistics GetDrawerStatistics(int drawerId) {
            object[] results = this.Invoke("GetDrawerStatistics", new object[] {
                        drawerId});
            return ((LibraryObjectStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrawerStatisticsAsync(int drawerId) {
            this.GetDrawerStatisticsAsync(drawerId, null);
        }
        
        /// <remarks/>
        public void GetDrawerStatisticsAsync(int drawerId, object userState) {
            if ((this.GetDrawerStatisticsOperationCompleted == null)) {
                this.GetDrawerStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrawerStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetDrawerStatistics", new object[] {
                        drawerId}, this.GetDrawerStatisticsOperationCompleted, userState);
        }
        
        private void OnGetDrawerStatisticsOperationCompleted(object arg) {
            if ((this.GetDrawerStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrawerStatisticsCompleted(this, new GetDrawerStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetCabinetStatistics", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LibraryObjectStatistics GetCabinetStatistics(int cabinetId) {
            object[] results = this.Invoke("GetCabinetStatistics", new object[] {
                        cabinetId});
            return ((LibraryObjectStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetCabinetStatisticsAsync(int cabinetId) {
            this.GetCabinetStatisticsAsync(cabinetId, null);
        }
        
        /// <remarks/>
        public void GetCabinetStatisticsAsync(int cabinetId, object userState) {
            if ((this.GetCabinetStatisticsOperationCompleted == null)) {
                this.GetCabinetStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCabinetStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetCabinetStatistics", new object[] {
                        cabinetId}, this.GetCabinetStatisticsOperationCompleted, userState);
        }
        
        private void OnGetCabinetStatisticsOperationCompleted(object arg) {
            if ((this.GetCabinetStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCabinetStatisticsCompleted(this, new GetCabinetStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetWholeLibraryStatist" +
            "ics", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LibraryObjectStatistics GetWholeLibraryStatistics(bool isArchive) {
            object[] results = this.Invoke("GetWholeLibraryStatistics", new object[] {
                        isArchive});
            return ((LibraryObjectStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetWholeLibraryStatisticsAsync(bool isArchive) {
            this.GetWholeLibraryStatisticsAsync(isArchive, null);
        }
        
        /// <remarks/>
        public void GetWholeLibraryStatisticsAsync(bool isArchive, object userState) {
            if ((this.GetWholeLibraryStatisticsOperationCompleted == null)) {
                this.GetWholeLibraryStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWholeLibraryStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetWholeLibraryStatistics", new object[] {
                        isArchive}, this.GetWholeLibraryStatisticsOperationCompleted, userState);
        }
        
        private void OnGetWholeLibraryStatisticsOperationCompleted(object arg) {
            if ((this.GetWholeLibraryStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWholeLibraryStatisticsCompleted(this, new GetWholeLibraryStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/ArchiveCabinet", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ArchiveCabinet(int cabinetId) {
            this.Invoke("ArchiveCabinet", new object[] {
                        cabinetId});
        }
        
        /// <remarks/>
        public void ArchiveCabinetAsync(int cabinetId) {
            this.ArchiveCabinetAsync(cabinetId, null);
        }
        
        /// <remarks/>
        public void ArchiveCabinetAsync(int cabinetId, object userState) {
            if ((this.ArchiveCabinetOperationCompleted == null)) {
                this.ArchiveCabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveCabinetOperationCompleted);
            }
            this.InvokeAsync("ArchiveCabinet", new object[] {
                        cabinetId}, this.ArchiveCabinetOperationCompleted, userState);
        }
        
        private void OnArchiveCabinetOperationCompleted(object arg) {
            if ((this.ArchiveCabinetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveCabinetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/ArchiveDrawer", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ArchiveDrawer(int drawerId) {
            this.Invoke("ArchiveDrawer", new object[] {
                        drawerId});
        }
        
        /// <remarks/>
        public void ArchiveDrawerAsync(int drawerId) {
            this.ArchiveDrawerAsync(drawerId, null);
        }
        
        /// <remarks/>
        public void ArchiveDrawerAsync(int drawerId, object userState) {
            if ((this.ArchiveDrawerOperationCompleted == null)) {
                this.ArchiveDrawerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveDrawerOperationCompleted);
            }
            this.InvokeAsync("ArchiveDrawer", new object[] {
                        drawerId}, this.ArchiveDrawerOperationCompleted, userState);
        }
        
        private void OnArchiveDrawerOperationCompleted(object arg) {
            if ((this.ArchiveDrawerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveDrawerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/ArchiveCategory", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ArchiveCategory(int categoryId, int drawerId) {
            this.Invoke("ArchiveCategory", new object[] {
                        categoryId,
                        drawerId});
        }
        
        /// <remarks/>
        public void ArchiveCategoryAsync(int categoryId, int drawerId) {
            this.ArchiveCategoryAsync(categoryId, drawerId, null);
        }
        
        /// <remarks/>
        public void ArchiveCategoryAsync(int categoryId, int drawerId, object userState) {
            if ((this.ArchiveCategoryOperationCompleted == null)) {
                this.ArchiveCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveCategoryOperationCompleted);
            }
            this.InvokeAsync("ArchiveCategory", new object[] {
                        categoryId,
                        drawerId}, this.ArchiveCategoryOperationCompleted, userState);
        }
        
        private void OnArchiveCategoryOperationCompleted(object arg) {
            if ((this.ArchiveCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/ArchiveFolder", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ArchiveFolder(int folderId) {
            this.Invoke("ArchiveFolder", new object[] {
                        folderId});
        }
        
        /// <remarks/>
        public void ArchiveFolderAsync(int folderId) {
            this.ArchiveFolderAsync(folderId, null);
        }
        
        /// <remarks/>
        public void ArchiveFolderAsync(int folderId, object userState) {
            if ((this.ArchiveFolderOperationCompleted == null)) {
                this.ArchiveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveFolderOperationCompleted);
            }
            this.InvokeAsync("ArchiveFolder", new object[] {
                        folderId}, this.ArchiveFolderOperationCompleted, userState);
        }
        
        private void OnArchiveFolderOperationCompleted(object arg) {
            if ((this.ArchiveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/SetDrawerWeight", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDrawerWeight(int drawerId, int weight) {
            this.Invoke("SetDrawerWeight", new object[] {
                        drawerId,
                        weight});
        }
        
        /// <remarks/>
        public void SetDrawerWeightAsync(int drawerId, int weight) {
            this.SetDrawerWeightAsync(drawerId, weight, null);
        }
        
        /// <remarks/>
        public void SetDrawerWeightAsync(int drawerId, int weight, object userState) {
            if ((this.SetDrawerWeightOperationCompleted == null)) {
                this.SetDrawerWeightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDrawerWeightOperationCompleted);
            }
            this.InvokeAsync("SetDrawerWeight", new object[] {
                        drawerId,
                        weight}, this.SetDrawerWeightOperationCompleted, userState);
        }
        
        private void OnSetDrawerWeightOperationCompleted(object arg) {
            if ((this.SetDrawerWeightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDrawerWeightCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/SetCategoryWeight", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCategoryWeight(int categoryId, int weight) {
            this.Invoke("SetCategoryWeight", new object[] {
                        categoryId,
                        weight});
        }
        
        /// <remarks/>
        public void SetCategoryWeightAsync(int categoryId, int weight) {
            this.SetCategoryWeightAsync(categoryId, weight, null);
        }
        
        /// <remarks/>
        public void SetCategoryWeightAsync(int categoryId, int weight, object userState) {
            if ((this.SetCategoryWeightOperationCompleted == null)) {
                this.SetCategoryWeightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCategoryWeightOperationCompleted);
            }
            this.InvokeAsync("SetCategoryWeight", new object[] {
                        categoryId,
                        weight}, this.SetCategoryWeightOperationCompleted, userState);
        }
        
        private void OnSetCategoryWeightOperationCompleted(object arg) {
            if ((this.SetCategoryWeightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCategoryWeightCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/SetCabinetWeight", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCabinetWeight(int cabinetId, int weight) {
            this.Invoke("SetCabinetWeight", new object[] {
                        cabinetId,
                        weight});
        }
        
        /// <remarks/>
        public void SetCabinetWeightAsync(int cabinetId, int weight) {
            this.SetCabinetWeightAsync(cabinetId, weight, null);
        }
        
        /// <remarks/>
        public void SetCabinetWeightAsync(int cabinetId, int weight, object userState) {
            if ((this.SetCabinetWeightOperationCompleted == null)) {
                this.SetCabinetWeightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCabinetWeightOperationCompleted);
            }
            this.InvokeAsync("SetCabinetWeight", new object[] {
                        cabinetId,
                        weight}, this.SetCabinetWeightOperationCompleted, userState);
        }
        
        private void OnSetCabinetWeightOperationCompleted(object arg) {
            if ((this.SetCabinetWeightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCabinetWeightCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/SetFolderWeight", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFolderWeight(int folderId, int weight) {
            this.Invoke("SetFolderWeight", new object[] {
                        folderId,
                        weight});
        }
        
        /// <remarks/>
        public void SetFolderWeightAsync(int folderId, int weight) {
            this.SetFolderWeightAsync(folderId, weight, null);
        }
        
        /// <remarks/>
        public void SetFolderWeightAsync(int folderId, int weight, object userState) {
            if ((this.SetFolderWeightOperationCompleted == null)) {
                this.SetFolderWeightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFolderWeightOperationCompleted);
            }
            this.InvokeAsync("SetFolderWeight", new object[] {
                        folderId,
                        weight}, this.SetFolderWeightOperationCompleted, userState);
        }
        
        private void OnSetFolderWeightOperationCompleted(object arg) {
            if ((this.SetFolderWeightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFolderWeightCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/librarystructuremanager/GetFolderPathAndLocati" +
            "on", RequestNamespace="http://filehold.com/librarymanager/librarystructuremanager/", ResponseNamespace="http://filehold.com/librarymanager/librarystructuremanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("path")]
        public string[] GetFolderPathAndLocation(int folderId, out int[] location) {
            object[] results = this.Invoke("GetFolderPathAndLocation", new object[] {
                        folderId});
            location = ((int[])(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderPathAndLocationAsync(int folderId) {
            this.GetFolderPathAndLocationAsync(folderId, null);
        }
        
        /// <remarks/>
        public void GetFolderPathAndLocationAsync(int folderId, object userState) {
            if ((this.GetFolderPathAndLocationOperationCompleted == null)) {
                this.GetFolderPathAndLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderPathAndLocationOperationCompleted);
            }
            this.InvokeAsync("GetFolderPathAndLocation", new object[] {
                        folderId}, this.GetFolderPathAndLocationOperationCompleted, userState);
        }
        
        private void OnGetFolderPathAndLocationOperationCompleted(object arg) {
            if ((this.GetFolderPathAndLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderPathAndLocationCompleted(this, new GetFolderPathAndLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class Cabinet : LibraryStructureObject {
        
        private MemberInRole[] membersInRolesField;
        
        private string descriptionField;
        
        private int defaultSchemaField;
        
        private Drawer[] drawersField;
        
        private bool canAddFolderGroupField;
        
        private bool canChangeFolderOwnerField;
        
        private bool canAddDrawerField;
        
        private bool showAddDrawerField;
        
        private System.Guid ownerGuidField;
        
        private bool populateSecurityPermissionsField;
        
        private AutoTagging autoTaggingField;
        
        /// <remarks/>
        public MemberInRole[] MembersInRoles {
            get {
                return this.membersInRolesField;
            }
            set {
                this.membersInRolesField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultSchema {
            get {
                return this.defaultSchemaField;
            }
            set {
                this.defaultSchemaField = value;
            }
        }
        
        /// <remarks/>
        public Drawer[] Drawers {
            get {
                return this.drawersField;
            }
            set {
                this.drawersField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddFolderGroup {
            get {
                return this.canAddFolderGroupField;
            }
            set {
                this.canAddFolderGroupField = value;
            }
        }
        
        /// <remarks/>
        public bool CanChangeFolderOwner {
            get {
                return this.canChangeFolderOwnerField;
            }
            set {
                this.canChangeFolderOwnerField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddDrawer {
            get {
                return this.canAddDrawerField;
            }
            set {
                this.canAddDrawerField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowAddDrawer {
            get {
                return this.showAddDrawerField;
            }
            set {
                this.showAddDrawerField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OwnerGuid {
            get {
                return this.ownerGuidField;
            }
            set {
                this.ownerGuidField = value;
            }
        }
        
        /// <remarks/>
        public bool PopulateSecurityPermissions {
            get {
                return this.populateSecurityPermissionsField;
            }
            set {
                this.populateSecurityPermissionsField = value;
            }
        }
        
        /// <remarks/>
        public AutoTagging AutoTagging {
            get {
                return this.autoTaggingField;
            }
            set {
                this.autoTaggingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class MemberInRole {
        
        private System.Guid idField;
        
        private int roleIdField;
        
        private bool overrideRoleField;
        
        private int[] extraRolesField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
        
        /// <remarks/>
        public bool OverrideRole {
            get {
                return this.overrideRoleField;
            }
            set {
                this.overrideRoleField = value;
            }
        }
        
        /// <remarks/>
        public int[] ExtraRoles {
            get {
                return this.extraRolesField;
            }
            set {
                this.extraRolesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class LibraryObjectStatistics {
        
        private int cabinetsCountField;
        
        private int drawersCountField;
        
        private int folderGroupsCountField;
        
        private int foldersCountField;
        
        private int filesLatestVersionCountField;
        
        private long sizeLatestVersionField;
        
        private int filesAllVersionsCountField;
        
        private long sizeAllVersionsField;
        
        /// <remarks/>
        public int CabinetsCount {
            get {
                return this.cabinetsCountField;
            }
            set {
                this.cabinetsCountField = value;
            }
        }
        
        /// <remarks/>
        public int DrawersCount {
            get {
                return this.drawersCountField;
            }
            set {
                this.drawersCountField = value;
            }
        }
        
        /// <remarks/>
        public int FolderGroupsCount {
            get {
                return this.folderGroupsCountField;
            }
            set {
                this.folderGroupsCountField = value;
            }
        }
        
        /// <remarks/>
        public int FoldersCount {
            get {
                return this.foldersCountField;
            }
            set {
                this.foldersCountField = value;
            }
        }
        
        /// <remarks/>
        public int FilesLatestVersionCount {
            get {
                return this.filesLatestVersionCountField;
            }
            set {
                this.filesLatestVersionCountField = value;
            }
        }
        
        /// <remarks/>
        public long SizeLatestVersion {
            get {
                return this.sizeLatestVersionField;
            }
            set {
                this.sizeLatestVersionField = value;
            }
        }
        
        /// <remarks/>
        public int FilesAllVersionsCount {
            get {
                return this.filesAllVersionsCountField;
            }
            set {
                this.filesAllVersionsCountField = value;
            }
        }
        
        /// <remarks/>
        public long SizeAllVersions {
            get {
                return this.sizeAllVersionsField;
            }
            set {
                this.sizeAllVersionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class NodeInfo {
        
        private NodeInfoType nodeTypeField;
        
        private int nodeIdField;
        
        private int nodeSubIdField;
        
        /// <remarks/>
        public NodeInfoType NodeType {
            get {
                return this.nodeTypeField;
            }
            set {
                this.nodeTypeField = value;
            }
        }
        
        /// <remarks/>
        public int NodeId {
            get {
                return this.nodeIdField;
            }
            set {
                this.nodeIdField = value;
            }
        }
        
        /// <remarks/>
        public int NodeSubId {
            get {
                return this.nodeSubIdField;
            }
            set {
                this.nodeSubIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public enum NodeInfoType {
        
        /// <remarks/>
        Root,
        
        /// <remarks/>
        Cabinet,
        
        /// <remarks/>
        Drawer,
        
        /// <remarks/>
        Category,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/internalservice/")]
    public partial class EffectiveMember {
        
        private System.Guid idField;
        
        private string nameField;
        
        private int roleIdField;
        
        private int[] extraRolesField;
        
        private string[] groupsField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
        
        /// <remarks/>
        public int[] ExtraRoles {
            get {
                return this.extraRolesField;
            }
            set {
                this.extraRolesField = value;
            }
        }
        
        /// <remarks/>
        public string[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/internalservice/")]
    public partial class AzRole {
        
        private int roleIdField;
        
        private string nameField;
        
        private decimal orderField;
        
        private int[] operationsField;
        
        private int[] parentRolesField;
        
        /// <remarks/>
        public int RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public decimal Order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        /// <remarks/>
        public int[] Operations {
            get {
                return this.operationsField;
            }
            set {
                this.operationsField = value;
            }
        }
        
        /// <remarks/>
        public int[] ParentRoles {
            get {
                return this.parentRolesField;
            }
            set {
                this.parentRolesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class ADAMOwner {
        
        private ADAMObject aDAMObjectField;
        
        private bool isDeletedField;
        
        private bool isDisabledField;
        
        private bool invalidCabinetOwnerField;
        
        private bool invalidFolderOwnerField;
        
        /// <remarks/>
        public ADAMObject ADAMObject {
            get {
                return this.aDAMObjectField;
            }
            set {
                this.aDAMObjectField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDisabled {
            get {
                return this.isDisabledField;
            }
            set {
                this.isDisabledField = value;
            }
        }
        
        /// <remarks/>
        public bool InvalidCabinetOwner {
            get {
                return this.invalidCabinetOwnerField;
            }
            set {
                this.invalidCabinetOwnerField = value;
            }
        }
        
        /// <remarks/>
        public bool InvalidFolderOwner {
            get {
                return this.invalidFolderOwnerField;
            }
            set {
                this.invalidFolderOwnerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/usergroupmanager/")]
    public partial class ADAMObject {
        
        private int viewerLicenseTypeField;
        
        private bool belongsDirectlyField;
        
        private System.Guid idField;
        
        private string domainNameField;
        
        private int sourceTypeField;
        
        private string belongsToFHGroupsField;
        
        private System.DateTime lastModifiedDateField;
        
        private string objectNameField;
        
        private string descriptionField;
        
        private string roleNameField;
        
        private bool hasFHAccountEnabledField;
        
        private string emailField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string userNameField;
        
        private string workPhoneField;
        
        private ADAMObjectType typeField;
        
        private bool hasGuaranteedAccessField;
        
        private string aDFolderField;
        
        private bool isUserEnabledInADField;
        
        private bool scanningInboxLicenseField;
        
        private bool webViewerLicenseField;
        
        /// <remarks/>
        public int ViewerLicenseType {
            get {
                return this.viewerLicenseTypeField;
            }
            set {
                this.viewerLicenseTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool BelongsDirectly {
            get {
                return this.belongsDirectlyField;
            }
            set {
                this.belongsDirectlyField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string DomainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
            }
        }
        
        /// <remarks/>
        public int SourceType {
            get {
                return this.sourceTypeField;
            }
            set {
                this.sourceTypeField = value;
            }
        }
        
        /// <remarks/>
        public string BelongsToFHGroups {
            get {
                return this.belongsToFHGroupsField;
            }
            set {
                this.belongsToFHGroupsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifiedDate {
            get {
                return this.lastModifiedDateField;
            }
            set {
                this.lastModifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectName {
            get {
                return this.objectNameField;
            }
            set {
                this.objectNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string RoleName {
            get {
                return this.roleNameField;
            }
            set {
                this.roleNameField = value;
            }
        }
        
        /// <remarks/>
        public bool HasFHAccountEnabled {
            get {
                return this.hasFHAccountEnabledField;
            }
            set {
                this.hasFHAccountEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string WorkPhone {
            get {
                return this.workPhoneField;
            }
            set {
                this.workPhoneField = value;
            }
        }
        
        /// <remarks/>
        public ADAMObjectType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool HasGuaranteedAccess {
            get {
                return this.hasGuaranteedAccessField;
            }
            set {
                this.hasGuaranteedAccessField = value;
            }
        }
        
        /// <remarks/>
        public string ADFolder {
            get {
                return this.aDFolderField;
            }
            set {
                this.aDFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool IsUserEnabledInAD {
            get {
                return this.isUserEnabledInADField;
            }
            set {
                this.isUserEnabledInADField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanningInboxLicense {
            get {
                return this.scanningInboxLicenseField;
            }
            set {
                this.scanningInboxLicenseField = value;
            }
        }
        
        /// <remarks/>
        public bool WebViewerLicense {
            get {
                return this.webViewerLicenseField;
            }
            set {
                this.webViewerLicenseField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/usergroupmanager/")]
    public enum ADAMObjectType {
        
        /// <remarks/>
        LocalUser,
        
        /// <remarks/>
        DomainUser,
        
        /// <remarks/>
        DomainGroup,
        
        /// <remarks/>
        FileholdGroup,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class SearchUsersCriteria {
        
        private SearchMode modeField;
        
        private bool includeDeletedField;
        
        private bool onlyAvailableField;
        
        private bool checkPermissonsField;
        
        private string searchPhraseField;
        
        /// <remarks/>
        public SearchMode Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeDeleted {
            get {
                return this.includeDeletedField;
            }
            set {
                this.includeDeletedField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyAvailable {
            get {
                return this.onlyAvailableField;
            }
            set {
                this.onlyAvailableField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckPermissons {
            get {
                return this.checkPermissonsField;
            }
            set {
                this.checkPermissonsField = value;
            }
        }
        
        /// <remarks/>
        public string SearchPhrase {
            get {
                return this.searchPhraseField;
            }
            set {
                this.searchPhraseField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public enum SearchMode {
        
        /// <remarks/>
        DocumentsOwners = 1,
        
        /// <remarks/>
        CabinetsOwners = 2,
        
        /// <remarks/>
        FoldersOwners = 4,
        
        /// <remarks/>
        UsersCheckedOut = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class LibraryObjectInfo {
        
        private LibraryObjectType objectTypeField;
        
        private string ownerField;
        
        private string locationField;
        
        private string nameField;
        
        private int internalIdField;
        
        /// <remarks/>
        public LibraryObjectType ObjectType {
            get {
                return this.objectTypeField;
            }
            set {
                this.objectTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int InternalId {
            get {
                return this.internalIdField;
            }
            set {
                this.internalIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public enum LibraryObjectType {
        
        /// <remarks/>
        Folder,
        
        /// <remarks/>
        Category,
        
        /// <remarks/>
        Drawer,
        
        /// <remarks/>
        Cabinet,
        
        /// <remarks/>
        All,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class AutoTaggingField {
        
        private int fieldIdField;
        
        private object fieldValueField;
        
        /// <remarks/>
        public int FieldId {
            get {
                return this.fieldIdField;
            }
            set {
                this.fieldIdField = value;
            }
        }
        
        /// <remarks/>
        public object FieldValue {
            get {
                return this.fieldValueField;
            }
            set {
                this.fieldValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class AutoTagging {
        
        private int documentSchemaIdField;
        
        private AutoTaggingField[] metadataFieldsField;
        
        private bool defaultForFoldersField;
        
        private bool inheritFromCabinetField;
        
        /// <remarks/>
        public int DocumentSchemaId {
            get {
                return this.documentSchemaIdField;
            }
            set {
                this.documentSchemaIdField = value;
            }
        }
        
        /// <remarks/>
        public AutoTaggingField[] MetadataFields {
            get {
                return this.metadataFieldsField;
            }
            set {
                this.metadataFieldsField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultForFolders {
            get {
                return this.defaultForFoldersField;
            }
            set {
                this.defaultForFoldersField = value;
            }
        }
        
        /// <remarks/>
        public bool InheritFromCabinet {
            get {
                return this.inheritFromCabinetField;
            }
            set {
                this.inheritFromCabinetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class GeneralFolderPermissions {
        
        private bool showEditDocumentsField;
        
        private bool showCheckInOutDocumentsField;
        
        private bool showDownloadDocumentsField;
        
        private bool showEmailDocumentsField;
        
        private bool showDeleteDocumentsField;
        
        private bool showLinkDocumentsField;
        
        private bool showCopyMoveDocumentsField;
        
        private bool showSubscribeToField;
        
        private bool canAddOrModifyDocumentsField;
        
        private bool showVersionHistoryField;
        
        private bool showMetadataHistoryField;
        
        private bool showUsageLogField;
        
        private bool showConvertToOfflineField;
        
        private bool showArchiveDocumentField;
        
        /// <remarks/>
        public bool ShowEditDocuments {
            get {
                return this.showEditDocumentsField;
            }
            set {
                this.showEditDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowCheckInOutDocuments {
            get {
                return this.showCheckInOutDocumentsField;
            }
            set {
                this.showCheckInOutDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowDownloadDocuments {
            get {
                return this.showDownloadDocumentsField;
            }
            set {
                this.showDownloadDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowEmailDocuments {
            get {
                return this.showEmailDocumentsField;
            }
            set {
                this.showEmailDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowDeleteDocuments {
            get {
                return this.showDeleteDocumentsField;
            }
            set {
                this.showDeleteDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowLinkDocuments {
            get {
                return this.showLinkDocumentsField;
            }
            set {
                this.showLinkDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowCopyMoveDocuments {
            get {
                return this.showCopyMoveDocumentsField;
            }
            set {
                this.showCopyMoveDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSubscribeTo {
            get {
                return this.showSubscribeToField;
            }
            set {
                this.showSubscribeToField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddOrModifyDocuments {
            get {
                return this.canAddOrModifyDocumentsField;
            }
            set {
                this.canAddOrModifyDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowVersionHistory {
            get {
                return this.showVersionHistoryField;
            }
            set {
                this.showVersionHistoryField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowMetadataHistory {
            get {
                return this.showMetadataHistoryField;
            }
            set {
                this.showMetadataHistoryField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowUsageLog {
            get {
                return this.showUsageLogField;
            }
            set {
                this.showUsageLogField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowConvertToOffline {
            get {
                return this.showConvertToOfflineField;
            }
            set {
                this.showConvertToOfflineField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowArchiveDocument {
            get {
                return this.showArchiveDocumentField;
            }
            set {
                this.showArchiveDocumentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Folder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Category))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Drawer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Cabinet))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public abstract partial class LibraryStructureObject {
        
        private int idField;
        
        private string nameField;
        
        private int weightField;
        
        private int documentsCountField;
        
        private bool isArchiveField;
        
        private int parentCabinetIdField;
        
        private bool expandedField;
        
        private bool canEditField;
        
        private bool showEditField;
        
        private bool canChangeOwnerField;
        
        private bool canDeleteField;
        
        private bool showDeleteField;
        
        private bool canCopyField;
        
        private bool showCopyField;
        
        private bool canCloneField;
        
        private bool showCloneField;
        
        private bool canArchiveField;
        
        private bool showArchiveField;
        
        private bool isDeletedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentsCount {
            get {
                return this.documentsCountField;
            }
            set {
                this.documentsCountField = value;
            }
        }
        
        /// <remarks/>
        public bool IsArchive {
            get {
                return this.isArchiveField;
            }
            set {
                this.isArchiveField = value;
            }
        }
        
        /// <remarks/>
        public int ParentCabinetId {
            get {
                return this.parentCabinetIdField;
            }
            set {
                this.parentCabinetIdField = value;
            }
        }
        
        /// <remarks/>
        public bool Expanded {
            get {
                return this.expandedField;
            }
            set {
                this.expandedField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowEdit {
            get {
                return this.showEditField;
            }
            set {
                this.showEditField = value;
            }
        }
        
        /// <remarks/>
        public bool CanChangeOwner {
            get {
                return this.canChangeOwnerField;
            }
            set {
                this.canChangeOwnerField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowDelete {
            get {
                return this.showDeleteField;
            }
            set {
                this.showDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCopy {
            get {
                return this.canCopyField;
            }
            set {
                this.canCopyField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowCopy {
            get {
                return this.showCopyField;
            }
            set {
                this.showCopyField = value;
            }
        }
        
        /// <remarks/>
        public bool CanClone {
            get {
                return this.canCloneField;
            }
            set {
                this.canCloneField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowClone {
            get {
                return this.showCloneField;
            }
            set {
                this.showCloneField = value;
            }
        }
        
        /// <remarks/>
        public bool CanArchive {
            get {
                return this.canArchiveField;
            }
            set {
                this.canArchiveField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowArchive {
            get {
                return this.showArchiveField;
            }
            set {
                this.showArchiveField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class Folder : LibraryStructureObject {
        
        private int categoryIdField;
        
        private System.Guid ownerGuidField;
        
        private MemberInRole[] membersInRolesField;
        
        private bool hasRestrictedRightsField;
        
        private string descriptionField;
        
        private bool selectedField;
        
        private bool canAddModifyDocumentField;
        
        private bool canEditReadOnlyFieldsField;
        
        private bool canMoveDocumentToField;
        
        private bool canMoveField;
        
        private bool showMoveField;
        
        private bool alertMeOfChangesField;
        
        private bool inheritSecurityPermissionsField;
        
        private GeneralFolderPermissions generalPermissionsField;
        
        private AutoTagging autoTaggingField;
        
        private bool isAutoTaggedField;
        
        private int defaultSchemaField;
        
        private bool isSchemaInheritedField;
        
        private string fullPathField;
        
        private FolderColor colorField;
        
        /// <remarks/>
        public int CategoryId {
            get {
                return this.categoryIdField;
            }
            set {
                this.categoryIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OwnerGuid {
            get {
                return this.ownerGuidField;
            }
            set {
                this.ownerGuidField = value;
            }
        }
        
        /// <remarks/>
        public MemberInRole[] MembersInRoles {
            get {
                return this.membersInRolesField;
            }
            set {
                this.membersInRolesField = value;
            }
        }
        
        /// <remarks/>
        public bool HasRestrictedRights {
            get {
                return this.hasRestrictedRightsField;
            }
            set {
                this.hasRestrictedRightsField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool Selected {
            get {
                return this.selectedField;
            }
            set {
                this.selectedField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddModifyDocument {
            get {
                return this.canAddModifyDocumentField;
            }
            set {
                this.canAddModifyDocumentField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEditReadOnlyFields {
            get {
                return this.canEditReadOnlyFieldsField;
            }
            set {
                this.canEditReadOnlyFieldsField = value;
            }
        }
        
        /// <remarks/>
        public bool CanMoveDocumentTo {
            get {
                return this.canMoveDocumentToField;
            }
            set {
                this.canMoveDocumentToField = value;
            }
        }
        
        /// <remarks/>
        public bool CanMove {
            get {
                return this.canMoveField;
            }
            set {
                this.canMoveField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowMove {
            get {
                return this.showMoveField;
            }
            set {
                this.showMoveField = value;
            }
        }
        
        /// <remarks/>
        public bool AlertMeOfChanges {
            get {
                return this.alertMeOfChangesField;
            }
            set {
                this.alertMeOfChangesField = value;
            }
        }
        
        /// <remarks/>
        public bool InheritSecurityPermissions {
            get {
                return this.inheritSecurityPermissionsField;
            }
            set {
                this.inheritSecurityPermissionsField = value;
            }
        }
        
        /// <remarks/>
        public GeneralFolderPermissions GeneralPermissions {
            get {
                return this.generalPermissionsField;
            }
            set {
                this.generalPermissionsField = value;
            }
        }
        
        /// <remarks/>
        public AutoTagging AutoTagging {
            get {
                return this.autoTaggingField;
            }
            set {
                this.autoTaggingField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAutoTagged {
            get {
                return this.isAutoTaggedField;
            }
            set {
                this.isAutoTaggedField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultSchema {
            get {
                return this.defaultSchemaField;
            }
            set {
                this.defaultSchemaField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSchemaInherited {
            get {
                return this.isSchemaInheritedField;
            }
            set {
                this.isSchemaInheritedField = value;
            }
        }
        
        /// <remarks/>
        public string FullPath {
            get {
                return this.fullPathField;
            }
            set {
                this.fullPathField = value;
            }
        }
        
        /// <remarks/>
        public FolderColor Color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public enum FolderColor {
        
        /// <remarks/>
        yellow,
        
        /// <remarks/>
        red,
        
        /// <remarks/>
        green,
        
        /// <remarks/>
        blue,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class Category : LibraryStructureObject {
        
        private Folder[] foldersField;
        
        private int parentDrawerIdField;
        
        private bool canAddFolderField;
        
        private bool showAddFolderField;
        
        private bool canMoveField;
        
        private bool showMoveField;
        
        private bool canSwitchFolderGroupField;
        
        /// <remarks/>
        public Folder[] Folders {
            get {
                return this.foldersField;
            }
            set {
                this.foldersField = value;
            }
        }
        
        /// <remarks/>
        public int ParentDrawerId {
            get {
                return this.parentDrawerIdField;
            }
            set {
                this.parentDrawerIdField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddFolder {
            get {
                return this.canAddFolderField;
            }
            set {
                this.canAddFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowAddFolder {
            get {
                return this.showAddFolderField;
            }
            set {
                this.showAddFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool CanMove {
            get {
                return this.canMoveField;
            }
            set {
                this.canMoveField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowMove {
            get {
                return this.showMoveField;
            }
            set {
                this.showMoveField = value;
            }
        }
        
        /// <remarks/>
        public bool CanSwitchFolderGroup {
            get {
                return this.canSwitchFolderGroupField;
            }
            set {
                this.canSwitchFolderGroupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/librarystructuremanager/")]
    public partial class Drawer : LibraryStructureObject {
        
        private Category[] categoriesField;
        
        private Folder[] foldersField;
        
        private bool canAddFolderField;
        
        private bool showAddFolderField;
        
        private bool canMoveField;
        
        private bool showMoveField;
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public Folder[] Folders {
            get {
                return this.foldersField;
            }
            set {
                this.foldersField = value;
            }
        }
        
        /// <remarks/>
        public bool CanAddFolder {
            get {
                return this.canAddFolderField;
            }
            set {
                this.canAddFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowAddFolder {
            get {
                return this.showAddFolderField;
            }
            set {
                this.showAddFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool CanMove {
            get {
                return this.canMoveField;
            }
            set {
                this.canMoveField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowMove {
            get {
                return this.showMoveField;
            }
            set {
                this.showMoveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTreeStructureCompletedEventHandler(object sender, GetTreeStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTreeStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTreeStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Cabinet[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Cabinet[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetArchiveTreeStructureCompletedEventHandler(object sender, GetArchiveTreeStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchiveTreeStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchiveTreeStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Cabinet[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Cabinet[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTreeStructureWithAllCategoriesCompletedEventHandler(object sender, GetTreeStructureWithAllCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTreeStructureWithAllCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTreeStructureWithAllCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Cabinet[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Cabinet[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetArchiveTreeStructureWithAllCategoriesCompletedEventHandler(object sender, GetArchiveTreeStructureWithAllCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchiveTreeStructureWithAllCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchiveTreeStructureWithAllCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Cabinet[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Cabinet[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCabinetStructureCompletedEventHandler(object sender, GetCabinetStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCabinetStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCabinetStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Cabinet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Cabinet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDrawerStructureCompletedEventHandler(object sender, GetDrawerStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrawerStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrawerStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Drawer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Drawer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCategoryStructureCompletedEventHandler(object sender, GetCategoryStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Category Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Category)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFolderStructureCompletedEventHandler(object sender, GetFolderStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Folder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Folder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetPagedCategoriesForCabinetCountCompletedEventHandler(object sender, GetPagedCategoriesForCabinetCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPagedCategoriesForCabinetCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPagedCategoriesForCabinetCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetPagedCategoriesForCabinetCompletedEventHandler(object sender, GetPagedCategoriesForCabinetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPagedCategoriesForCabinetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPagedCategoriesForCabinetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Category[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Category[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCategoriesForCabinetCompletedEventHandler(object sender, GetCategoriesForCabinetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoriesForCabinetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoriesForCabinetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Category[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Category[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserLibraryObjectsCompletedEventHandler(object sender, GetUserLibraryObjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLibraryObjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLibraryObjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LibraryObjectInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LibraryObjectInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ChangeLibraryObjectsOwnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLibraryObjectsOwnersCompletedEventHandler(object sender, GetLibraryObjectsOwnersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLibraryObjectsOwnersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLibraryObjectsOwnersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ADAMObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ADAMObject[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLibraryObjectsOwnersExCompletedEventHandler(object sender, GetLibraryObjectsOwnersExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLibraryObjectsOwnersExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLibraryObjectsOwnersExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ADAMOwner[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ADAMOwner[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddCabinetCompletedEventHandler(object sender, AddCabinetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCabinetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCabinetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddDrawerCompletedEventHandler(object sender, AddDrawerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDrawerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDrawerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddCategoryCompletedEventHandler(object sender, AddCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FindOrAddCategoryCompletedEventHandler(object sender, FindOrAddCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindOrAddCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindOrAddCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddFolderCompletedEventHandler(object sender, AddFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveCabinetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveDrawerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetFoldersMembershipCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateDrawerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateCabinetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MoveDrawerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MoveCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MoveFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SwitchFolderGroupsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CloneCabinetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CloneDrawerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CloneCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CloneFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CopyCabinetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CopyDrawerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CopyCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CopyFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetBasicUserRolesInScopeCompletedEventHandler(object sender, GetBasicUserRolesInScopeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasicUserRolesInScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBasicUserRolesInScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MemberInRole[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MemberInRole[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAvailableRolesForUsersCompletedEventHandler(object sender, GetAvailableRolesForUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRolesForUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRolesForUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AzRole[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AzRole[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool canBeRestricted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAvailableRolesForUsersInCabinetCompletedEventHandler(object sender, GetAvailableRolesForUsersInCabinetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRolesForUsersInCabinetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRolesForUsersInCabinetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AzRole[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AzRole[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool canBeRestricted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CalculateEligibleMemberObjectsInCabinetCompletedEventHandler(object sender, CalculateEligibleMemberObjectsInCabinetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateEligibleMemberObjectsInCabinetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateEligibleMemberObjectsInCabinetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] eligibleGroupIds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid[] eligibleUserIds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ADAMObject[] usersBelongingDirectly {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ADAMObject[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public System.Guid cabinetOwner {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAvailableFolderOwnersCompletedEventHandler(object sender, GetAvailableFolderOwnersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableFolderOwnersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableFolderOwnersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ADAMObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ADAMObject[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool canAddFolderGroup {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CalculateEffectiveMembersCompletedEventHandler(object sender, CalculateEffectiveMembersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateEffectiveMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateEffectiveMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EffectiveMember[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EffectiveMember[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SaveExpandedNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetExpandedRootsCompletedEventHandler(object sender, GetExpandedRootsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpandedRootsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExpandedRootsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFolderStatisticsCompletedEventHandler(object sender, GetFolderStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LibraryObjectStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LibraryObjectStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFolderGroupStatisticsCompletedEventHandler(object sender, GetFolderGroupStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderGroupStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderGroupStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LibraryObjectStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LibraryObjectStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDrawerStatisticsCompletedEventHandler(object sender, GetDrawerStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrawerStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrawerStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LibraryObjectStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LibraryObjectStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCabinetStatisticsCompletedEventHandler(object sender, GetCabinetStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCabinetStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCabinetStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LibraryObjectStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LibraryObjectStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetWholeLibraryStatisticsCompletedEventHandler(object sender, GetWholeLibraryStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWholeLibraryStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWholeLibraryStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LibraryObjectStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LibraryObjectStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ArchiveCabinetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ArchiveDrawerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ArchiveCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ArchiveFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDrawerWeightCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetCategoryWeightCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetCabinetWeightCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFolderWeightCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFolderPathAndLocationCompletedEventHandler(object sender, GetFolderPathAndLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderPathAndLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderPathAndLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int[] location {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591