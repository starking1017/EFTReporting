//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.RepositoryControllerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RepositoryControllerSoap", Namespace="http://filehold.com/documentrepository/repositorycontroller/")]
    public partial class RepositoryController : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateUploadTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileDataChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileDataChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileDataChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RollbackFileCreationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddStorageLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetStorageLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStorageLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRepositoryLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRepositoryLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRepositoryLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRepositoryLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRepositoryLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRepositoryLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RepositoryController() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_RepositoryControllerService_RepositoryController;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateUploadTokenCompletedEventHandler CreateUploadTokenCompleted;
        
        /// <remarks/>
        public event UploadFileDataChunkCompletedEventHandler UploadFileDataChunkCompleted;
        
        /// <remarks/>
        public event GetFileDataChunkCompletedEventHandler GetFileDataChunkCompleted;
        
        /// <remarks/>
        public event DownloadFileDataChunkCompletedEventHandler DownloadFileDataChunkCompleted;
        
        /// <remarks/>
        public event RollbackFileCreationCompletedEventHandler RollbackFileCreationCompleted;
        
        /// <remarks/>
        public event AddStorageLocationCompletedEventHandler AddStorageLocationCompleted;
        
        /// <remarks/>
        public event SetStorageLocationCompletedEventHandler SetStorageLocationCompleted;
        
        /// <remarks/>
        public event GetStorageLocationCompletedEventHandler GetStorageLocationCompleted;
        
        /// <remarks/>
        public event GetRepositoryLocationsCompletedEventHandler GetRepositoryLocationsCompleted;
        
        /// <remarks/>
        public event GetRepositoryLocationCompletedEventHandler GetRepositoryLocationCompleted;
        
        /// <remarks/>
        public event AddRepositoryLocationCompletedEventHandler AddRepositoryLocationCompleted;
        
        /// <remarks/>
        public event SetRepositoryLocationCompletedEventHandler SetRepositoryLocationCompleted;
        
        /// <remarks/>
        public event CheckRepositoryLocationCompletedEventHandler CheckRepositoryLocationCompleted;
        
        /// <remarks/>
        public event GetLocationStatisticsCompletedEventHandler GetLocationStatisticsCompleted;
        
        /// <remarks/>
        public event DeleteRepositoryLocationCompletedEventHandler DeleteRepositoryLocationCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/CreateUploadToken", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid CreateUploadToken(long fileSize) {
            object[] results = this.Invoke("CreateUploadToken", new object[] {
                        fileSize});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUploadTokenAsync(long fileSize) {
            this.CreateUploadTokenAsync(fileSize, null);
        }
        
        /// <remarks/>
        public void CreateUploadTokenAsync(long fileSize, object userState) {
            if ((this.CreateUploadTokenOperationCompleted == null)) {
                this.CreateUploadTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUploadTokenOperationCompleted);
            }
            this.InvokeAsync("CreateUploadToken", new object[] {
                        fileSize}, this.CreateUploadTokenOperationCompleted, userState);
        }
        
        private void OnCreateUploadTokenOperationCompleted(object arg) {
            if ((this.CreateUploadTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUploadTokenCompleted(this, new CreateUploadTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/UploadFileDataChunk", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFileDataChunk(System.Guid token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] chunk) {
            this.Invoke("UploadFileDataChunk", new object[] {
                        token,
                        chunk});
        }
        
        /// <remarks/>
        public void UploadFileDataChunkAsync(System.Guid token, byte[] chunk) {
            this.UploadFileDataChunkAsync(token, chunk, null);
        }
        
        /// <remarks/>
        public void UploadFileDataChunkAsync(System.Guid token, byte[] chunk, object userState) {
            if ((this.UploadFileDataChunkOperationCompleted == null)) {
                this.UploadFileDataChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileDataChunkOperationCompleted);
            }
            this.InvokeAsync("UploadFileDataChunk", new object[] {
                        token,
                        chunk}, this.UploadFileDataChunkOperationCompleted, userState);
        }
        
        private void OnUploadFileDataChunkOperationCompleted(object arg) {
            if ((this.UploadFileDataChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileDataChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/GetFileDataChunk", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFileDataChunk(System.Guid token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] buffer, long position, int chunkSize) {
            object[] results = this.Invoke("GetFileDataChunk", new object[] {
                        token,
                        buffer,
                        position,
                        chunkSize});
            buffer = ((byte[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileDataChunkAsync(System.Guid token, byte[] buffer, long position, int chunkSize) {
            this.GetFileDataChunkAsync(token, buffer, position, chunkSize, null);
        }
        
        /// <remarks/>
        public void GetFileDataChunkAsync(System.Guid token, byte[] buffer, long position, int chunkSize, object userState) {
            if ((this.GetFileDataChunkOperationCompleted == null)) {
                this.GetFileDataChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileDataChunkOperationCompleted);
            }
            this.InvokeAsync("GetFileDataChunk", new object[] {
                        token,
                        buffer,
                        position,
                        chunkSize}, this.GetFileDataChunkOperationCompleted, userState);
        }
        
        private void OnGetFileDataChunkOperationCompleted(object arg) {
            if ((this.GetFileDataChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileDataChunkCompleted(this, new GetFileDataChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/DownloadFileDataChunk" +
            "", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileDataChunk(System.Guid token, long position, int chunkSize) {
            object[] results = this.Invoke("DownloadFileDataChunk", new object[] {
                        token,
                        position,
                        chunkSize});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileDataChunkAsync(System.Guid token, long position, int chunkSize) {
            this.DownloadFileDataChunkAsync(token, position, chunkSize, null);
        }
        
        /// <remarks/>
        public void DownloadFileDataChunkAsync(System.Guid token, long position, int chunkSize, object userState) {
            if ((this.DownloadFileDataChunkOperationCompleted == null)) {
                this.DownloadFileDataChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileDataChunkOperationCompleted);
            }
            this.InvokeAsync("DownloadFileDataChunk", new object[] {
                        token,
                        position,
                        chunkSize}, this.DownloadFileDataChunkOperationCompleted, userState);
        }
        
        private void OnDownloadFileDataChunkOperationCompleted(object arg) {
            if ((this.DownloadFileDataChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileDataChunkCompleted(this, new DownloadFileDataChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/RollbackFileCreation", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RollbackFileCreation(System.Guid token) {
            this.Invoke("RollbackFileCreation", new object[] {
                        token});
        }
        
        /// <remarks/>
        public void RollbackFileCreationAsync(System.Guid token) {
            this.RollbackFileCreationAsync(token, null);
        }
        
        /// <remarks/>
        public void RollbackFileCreationAsync(System.Guid token, object userState) {
            if ((this.RollbackFileCreationOperationCompleted == null)) {
                this.RollbackFileCreationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRollbackFileCreationOperationCompleted);
            }
            this.InvokeAsync("RollbackFileCreation", new object[] {
                        token}, this.RollbackFileCreationOperationCompleted, userState);
        }
        
        private void OnRollbackFileCreationOperationCompleted(object arg) {
            if ((this.RollbackFileCreationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RollbackFileCreationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/AddStorageLocation", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddStorageLocation(string locationPath) {
            this.Invoke("AddStorageLocation", new object[] {
                        locationPath});
        }
        
        /// <remarks/>
        public void AddStorageLocationAsync(string locationPath) {
            this.AddStorageLocationAsync(locationPath, null);
        }
        
        /// <remarks/>
        public void AddStorageLocationAsync(string locationPath, object userState) {
            if ((this.AddStorageLocationOperationCompleted == null)) {
                this.AddStorageLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddStorageLocationOperationCompleted);
            }
            this.InvokeAsync("AddStorageLocation", new object[] {
                        locationPath}, this.AddStorageLocationOperationCompleted, userState);
        }
        
        private void OnAddStorageLocationOperationCompleted(object arg) {
            if ((this.AddStorageLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddStorageLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/SetStorageLocation", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetStorageLocation(string locationPath) {
            this.Invoke("SetStorageLocation", new object[] {
                        locationPath});
        }
        
        /// <remarks/>
        public void SetStorageLocationAsync(string locationPath) {
            this.SetStorageLocationAsync(locationPath, null);
        }
        
        /// <remarks/>
        public void SetStorageLocationAsync(string locationPath, object userState) {
            if ((this.SetStorageLocationOperationCompleted == null)) {
                this.SetStorageLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetStorageLocationOperationCompleted);
            }
            this.InvokeAsync("SetStorageLocation", new object[] {
                        locationPath}, this.SetStorageLocationOperationCompleted, userState);
        }
        
        private void OnSetStorageLocationOperationCompleted(object arg) {
            if ((this.SetStorageLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetStorageLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/GetStorageLocation", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStorageLocation() {
            object[] results = this.Invoke("GetStorageLocation", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStorageLocationAsync() {
            this.GetStorageLocationAsync(null);
        }
        
        /// <remarks/>
        public void GetStorageLocationAsync(object userState) {
            if ((this.GetStorageLocationOperationCompleted == null)) {
                this.GetStorageLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageLocationOperationCompleted);
            }
            this.InvokeAsync("GetStorageLocation", new object[0], this.GetStorageLocationOperationCompleted, userState);
        }
        
        private void OnGetStorageLocationOperationCompleted(object arg) {
            if ((this.GetStorageLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageLocationCompleted(this, new GetStorageLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/GetRepositoryLocation" +
            "s", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Location[] GetRepositoryLocations() {
            object[] results = this.Invoke("GetRepositoryLocations", new object[0]);
            return ((Location[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRepositoryLocationsAsync() {
            this.GetRepositoryLocationsAsync(null);
        }
        
        /// <remarks/>
        public void GetRepositoryLocationsAsync(object userState) {
            if ((this.GetRepositoryLocationsOperationCompleted == null)) {
                this.GetRepositoryLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoryLocationsOperationCompleted);
            }
            this.InvokeAsync("GetRepositoryLocations", new object[0], this.GetRepositoryLocationsOperationCompleted, userState);
        }
        
        private void OnGetRepositoryLocationsOperationCompleted(object arg) {
            if ((this.GetRepositoryLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRepositoryLocationsCompleted(this, new GetRepositoryLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/GetRepositoryLocation" +
            "", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Location GetRepositoryLocation(int repositoryId) {
            object[] results = this.Invoke("GetRepositoryLocation", new object[] {
                        repositoryId});
            return ((Location)(results[0]));
        }
        
        /// <remarks/>
        public void GetRepositoryLocationAsync(int repositoryId) {
            this.GetRepositoryLocationAsync(repositoryId, null);
        }
        
        /// <remarks/>
        public void GetRepositoryLocationAsync(int repositoryId, object userState) {
            if ((this.GetRepositoryLocationOperationCompleted == null)) {
                this.GetRepositoryLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoryLocationOperationCompleted);
            }
            this.InvokeAsync("GetRepositoryLocation", new object[] {
                        repositoryId}, this.GetRepositoryLocationOperationCompleted, userState);
        }
        
        private void OnGetRepositoryLocationOperationCompleted(object arg) {
            if ((this.GetRepositoryLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRepositoryLocationCompleted(this, new GetRepositoryLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/AddRepositoryLocation" +
            "", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRepositoryLocation(Location repositoryLocation) {
            this.Invoke("AddRepositoryLocation", new object[] {
                        repositoryLocation});
        }
        
        /// <remarks/>
        public void AddRepositoryLocationAsync(Location repositoryLocation) {
            this.AddRepositoryLocationAsync(repositoryLocation, null);
        }
        
        /// <remarks/>
        public void AddRepositoryLocationAsync(Location repositoryLocation, object userState) {
            if ((this.AddRepositoryLocationOperationCompleted == null)) {
                this.AddRepositoryLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRepositoryLocationOperationCompleted);
            }
            this.InvokeAsync("AddRepositoryLocation", new object[] {
                        repositoryLocation}, this.AddRepositoryLocationOperationCompleted, userState);
        }
        
        private void OnAddRepositoryLocationOperationCompleted(object arg) {
            if ((this.AddRepositoryLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRepositoryLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/SetRepositoryLocation" +
            "", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetRepositoryLocation(Location repositoryLocation) {
            this.Invoke("SetRepositoryLocation", new object[] {
                        repositoryLocation});
        }
        
        /// <remarks/>
        public void SetRepositoryLocationAsync(Location repositoryLocation) {
            this.SetRepositoryLocationAsync(repositoryLocation, null);
        }
        
        /// <remarks/>
        public void SetRepositoryLocationAsync(Location repositoryLocation, object userState) {
            if ((this.SetRepositoryLocationOperationCompleted == null)) {
                this.SetRepositoryLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRepositoryLocationOperationCompleted);
            }
            this.InvokeAsync("SetRepositoryLocation", new object[] {
                        repositoryLocation}, this.SetRepositoryLocationOperationCompleted, userState);
        }
        
        private void OnSetRepositoryLocationOperationCompleted(object arg) {
            if ((this.SetRepositoryLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRepositoryLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/CheckRepositoryLocati" +
            "on", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckRepositoryLocation(Location repositoryLocation, bool delete) {
            this.Invoke("CheckRepositoryLocation", new object[] {
                        repositoryLocation,
                        delete});
        }
        
        /// <remarks/>
        public void CheckRepositoryLocationAsync(Location repositoryLocation, bool delete) {
            this.CheckRepositoryLocationAsync(repositoryLocation, delete, null);
        }
        
        /// <remarks/>
        public void CheckRepositoryLocationAsync(Location repositoryLocation, bool delete, object userState) {
            if ((this.CheckRepositoryLocationOperationCompleted == null)) {
                this.CheckRepositoryLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRepositoryLocationOperationCompleted);
            }
            this.InvokeAsync("CheckRepositoryLocation", new object[] {
                        repositoryLocation,
                        delete}, this.CheckRepositoryLocationOperationCompleted, userState);
        }
        
        private void OnCheckRepositoryLocationOperationCompleted(object arg) {
            if ((this.CheckRepositoryLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRepositoryLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/GetLocationStatistics" +
            "", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLocationStatistics(string path, ref long capacity, ref long freespace, ref long defualtThreshold) {
            object[] results = this.Invoke("GetLocationStatistics", new object[] {
                        path,
                        capacity,
                        freespace,
                        defualtThreshold});
            capacity = ((long)(results[0]));
            freespace = ((long)(results[1]));
            defualtThreshold = ((long)(results[2]));
        }
        
        /// <remarks/>
        public void GetLocationStatisticsAsync(string path, long capacity, long freespace, long defualtThreshold) {
            this.GetLocationStatisticsAsync(path, capacity, freespace, defualtThreshold, null);
        }
        
        /// <remarks/>
        public void GetLocationStatisticsAsync(string path, long capacity, long freespace, long defualtThreshold, object userState) {
            if ((this.GetLocationStatisticsOperationCompleted == null)) {
                this.GetLocationStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetLocationStatistics", new object[] {
                        path,
                        capacity,
                        freespace,
                        defualtThreshold}, this.GetLocationStatisticsOperationCompleted, userState);
        }
        
        private void OnGetLocationStatisticsOperationCompleted(object arg) {
            if ((this.GetLocationStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationStatisticsCompleted(this, new GetLocationStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/DeleteRepositoryLocat" +
            "ion", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRepositoryLocation(int repositoryLocationId) {
            this.Invoke("DeleteRepositoryLocation", new object[] {
                        repositoryLocationId});
        }
        
        /// <remarks/>
        public void DeleteRepositoryLocationAsync(int repositoryLocationId) {
            this.DeleteRepositoryLocationAsync(repositoryLocationId, null);
        }
        
        /// <remarks/>
        public void DeleteRepositoryLocationAsync(int repositoryLocationId, object userState) {
            if ((this.DeleteRepositoryLocationOperationCompleted == null)) {
                this.DeleteRepositoryLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRepositoryLocationOperationCompleted);
            }
            this.InvokeAsync("DeleteRepositoryLocation", new object[] {
                        repositoryLocationId}, this.DeleteRepositoryLocationOperationCompleted, userState);
        }
        
        private void OnDeleteRepositoryLocationOperationCompleted(object arg) {
            if ((this.DeleteRepositoryLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRepositoryLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/documentrepository/repositorycontroller/GetFileSize", RequestNamespace="http://filehold.com/documentrepository/repositorycontroller/", ResponseNamespace="http://filehold.com/documentrepository/repositorycontroller/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFileSize(long repFileId) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        repFileId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(long repFileId) {
            this.GetFileSizeAsync(repFileId, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(long repFileId, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        repFileId}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/documentrepository/repositorycontroller/")]
    public partial class Location {
        
        private string pathField;
        
        private int idField;
        
        private bool readOnlyField;
        
        private long freespaceField;
        
        private long capacityField;
        
        private long thresholdField;
        
        private bool canDeleteField;
        
        private int storageFillStateField;
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool ReadOnly {
            get {
                return this.readOnlyField;
            }
            set {
                this.readOnlyField = value;
            }
        }
        
        /// <remarks/>
        public long Freespace {
            get {
                return this.freespaceField;
            }
            set {
                this.freespaceField = value;
            }
        }
        
        /// <remarks/>
        public long Capacity {
            get {
                return this.capacityField;
            }
            set {
                this.capacityField = value;
            }
        }
        
        /// <remarks/>
        public long Threshold {
            get {
                return this.thresholdField;
            }
            set {
                this.thresholdField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public int StorageFillState {
            get {
                return this.storageFillStateField;
            }
            set {
                this.storageFillStateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CreateUploadTokenCompletedEventHandler(object sender, CreateUploadTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUploadTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUploadTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UploadFileDataChunkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFileDataChunkCompletedEventHandler(object sender, GetFileDataChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileDataChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileDataChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] buffer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DownloadFileDataChunkCompletedEventHandler(object sender, DownloadFileDataChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileDataChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileDataChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RollbackFileCreationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddStorageLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetStorageLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetStorageLocationCompletedEventHandler(object sender, GetStorageLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStorageLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetRepositoryLocationsCompletedEventHandler(object sender, GetRepositoryLocationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRepositoryLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRepositoryLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Location[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Location[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetRepositoryLocationCompletedEventHandler(object sender, GetRepositoryLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRepositoryLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRepositoryLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Location Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Location)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddRepositoryLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetRepositoryLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckRepositoryLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLocationStatisticsCompletedEventHandler(object sender, GetLocationStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long capacity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long freespace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public long defualtThreshold {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteRepositoryLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591