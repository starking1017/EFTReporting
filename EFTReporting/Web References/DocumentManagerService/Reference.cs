//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.DocumentManagerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentManagerSoap", Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class DocumentManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDocumentsToDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleDocumentToDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsToCheckInOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareSingleDocumentToDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareSingleDocumentToDownloadByDocumentVersionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUsageLogEntryForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveAndEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyAndEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMultiMetadataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsToSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileExtensionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoveFavouritesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentVersionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailWithDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTSServiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentOwnerGuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLibraryAuditLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvokeUserActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDocumentWithAutoFilingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDocumentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMetadataOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCheckedOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCheckedOutByOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInDocumentsWithNoChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReinstateAsLatestVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeDocumentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertToOfflineOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertToOfflineByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertToElectronicOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeDocumentsOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentVersionNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentNameAndSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAutoTaggingForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAutoTaggingForSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAutoTaggingForFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddShortcutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckShortcutsExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSelectionContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSelectionDeletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSelectionLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAllCanUnArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocumentsInWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsInSchemasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsInSchemaTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSelectionSchemaTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSelectionDocumentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAllCanChangeTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAllCanConvertToElectronicOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocumentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsWithCustomNamingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSelectionDocumentNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetShortcutsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckedOutDocumentsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveWorkflowDocumentsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveWorkflowDocumentsForCheckOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastVisibleVersionsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNotLastVersionsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLockedMarkupDocumentsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSelectionContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBinaryVersionsFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaTypesFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWorkingDocumentSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentSchemaFromSelectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareDocumentsToDownloadOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DocumentManager() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_DocumentManagerService_DocumentManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDocumentsToDownloadCompletedEventHandler GetDocumentsToDownloadCompleted;
        
        /// <remarks/>
        public event GetSingleDocumentToDownloadCompletedEventHandler GetSingleDocumentToDownloadCompleted;
        
        /// <remarks/>
        public event GetDocumentsToCheckInCompletedEventHandler GetDocumentsToCheckInCompleted;
        
        /// <remarks/>
        public event PrepareSingleDocumentToDownloadCompletedEventHandler PrepareSingleDocumentToDownloadCompleted;
        
        /// <remarks/>
        public event PrepareSingleDocumentToDownloadByDocumentVersionIdCompletedEventHandler PrepareSingleDocumentToDownloadByDocumentVersionIdCompleted;
        
        /// <remarks/>
        public event AddUsageLogEntryForDocumentCompletedEventHandler AddUsageLogEntryForDocumentCompleted;
        
        /// <remarks/>
        public event CheckOutDocumentsCompletedEventHandler CheckOutDocumentsCompleted;
        
        /// <remarks/>
        public event MoveCompletedEventHandler MoveCompleted;
        
        /// <remarks/>
        public event MoveAndEditCompletedEventHandler MoveAndEditCompleted;
        
        /// <remarks/>
        public event CopyCompletedEventHandler CopyCompleted;
        
        /// <remarks/>
        public event CopyAndEditCompletedEventHandler CopyAndEditCompleted;
        
        /// <remarks/>
        public event AddLinksCompletedEventHandler AddLinksCompleted;
        
        /// <remarks/>
        public event RemoveLinksCompletedEventHandler RemoveLinksCompleted;
        
        /// <remarks/>
        public event RecoverCompletedEventHandler RecoverCompleted;
        
        /// <remarks/>
        public event SetMultiMetadataCompletedEventHandler SetMultiMetadataCompleted;
        
        /// <remarks/>
        public event GetDocumentsToSendCompletedEventHandler GetDocumentsToSendCompleted;
        
        /// <remarks/>
        public event GetFileExtensionsCompletedEventHandler GetFileExtensionsCompleted;
        
        /// <remarks/>
        public event AddRemoveFavouritesCompletedEventHandler AddRemoveFavouritesCompleted;
        
        /// <remarks/>
        public event GetDocumentIdCompletedEventHandler GetDocumentIdCompleted;
        
        /// <remarks/>
        public event GetDocumentVersionIdCompletedEventHandler GetDocumentVersionIdCompleted;
        
        /// <remarks/>
        public event SendEmailWithDocumentsCompletedEventHandler SendEmailWithDocumentsCompleted;
        
        /// <remarks/>
        public event GetDocumentUrlCompletedEventHandler GetDocumentUrlCompleted;
        
        /// <remarks/>
        public event GetDocumentLinkCompletedEventHandler GetDocumentLinkCompleted;
        
        /// <remarks/>
        public event GetFTSServiceStatusCompletedEventHandler GetFTSServiceStatusCompleted;
        
        /// <remarks/>
        public event GetDocumentOwnerGuidCompletedEventHandler GetDocumentOwnerGuidCompleted;
        
        /// <remarks/>
        public event GetLibraryAuditLogsCompletedEventHandler GetLibraryAuditLogsCompleted;
        
        /// <remarks/>
        public event InvokeUserActionCompletedEventHandler InvokeUserActionCompleted;
        
        /// <remarks/>
        public event AddDocumentCompletedEventHandler AddDocumentCompleted;
        
        /// <remarks/>
        public event AddDocumentWithAutoFilingCompletedEventHandler AddDocumentWithAutoFilingCompleted;
        
        /// <remarks/>
        public event AddDocumentInfoCompletedEventHandler AddDocumentInfoCompleted;
        
        /// <remarks/>
        public event SetMetadataCompletedEventHandler SetMetadataCompleted;
        
        /// <remarks/>
        public event IsCheckedOutCompletedEventHandler IsCheckedOutCompleted;
        
        /// <remarks/>
        public event IsCheckedOutByCompletedEventHandler IsCheckedOutByCompleted;
        
        /// <remarks/>
        public event CheckInDocumentsWithNoChangesCompletedEventHandler CheckInDocumentsWithNoChangesCompleted;
        
        /// <remarks/>
        public event CheckInCompletedEventHandler CheckInCompleted;
        
        /// <remarks/>
        public event ReinstateAsLatestVersionCompletedEventHandler ReinstateAsLatestVersionCompleted;
        
        /// <remarks/>
        public event ChangeDocumentTypeCompletedEventHandler ChangeDocumentTypeCompleted;
        
        /// <remarks/>
        public event ChangeTypeCompletedEventHandler ChangeTypeCompleted;
        
        /// <remarks/>
        public event ConvertToOfflineCompletedEventHandler ConvertToOfflineCompleted;
        
        /// <remarks/>
        public event ConvertToOfflineByIdCompletedEventHandler ConvertToOfflineByIdCompleted;
        
        /// <remarks/>
        public event ConvertToElectronicCompletedEventHandler ConvertToElectronicCompleted;
        
        /// <remarks/>
        public event ChangeDocumentsOwnerCompletedEventHandler ChangeDocumentsOwnerCompleted;
        
        /// <remarks/>
        public event GetDocumentNameCompletedEventHandler GetDocumentNameCompleted;
        
        /// <remarks/>
        public event GetDocumentVersionNameCompletedEventHandler GetDocumentVersionNameCompleted;
        
        /// <remarks/>
        public event GetDocumentNameAndSchemaCompletedEventHandler GetDocumentNameAndSchemaCompleted;
        
        /// <remarks/>
        public event GetDocumentLocationCompletedEventHandler GetDocumentLocationCompleted;
        
        /// <remarks/>
        public event GetAutoTaggingForDocumentCompletedEventHandler GetAutoTaggingForDocumentCompleted;
        
        /// <remarks/>
        public event GetAutoTaggingForSelectionCompletedEventHandler GetAutoTaggingForSelectionCompleted;
        
        /// <remarks/>
        public event GetAutoTaggingForFoldersCompletedEventHandler GetAutoTaggingForFoldersCompleted;
        
        /// <remarks/>
        public event ArchiveCompletedEventHandler ArchiveCompleted;
        
        /// <remarks/>
        public event AddShortcutCompletedEventHandler AddShortcutCompleted;
        
        /// <remarks/>
        public event CheckShortcutsExistCompletedEventHandler CheckShortcutsExistCompleted;
        
        /// <remarks/>
        public event CreateSelectionCompletedEventHandler CreateSelectionCompleted;
        
        /// <remarks/>
        public event CheckSelectionContentCompletedEventHandler CheckSelectionContentCompleted;
        
        /// <remarks/>
        public event CheckSelectionDeletedCompletedEventHandler CheckSelectionDeletedCompleted;
        
        /// <remarks/>
        public event CheckSelectionLocationCompletedEventHandler CheckSelectionLocationCompleted;
        
        /// <remarks/>
        public event CheckAllCanUnArchiveCompletedEventHandler CheckAllCanUnArchiveCompleted;
        
        /// <remarks/>
        public event CheckDocumentsInWorkflowCompletedEventHandler CheckDocumentsInWorkflowCompleted;
        
        /// <remarks/>
        public event GetDocumentsInSchemasCompletedEventHandler GetDocumentsInSchemasCompleted;
        
        /// <remarks/>
        public event GetDocumentsInSchemaTypeCompletedEventHandler GetDocumentsInSchemaTypeCompleted;
        
        /// <remarks/>
        public event CheckSelectionSchemaTypeCompletedEventHandler CheckSelectionSchemaTypeCompleted;
        
        /// <remarks/>
        public event CheckSelectionDocumentTypeCompletedEventHandler CheckSelectionDocumentTypeCompleted;
        
        /// <remarks/>
        public event CheckAllCanChangeTypeCompletedEventHandler CheckAllCanChangeTypeCompleted;
        
        /// <remarks/>
        public event CheckAllCanConvertToElectronicCompletedEventHandler CheckAllCanConvertToElectronicCompleted;
        
        /// <remarks/>
        public event CheckDocumentTypeCompletedEventHandler CheckDocumentTypeCompleted;
        
        /// <remarks/>
        public event GetDocumentsWithCustomNamingCompletedEventHandler GetDocumentsWithCustomNamingCompleted;
        
        /// <remarks/>
        public event CheckSelectionDocumentNumberCompletedEventHandler CheckSelectionDocumentNumberCompleted;
        
        /// <remarks/>
        public event RemoveSelectionCompletedEventHandler RemoveSelectionCompleted;
        
        /// <remarks/>
        public event GetShortcutsFromSelectionCompletedEventHandler GetShortcutsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetCheckedOutDocumentsFromSelectionCompletedEventHandler GetCheckedOutDocumentsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetActiveWorkflowDocumentsFromSelectionCompletedEventHandler GetActiveWorkflowDocumentsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetActiveWorkflowDocumentsForCheckOutCompletedEventHandler GetActiveWorkflowDocumentsForCheckOutCompleted;
        
        /// <remarks/>
        public event GetLastVisibleVersionsFromSelectionCompletedEventHandler GetLastVisibleVersionsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetNotLastVersionsFromSelectionCompletedEventHandler GetNotLastVersionsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetLockedMarkupDocumentsFromSelectionCompletedEventHandler GetLockedMarkupDocumentsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetSelectionContentCompletedEventHandler GetSelectionContentCompleted;
        
        /// <remarks/>
        public event GetBinaryVersionsFromSelectionCompletedEventHandler GetBinaryVersionsFromSelectionCompleted;
        
        /// <remarks/>
        public event GetSchemaTypesFromSelectionCompletedEventHandler GetSchemaTypesFromSelectionCompleted;
        
        /// <remarks/>
        public event CreateWorkingDocumentSelectionCompletedEventHandler CreateWorkingDocumentSelectionCompleted;
        
        /// <remarks/>
        public event GetDocumentSchemaFromSelectionCompletedEventHandler GetDocumentSchemaFromSelectionCompleted;
        
        /// <remarks/>
        public event DeleteDocumentsCompletedEventHandler DeleteDocumentsCompleted;
        
        /// <remarks/>
        public event PrepareDocumentsToDownloadCompletedEventHandler PrepareDocumentsToDownloadCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentsToDownload", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DownloadDocument[] GetDocumentsToDownload(System.Guid selectionId, bool includeShortcuts, bool checkingOut) {
            object[] results = this.Invoke("GetDocumentsToDownload", new object[] {
                        selectionId,
                        includeShortcuts,
                        checkingOut});
            return ((DownloadDocument[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsToDownloadAsync(System.Guid selectionId, bool includeShortcuts, bool checkingOut) {
            this.GetDocumentsToDownloadAsync(selectionId, includeShortcuts, checkingOut, null);
        }
        
        /// <remarks/>
        public void GetDocumentsToDownloadAsync(System.Guid selectionId, bool includeShortcuts, bool checkingOut, object userState) {
            if ((this.GetDocumentsToDownloadOperationCompleted == null)) {
                this.GetDocumentsToDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsToDownloadOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsToDownload", new object[] {
                        selectionId,
                        includeShortcuts,
                        checkingOut}, this.GetDocumentsToDownloadOperationCompleted, userState);
        }
        
        private void OnGetDocumentsToDownloadOperationCompleted(object arg) {
            if ((this.GetDocumentsToDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsToDownloadCompleted(this, new GetDocumentsToDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetSingleDocumentToDownload", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DownloadDocument GetSingleDocumentToDownload(int metadataVersionId) {
            object[] results = this.Invoke("GetSingleDocumentToDownload", new object[] {
                        metadataVersionId});
            return ((DownloadDocument)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleDocumentToDownloadAsync(int metadataVersionId) {
            this.GetSingleDocumentToDownloadAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetSingleDocumentToDownloadAsync(int metadataVersionId, object userState) {
            if ((this.GetSingleDocumentToDownloadOperationCompleted == null)) {
                this.GetSingleDocumentToDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleDocumentToDownloadOperationCompleted);
            }
            this.InvokeAsync("GetSingleDocumentToDownload", new object[] {
                        metadataVersionId}, this.GetSingleDocumentToDownloadOperationCompleted, userState);
        }
        
        private void OnGetSingleDocumentToDownloadOperationCompleted(object arg) {
            if ((this.GetSingleDocumentToDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleDocumentToDownloadCompleted(this, new GetSingleDocumentToDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentsToCheckIn", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DownloadDocument[] GetDocumentsToCheckIn(System.Guid selectionId) {
            object[] results = this.Invoke("GetDocumentsToCheckIn", new object[] {
                        selectionId});
            return ((DownloadDocument[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsToCheckInAsync(System.Guid selectionId) {
            this.GetDocumentsToCheckInAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentsToCheckInAsync(System.Guid selectionId, object userState) {
            if ((this.GetDocumentsToCheckInOperationCompleted == null)) {
                this.GetDocumentsToCheckInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsToCheckInOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsToCheckIn", new object[] {
                        selectionId}, this.GetDocumentsToCheckInOperationCompleted, userState);
        }
        
        private void OnGetDocumentsToCheckInOperationCompleted(object arg) {
            if ((this.GetDocumentsToCheckInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsToCheckInCompleted(this, new GetDocumentsToCheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/PrepareSingleDocumentToDownloa" +
            "d", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PrepareSingleDocumentToDownload(int metadataVersionId, ref System.Guid token, ref long fileSize, ref string fileName, ActionType actionType) {
            object[] results = this.Invoke("PrepareSingleDocumentToDownload", new object[] {
                        metadataVersionId,
                        token,
                        fileSize,
                        fileName,
                        actionType});
            token = ((System.Guid)(results[0]));
            fileSize = ((long)(results[1]));
            fileName = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void PrepareSingleDocumentToDownloadAsync(int metadataVersionId, System.Guid token, long fileSize, string fileName, ActionType actionType) {
            this.PrepareSingleDocumentToDownloadAsync(metadataVersionId, token, fileSize, fileName, actionType, null);
        }
        
        /// <remarks/>
        public void PrepareSingleDocumentToDownloadAsync(int metadataVersionId, System.Guid token, long fileSize, string fileName, ActionType actionType, object userState) {
            if ((this.PrepareSingleDocumentToDownloadOperationCompleted == null)) {
                this.PrepareSingleDocumentToDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareSingleDocumentToDownloadOperationCompleted);
            }
            this.InvokeAsync("PrepareSingleDocumentToDownload", new object[] {
                        metadataVersionId,
                        token,
                        fileSize,
                        fileName,
                        actionType}, this.PrepareSingleDocumentToDownloadOperationCompleted, userState);
        }
        
        private void OnPrepareSingleDocumentToDownloadOperationCompleted(object arg) {
            if ((this.PrepareSingleDocumentToDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareSingleDocumentToDownloadCompleted(this, new PrepareSingleDocumentToDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/PrepareSingleDocumentToDownloa" +
            "dByDocumentVersionId", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PrepareSingleDocumentToDownloadByDocumentVersionId(int documentVersionId, ref System.Guid token, ref long fileSize, ref string fileName, ActionType actionType) {
            object[] results = this.Invoke("PrepareSingleDocumentToDownloadByDocumentVersionId", new object[] {
                        documentVersionId,
                        token,
                        fileSize,
                        fileName,
                        actionType});
            token = ((System.Guid)(results[0]));
            fileSize = ((long)(results[1]));
            fileName = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void PrepareSingleDocumentToDownloadByDocumentVersionIdAsync(int documentVersionId, System.Guid token, long fileSize, string fileName, ActionType actionType) {
            this.PrepareSingleDocumentToDownloadByDocumentVersionIdAsync(documentVersionId, token, fileSize, fileName, actionType, null);
        }
        
        /// <remarks/>
        public void PrepareSingleDocumentToDownloadByDocumentVersionIdAsync(int documentVersionId, System.Guid token, long fileSize, string fileName, ActionType actionType, object userState) {
            if ((this.PrepareSingleDocumentToDownloadByDocumentVersionIdOperationCompleted == null)) {
                this.PrepareSingleDocumentToDownloadByDocumentVersionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareSingleDocumentToDownloadByDocumentVersionIdOperationCompleted);
            }
            this.InvokeAsync("PrepareSingleDocumentToDownloadByDocumentVersionId", new object[] {
                        documentVersionId,
                        token,
                        fileSize,
                        fileName,
                        actionType}, this.PrepareSingleDocumentToDownloadByDocumentVersionIdOperationCompleted, userState);
        }
        
        private void OnPrepareSingleDocumentToDownloadByDocumentVersionIdOperationCompleted(object arg) {
            if ((this.PrepareSingleDocumentToDownloadByDocumentVersionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareSingleDocumentToDownloadByDocumentVersionIdCompleted(this, new PrepareSingleDocumentToDownloadByDocumentVersionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddUsageLogEntryForDocument", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUsageLogEntryForDocument(int metadataVersionId, ActionType actionType) {
            this.Invoke("AddUsageLogEntryForDocument", new object[] {
                        metadataVersionId,
                        actionType});
        }
        
        /// <remarks/>
        public void AddUsageLogEntryForDocumentAsync(int metadataVersionId, ActionType actionType) {
            this.AddUsageLogEntryForDocumentAsync(metadataVersionId, actionType, null);
        }
        
        /// <remarks/>
        public void AddUsageLogEntryForDocumentAsync(int metadataVersionId, ActionType actionType, object userState) {
            if ((this.AddUsageLogEntryForDocumentOperationCompleted == null)) {
                this.AddUsageLogEntryForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUsageLogEntryForDocumentOperationCompleted);
            }
            this.InvokeAsync("AddUsageLogEntryForDocument", new object[] {
                        metadataVersionId,
                        actionType}, this.AddUsageLogEntryForDocumentOperationCompleted, userState);
        }
        
        private void OnAddUsageLogEntryForDocumentOperationCompleted(object arg) {
            if ((this.AddUsageLogEntryForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUsageLogEntryForDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckOutDocuments", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckOutDocuments(System.Guid selectionId, bool includeShortcuts) {
            this.Invoke("CheckOutDocuments", new object[] {
                        selectionId,
                        includeShortcuts});
        }
        
        /// <remarks/>
        public void CheckOutDocumentsAsync(System.Guid selectionId, bool includeShortcuts) {
            this.CheckOutDocumentsAsync(selectionId, includeShortcuts, null);
        }
        
        /// <remarks/>
        public void CheckOutDocumentsAsync(System.Guid selectionId, bool includeShortcuts, object userState) {
            if ((this.CheckOutDocumentsOperationCompleted == null)) {
                this.CheckOutDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutDocumentsOperationCompleted);
            }
            this.InvokeAsync("CheckOutDocuments", new object[] {
                        selectionId,
                        includeShortcuts}, this.CheckOutDocumentsOperationCompleted, userState);
        }
        
        private void OnCheckOutDocumentsOperationCompleted(object arg) {
            if ((this.CheckOutDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutDocumentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/Move", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Move(System.Guid selectionId, int destinationFolderId) {
            object[] results = this.Invoke("Move", new object[] {
                        selectionId,
                        destinationFolderId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MoveAsync(System.Guid selectionId, int destinationFolderId) {
            this.MoveAsync(selectionId, destinationFolderId, null);
        }
        
        /// <remarks/>
        public void MoveAsync(System.Guid selectionId, int destinationFolderId, object userState) {
            if ((this.MoveOperationCompleted == null)) {
                this.MoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveOperationCompleted);
            }
            this.InvokeAsync("Move", new object[] {
                        selectionId,
                        destinationFolderId}, this.MoveOperationCompleted, userState);
        }
        
        private void OnMoveOperationCompleted(object arg) {
            if ((this.MoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveCompleted(this, new MoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/MoveAndEdit", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MoveAndEdit(System.Guid selectionId, int destinationFolderId, int documentSchemaId, FieldWithValue[] fieldsWithValues) {
            object[] results = this.Invoke("MoveAndEdit", new object[] {
                        selectionId,
                        destinationFolderId,
                        documentSchemaId,
                        fieldsWithValues});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MoveAndEditAsync(System.Guid selectionId, int destinationFolderId, int documentSchemaId, FieldWithValue[] fieldsWithValues) {
            this.MoveAndEditAsync(selectionId, destinationFolderId, documentSchemaId, fieldsWithValues, null);
        }
        
        /// <remarks/>
        public void MoveAndEditAsync(System.Guid selectionId, int destinationFolderId, int documentSchemaId, FieldWithValue[] fieldsWithValues, object userState) {
            if ((this.MoveAndEditOperationCompleted == null)) {
                this.MoveAndEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveAndEditOperationCompleted);
            }
            this.InvokeAsync("MoveAndEdit", new object[] {
                        selectionId,
                        destinationFolderId,
                        documentSchemaId,
                        fieldsWithValues}, this.MoveAndEditOperationCompleted, userState);
        }
        
        private void OnMoveAndEditOperationCompleted(object arg) {
            if ((this.MoveAndEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveAndEditCompleted(this, new MoveAndEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/Copy", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Copy(System.Guid selectionId, int destinationFolderId, string documentNumber) {
            this.Invoke("Copy", new object[] {
                        selectionId,
                        destinationFolderId,
                        documentNumber});
        }
        
        /// <remarks/>
        public void CopyAsync(System.Guid selectionId, int destinationFolderId, string documentNumber) {
            this.CopyAsync(selectionId, destinationFolderId, documentNumber, null);
        }
        
        /// <remarks/>
        public void CopyAsync(System.Guid selectionId, int destinationFolderId, string documentNumber, object userState) {
            if ((this.CopyOperationCompleted == null)) {
                this.CopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyOperationCompleted);
            }
            this.InvokeAsync("Copy", new object[] {
                        selectionId,
                        destinationFolderId,
                        documentNumber}, this.CopyOperationCompleted, userState);
        }
        
        private void OnCopyOperationCompleted(object arg) {
            if ((this.CopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CopyAndEdit", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CopyAndEdit(System.Guid selectionId, int destinationFolderId, int documentSchemaId, FieldWithValue[] fieldsWithValues, string documentNumber) {
            this.Invoke("CopyAndEdit", new object[] {
                        selectionId,
                        destinationFolderId,
                        documentSchemaId,
                        fieldsWithValues,
                        documentNumber});
        }
        
        /// <remarks/>
        public void CopyAndEditAsync(System.Guid selectionId, int destinationFolderId, int documentSchemaId, FieldWithValue[] fieldsWithValues, string documentNumber) {
            this.CopyAndEditAsync(selectionId, destinationFolderId, documentSchemaId, fieldsWithValues, documentNumber, null);
        }
        
        /// <remarks/>
        public void CopyAndEditAsync(System.Guid selectionId, int destinationFolderId, int documentSchemaId, FieldWithValue[] fieldsWithValues, string documentNumber, object userState) {
            if ((this.CopyAndEditOperationCompleted == null)) {
                this.CopyAndEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyAndEditOperationCompleted);
            }
            this.InvokeAsync("CopyAndEdit", new object[] {
                        selectionId,
                        destinationFolderId,
                        documentSchemaId,
                        fieldsWithValues,
                        documentNumber}, this.CopyAndEditOperationCompleted, userState);
        }
        
        private void OnCopyAndEditOperationCompleted(object arg) {
            if ((this.CopyAndEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyAndEditCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddLinks", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddLinks(System.Guid selectionId, int fromDocumentId) {
            this.Invoke("AddLinks", new object[] {
                        selectionId,
                        fromDocumentId});
        }
        
        /// <remarks/>
        public void AddLinksAsync(System.Guid selectionId, int fromDocumentId) {
            this.AddLinksAsync(selectionId, fromDocumentId, null);
        }
        
        /// <remarks/>
        public void AddLinksAsync(System.Guid selectionId, int fromDocumentId, object userState) {
            if ((this.AddLinksOperationCompleted == null)) {
                this.AddLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLinksOperationCompleted);
            }
            this.InvokeAsync("AddLinks", new object[] {
                        selectionId,
                        fromDocumentId}, this.AddLinksOperationCompleted, userState);
        }
        
        private void OnAddLinksOperationCompleted(object arg) {
            if ((this.AddLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLinksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/RemoveLinks", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveLinks(System.Guid selectionId, int fromDocumentId) {
            this.Invoke("RemoveLinks", new object[] {
                        selectionId,
                        fromDocumentId});
        }
        
        /// <remarks/>
        public void RemoveLinksAsync(System.Guid selectionId, int fromDocumentId) {
            this.RemoveLinksAsync(selectionId, fromDocumentId, null);
        }
        
        /// <remarks/>
        public void RemoveLinksAsync(System.Guid selectionId, int fromDocumentId, object userState) {
            if ((this.RemoveLinksOperationCompleted == null)) {
                this.RemoveLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveLinksOperationCompleted);
            }
            this.InvokeAsync("RemoveLinks", new object[] {
                        selectionId,
                        fromDocumentId}, this.RemoveLinksOperationCompleted, userState);
        }
        
        private void OnRemoveLinksOperationCompleted(object arg) {
            if ((this.RemoveLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveLinksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/Recover", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Recover(System.Guid selectionId) {
            this.Invoke("Recover", new object[] {
                        selectionId});
        }
        
        /// <remarks/>
        public void RecoverAsync(System.Guid selectionId) {
            this.RecoverAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void RecoverAsync(System.Guid selectionId, object userState) {
            if ((this.RecoverOperationCompleted == null)) {
                this.RecoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecoverOperationCompleted);
            }
            this.InvokeAsync("Recover", new object[] {
                        selectionId}, this.RecoverOperationCompleted, userState);
        }
        
        private void OnRecoverOperationCompleted(object arg) {
            if ((this.RecoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecoverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/SetMultiMetadata", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMultiMetadata(System.Guid selectionId, int documentSchemaId, FieldWithValue[] fieldsWithValues) {
            this.Invoke("SetMultiMetadata", new object[] {
                        selectionId,
                        documentSchemaId,
                        fieldsWithValues});
        }
        
        /// <remarks/>
        public void SetMultiMetadataAsync(System.Guid selectionId, int documentSchemaId, FieldWithValue[] fieldsWithValues) {
            this.SetMultiMetadataAsync(selectionId, documentSchemaId, fieldsWithValues, null);
        }
        
        /// <remarks/>
        public void SetMultiMetadataAsync(System.Guid selectionId, int documentSchemaId, FieldWithValue[] fieldsWithValues, object userState) {
            if ((this.SetMultiMetadataOperationCompleted == null)) {
                this.SetMultiMetadataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMultiMetadataOperationCompleted);
            }
            this.InvokeAsync("SetMultiMetadata", new object[] {
                        selectionId,
                        documentSchemaId,
                        fieldsWithValues}, this.SetMultiMetadataOperationCompleted, userState);
        }
        
        private void OnSetMultiMetadataOperationCompleted(object arg) {
            if ((this.SetMultiMetadataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMultiMetadataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentsToSend", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmailDocumentInfo[] GetDocumentsToSend(System.Guid selectionId) {
            object[] results = this.Invoke("GetDocumentsToSend", new object[] {
                        selectionId});
            return ((EmailDocumentInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsToSendAsync(System.Guid selectionId) {
            this.GetDocumentsToSendAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentsToSendAsync(System.Guid selectionId, object userState) {
            if ((this.GetDocumentsToSendOperationCompleted == null)) {
                this.GetDocumentsToSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsToSendOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsToSend", new object[] {
                        selectionId}, this.GetDocumentsToSendOperationCompleted, userState);
        }
        
        private void OnGetDocumentsToSendOperationCompleted(object arg) {
            if ((this.GetDocumentsToSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsToSendCompleted(this, new GetDocumentsToSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetFileExtensions", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileExtension[] GetFileExtensions() {
            object[] results = this.Invoke("GetFileExtensions", new object[0]);
            return ((FileExtension[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileExtensionsAsync() {
            this.GetFileExtensionsAsync(null);
        }
        
        /// <remarks/>
        public void GetFileExtensionsAsync(object userState) {
            if ((this.GetFileExtensionsOperationCompleted == null)) {
                this.GetFileExtensionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileExtensionsOperationCompleted);
            }
            this.InvokeAsync("GetFileExtensions", new object[0], this.GetFileExtensionsOperationCompleted, userState);
        }
        
        private void OnGetFileExtensionsOperationCompleted(object arg) {
            if ((this.GetFileExtensionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileExtensionsCompleted(this, new GetFileExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddRemoveFavourites", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRemoveFavourites(int documentId, bool removeDocumentFromFavourites) {
            this.Invoke("AddRemoveFavourites", new object[] {
                        documentId,
                        removeDocumentFromFavourites});
        }
        
        /// <remarks/>
        public void AddRemoveFavouritesAsync(int documentId, bool removeDocumentFromFavourites) {
            this.AddRemoveFavouritesAsync(documentId, removeDocumentFromFavourites, null);
        }
        
        /// <remarks/>
        public void AddRemoveFavouritesAsync(int documentId, bool removeDocumentFromFavourites, object userState) {
            if ((this.AddRemoveFavouritesOperationCompleted == null)) {
                this.AddRemoveFavouritesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoveFavouritesOperationCompleted);
            }
            this.InvokeAsync("AddRemoveFavourites", new object[] {
                        documentId,
                        removeDocumentFromFavourites}, this.AddRemoveFavouritesOperationCompleted, userState);
        }
        
        private void OnAddRemoveFavouritesOperationCompleted(object arg) {
            if ((this.AddRemoveFavouritesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoveFavouritesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentId", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocumentId(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentId", new object[] {
                        metadataVersionId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentIdAsync(int metadataVersionId) {
            this.GetDocumentIdAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentIdAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentIdOperationCompleted == null)) {
                this.GetDocumentIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentIdOperationCompleted);
            }
            this.InvokeAsync("GetDocumentId", new object[] {
                        metadataVersionId}, this.GetDocumentIdOperationCompleted, userState);
        }
        
        private void OnGetDocumentIdOperationCompleted(object arg) {
            if ((this.GetDocumentIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentIdCompleted(this, new GetDocumentIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentVersionId", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocumentVersionId(int documentId, int documentVersion) {
            object[] results = this.Invoke("GetDocumentVersionId", new object[] {
                        documentId,
                        documentVersion});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentVersionIdAsync(int documentId, int documentVersion) {
            this.GetDocumentVersionIdAsync(documentId, documentVersion, null);
        }
        
        /// <remarks/>
        public void GetDocumentVersionIdAsync(int documentId, int documentVersion, object userState) {
            if ((this.GetDocumentVersionIdOperationCompleted == null)) {
                this.GetDocumentVersionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentVersionIdOperationCompleted);
            }
            this.InvokeAsync("GetDocumentVersionId", new object[] {
                        documentId,
                        documentVersion}, this.GetDocumentVersionIdOperationCompleted, userState);
        }
        
        private void OnGetDocumentVersionIdOperationCompleted(object arg) {
            if ((this.GetDocumentVersionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentVersionIdCompleted(this, new GetDocumentVersionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/SendEmailWithDocuments", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendEmailWithDocuments(string to, string cc, string bcc, string subject, string body, int[] metadataVersionIds, int[] markupIds, bool links, string languageName) {
            object[] results = this.Invoke("SendEmailWithDocuments", new object[] {
                        to,
                        cc,
                        bcc,
                        subject,
                        body,
                        metadataVersionIds,
                        markupIds,
                        links,
                        languageName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailWithDocumentsAsync(string to, string cc, string bcc, string subject, string body, int[] metadataVersionIds, int[] markupIds, bool links, string languageName) {
            this.SendEmailWithDocumentsAsync(to, cc, bcc, subject, body, metadataVersionIds, markupIds, links, languageName, null);
        }
        
        /// <remarks/>
        public void SendEmailWithDocumentsAsync(string to, string cc, string bcc, string subject, string body, int[] metadataVersionIds, int[] markupIds, bool links, string languageName, object userState) {
            if ((this.SendEmailWithDocumentsOperationCompleted == null)) {
                this.SendEmailWithDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailWithDocumentsOperationCompleted);
            }
            this.InvokeAsync("SendEmailWithDocuments", new object[] {
                        to,
                        cc,
                        bcc,
                        subject,
                        body,
                        metadataVersionIds,
                        markupIds,
                        links,
                        languageName}, this.SendEmailWithDocumentsOperationCompleted, userState);
        }
        
        private void OnSendEmailWithDocumentsOperationCompleted(object arg) {
            if ((this.SendEmailWithDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailWithDocumentsCompleted(this, new SendEmailWithDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentUrl", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentUrl(int documentID) {
            object[] results = this.Invoke("GetDocumentUrl", new object[] {
                        documentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentUrlAsync(int documentID) {
            this.GetDocumentUrlAsync(documentID, null);
        }
        
        /// <remarks/>
        public void GetDocumentUrlAsync(int documentID, object userState) {
            if ((this.GetDocumentUrlOperationCompleted == null)) {
                this.GetDocumentUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentUrlOperationCompleted);
            }
            this.InvokeAsync("GetDocumentUrl", new object[] {
                        documentID}, this.GetDocumentUrlOperationCompleted, userState);
        }
        
        private void OnGetDocumentUrlOperationCompleted(object arg) {
            if ((this.GetDocumentUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentUrlCompleted(this, new GetDocumentUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentLink", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentLink(int documentID, bool forFDA) {
            object[] results = this.Invoke("GetDocumentLink", new object[] {
                        documentID,
                        forFDA});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentLinkAsync(int documentID, bool forFDA) {
            this.GetDocumentLinkAsync(documentID, forFDA, null);
        }
        
        /// <remarks/>
        public void GetDocumentLinkAsync(int documentID, bool forFDA, object userState) {
            if ((this.GetDocumentLinkOperationCompleted == null)) {
                this.GetDocumentLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentLinkOperationCompleted);
            }
            this.InvokeAsync("GetDocumentLink", new object[] {
                        documentID,
                        forFDA}, this.GetDocumentLinkOperationCompleted, userState);
        }
        
        private void OnGetDocumentLinkOperationCompleted(object arg) {
            if ((this.GetDocumentLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentLinkCompleted(this, new GetDocumentLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetFTSServiceStatus", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTSServiceStatus GetFTSServiceStatus() {
            object[] results = this.Invoke("GetFTSServiceStatus", new object[0]);
            return ((FTSServiceStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTSServiceStatusAsync() {
            this.GetFTSServiceStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetFTSServiceStatusAsync(object userState) {
            if ((this.GetFTSServiceStatusOperationCompleted == null)) {
                this.GetFTSServiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTSServiceStatusOperationCompleted);
            }
            this.InvokeAsync("GetFTSServiceStatus", new object[0], this.GetFTSServiceStatusOperationCompleted, userState);
        }
        
        private void OnGetFTSServiceStatusOperationCompleted(object arg) {
            if ((this.GetFTSServiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTSServiceStatusCompleted(this, new GetFTSServiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentOwnerGuid", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid GetDocumentOwnerGuid(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentOwnerGuid", new object[] {
                        metadataVersionId});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentOwnerGuidAsync(int metadataVersionId) {
            this.GetDocumentOwnerGuidAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentOwnerGuidAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentOwnerGuidOperationCompleted == null)) {
                this.GetDocumentOwnerGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentOwnerGuidOperationCompleted);
            }
            this.InvokeAsync("GetDocumentOwnerGuid", new object[] {
                        metadataVersionId}, this.GetDocumentOwnerGuidOperationCompleted, userState);
        }
        
        private void OnGetDocumentOwnerGuidOperationCompleted(object arg) {
            if ((this.GetDocumentOwnerGuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentOwnerGuidCompleted(this, new GetDocumentOwnerGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetLibraryAuditLogs", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AuditLogEntry[] GetLibraryAuditLogs(string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> dateFrom, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> dateTo, string description) {
            object[] results = this.Invoke("GetLibraryAuditLogs", new object[] {
                        username,
                        dateFrom,
                        dateTo,
                        description});
            return ((AuditLogEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLibraryAuditLogsAsync(string username, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, string description) {
            this.GetLibraryAuditLogsAsync(username, dateFrom, dateTo, description, null);
        }
        
        /// <remarks/>
        public void GetLibraryAuditLogsAsync(string username, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, string description, object userState) {
            if ((this.GetLibraryAuditLogsOperationCompleted == null)) {
                this.GetLibraryAuditLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLibraryAuditLogsOperationCompleted);
            }
            this.InvokeAsync("GetLibraryAuditLogs", new object[] {
                        username,
                        dateFrom,
                        dateTo,
                        description}, this.GetLibraryAuditLogsOperationCompleted, userState);
        }
        
        private void OnGetLibraryAuditLogsOperationCompleted(object arg) {
            if ((this.GetLibraryAuditLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLibraryAuditLogsCompleted(this, new GetLibraryAuditLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/InvokeUserAction", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InvokeUserAction(string name, string data) {
            object[] results = this.Invoke("InvokeUserAction", new object[] {
                        name,
                        data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvokeUserActionAsync(string name, string data) {
            this.InvokeUserActionAsync(name, data, null);
        }
        
        /// <remarks/>
        public void InvokeUserActionAsync(string name, string data, object userState) {
            if ((this.InvokeUserActionOperationCompleted == null)) {
                this.InvokeUserActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvokeUserActionOperationCompleted);
            }
            this.InvokeAsync("InvokeUserAction", new object[] {
                        name,
                        data}, this.InvokeUserActionOperationCompleted, userState);
        }
        
        private void OnInvokeUserActionOperationCompleted(object arg) {
            if ((this.InvokeUserActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvokeUserActionCompleted(this, new InvokeUserActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddDocument", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDocument(int folderId, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, System.Guid uploadToken, string originalFileName, System.Guid snapshotId, bool sendEmailToMembers, string documentNumber, string versionNumber) {
            object[] results = this.Invoke("AddDocument", new object[] {
                        folderId,
                        documentSchemaId,
                        documentName,
                        fieldsWithValues,
                        uploadToken,
                        originalFileName,
                        snapshotId,
                        sendEmailToMembers,
                        documentNumber,
                        versionNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDocumentAsync(int folderId, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, System.Guid uploadToken, string originalFileName, System.Guid snapshotId, bool sendEmailToMembers, string documentNumber, string versionNumber) {
            this.AddDocumentAsync(folderId, documentSchemaId, documentName, fieldsWithValues, uploadToken, originalFileName, snapshotId, sendEmailToMembers, documentNumber, versionNumber, null);
        }
        
        /// <remarks/>
        public void AddDocumentAsync(int folderId, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, System.Guid uploadToken, string originalFileName, System.Guid snapshotId, bool sendEmailToMembers, string documentNumber, string versionNumber, object userState) {
            if ((this.AddDocumentOperationCompleted == null)) {
                this.AddDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDocumentOperationCompleted);
            }
            this.InvokeAsync("AddDocument", new object[] {
                        folderId,
                        documentSchemaId,
                        documentName,
                        fieldsWithValues,
                        uploadToken,
                        originalFileName,
                        snapshotId,
                        sendEmailToMembers,
                        documentNumber,
                        versionNumber}, this.AddDocumentOperationCompleted, userState);
        }
        
        private void OnAddDocumentOperationCompleted(object arg) {
            if ((this.AddDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDocumentCompleted(this, new AddDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddDocumentWithAutoFiling", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDocumentWithAutoFiling(string scriptToUse, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, System.Guid uploadToken, string originalFileName, System.Guid snapshotId, bool sendEmailToMembers, string documentNumber, string versionNumber) {
            object[] results = this.Invoke("AddDocumentWithAutoFiling", new object[] {
                        scriptToUse,
                        documentSchemaId,
                        documentName,
                        fieldsWithValues,
                        uploadToken,
                        originalFileName,
                        snapshotId,
                        sendEmailToMembers,
                        documentNumber,
                        versionNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDocumentWithAutoFilingAsync(string scriptToUse, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, System.Guid uploadToken, string originalFileName, System.Guid snapshotId, bool sendEmailToMembers, string documentNumber, string versionNumber) {
            this.AddDocumentWithAutoFilingAsync(scriptToUse, documentSchemaId, documentName, fieldsWithValues, uploadToken, originalFileName, snapshotId, sendEmailToMembers, documentNumber, versionNumber, null);
        }
        
        /// <remarks/>
        public void AddDocumentWithAutoFilingAsync(string scriptToUse, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, System.Guid uploadToken, string originalFileName, System.Guid snapshotId, bool sendEmailToMembers, string documentNumber, string versionNumber, object userState) {
            if ((this.AddDocumentWithAutoFilingOperationCompleted == null)) {
                this.AddDocumentWithAutoFilingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDocumentWithAutoFilingOperationCompleted);
            }
            this.InvokeAsync("AddDocumentWithAutoFiling", new object[] {
                        scriptToUse,
                        documentSchemaId,
                        documentName,
                        fieldsWithValues,
                        uploadToken,
                        originalFileName,
                        snapshotId,
                        sendEmailToMembers,
                        documentNumber,
                        versionNumber}, this.AddDocumentWithAutoFilingOperationCompleted, userState);
        }
        
        private void OnAddDocumentWithAutoFilingOperationCompleted(object arg) {
            if ((this.AddDocumentWithAutoFilingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDocumentWithAutoFilingCompleted(this, new AddDocumentWithAutoFilingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddDocumentInfo", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDocumentInfo(DocumentInfo info) {
            object[] results = this.Invoke("AddDocumentInfo", new object[] {
                        info});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDocumentInfoAsync(DocumentInfo info) {
            this.AddDocumentInfoAsync(info, null);
        }
        
        /// <remarks/>
        public void AddDocumentInfoAsync(DocumentInfo info, object userState) {
            if ((this.AddDocumentInfoOperationCompleted == null)) {
                this.AddDocumentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDocumentInfoOperationCompleted);
            }
            this.InvokeAsync("AddDocumentInfo", new object[] {
                        info}, this.AddDocumentInfoOperationCompleted, userState);
        }
        
        private void OnAddDocumentInfoOperationCompleted(object arg) {
            if ((this.AddDocumentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDocumentInfoCompleted(this, new AddDocumentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/SetMetadata", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMetadata(int prevMetadataVersionId, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, bool overwritePrevious, string versionNumber) {
            this.Invoke("SetMetadata", new object[] {
                        prevMetadataVersionId,
                        documentSchemaId,
                        documentName,
                        fieldsWithValues,
                        overwritePrevious,
                        versionNumber});
        }
        
        /// <remarks/>
        public void SetMetadataAsync(int prevMetadataVersionId, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, bool overwritePrevious, string versionNumber) {
            this.SetMetadataAsync(prevMetadataVersionId, documentSchemaId, documentName, fieldsWithValues, overwritePrevious, versionNumber, null);
        }
        
        /// <remarks/>
        public void SetMetadataAsync(int prevMetadataVersionId, int documentSchemaId, string documentName, FieldWithValue[] fieldsWithValues, bool overwritePrevious, string versionNumber, object userState) {
            if ((this.SetMetadataOperationCompleted == null)) {
                this.SetMetadataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMetadataOperationCompleted);
            }
            this.InvokeAsync("SetMetadata", new object[] {
                        prevMetadataVersionId,
                        documentSchemaId,
                        documentName,
                        fieldsWithValues,
                        overwritePrevious,
                        versionNumber}, this.SetMetadataOperationCompleted, userState);
        }
        
        private void OnSetMetadataOperationCompleted(object arg) {
            if ((this.SetMetadataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMetadataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/IsCheckedOut", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCheckedOut(int metadataVersionId) {
            object[] results = this.Invoke("IsCheckedOut", new object[] {
                        metadataVersionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCheckedOutAsync(int metadataVersionId) {
            this.IsCheckedOutAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void IsCheckedOutAsync(int metadataVersionId, object userState) {
            if ((this.IsCheckedOutOperationCompleted == null)) {
                this.IsCheckedOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCheckedOutOperationCompleted);
            }
            this.InvokeAsync("IsCheckedOut", new object[] {
                        metadataVersionId}, this.IsCheckedOutOperationCompleted, userState);
        }
        
        private void OnIsCheckedOutOperationCompleted(object arg) {
            if ((this.IsCheckedOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCheckedOutCompleted(this, new IsCheckedOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/IsCheckedOutBy", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsCheckedOutBy(int metadataVersionId) {
            object[] results = this.Invoke("IsCheckedOutBy", new object[] {
                        metadataVersionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsCheckedOutByAsync(int metadataVersionId) {
            this.IsCheckedOutByAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void IsCheckedOutByAsync(int metadataVersionId, object userState) {
            if ((this.IsCheckedOutByOperationCompleted == null)) {
                this.IsCheckedOutByOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCheckedOutByOperationCompleted);
            }
            this.InvokeAsync("IsCheckedOutBy", new object[] {
                        metadataVersionId}, this.IsCheckedOutByOperationCompleted, userState);
        }
        
        private void OnIsCheckedOutByOperationCompleted(object arg) {
            if ((this.IsCheckedOutByCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCheckedOutByCompleted(this, new IsCheckedOutByCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckInDocumentsWithNoChanges", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckInDocumentsWithNoChanges(System.Guid selectionId, bool allowCheckinByOtherUsers) {
            this.Invoke("CheckInDocumentsWithNoChanges", new object[] {
                        selectionId,
                        allowCheckinByOtherUsers});
        }
        
        /// <remarks/>
        public void CheckInDocumentsWithNoChangesAsync(System.Guid selectionId, bool allowCheckinByOtherUsers) {
            this.CheckInDocumentsWithNoChangesAsync(selectionId, allowCheckinByOtherUsers, null);
        }
        
        /// <remarks/>
        public void CheckInDocumentsWithNoChangesAsync(System.Guid selectionId, bool allowCheckinByOtherUsers, object userState) {
            if ((this.CheckInDocumentsWithNoChangesOperationCompleted == null)) {
                this.CheckInDocumentsWithNoChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInDocumentsWithNoChangesOperationCompleted);
            }
            this.InvokeAsync("CheckInDocumentsWithNoChanges", new object[] {
                        selectionId,
                        allowCheckinByOtherUsers}, this.CheckInDocumentsWithNoChangesOperationCompleted, userState);
        }
        
        private void OnCheckInDocumentsWithNoChangesOperationCompleted(object arg) {
            if ((this.CheckInDocumentsWithNoChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInDocumentsWithNoChangesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckIn", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckIn(System.Guid uploadToken, CheckInOptions option, string originalFileName, string documentName, int metadataVersionId, bool sendEmailToMembers) {
            object[] results = this.Invoke("CheckIn", new object[] {
                        uploadToken,
                        option,
                        originalFileName,
                        documentName,
                        metadataVersionId,
                        sendEmailToMembers});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInAsync(System.Guid uploadToken, CheckInOptions option, string originalFileName, string documentName, int metadataVersionId, bool sendEmailToMembers) {
            this.CheckInAsync(uploadToken, option, originalFileName, documentName, metadataVersionId, sendEmailToMembers, null);
        }
        
        /// <remarks/>
        public void CheckInAsync(System.Guid uploadToken, CheckInOptions option, string originalFileName, string documentName, int metadataVersionId, bool sendEmailToMembers, object userState) {
            if ((this.CheckInOperationCompleted == null)) {
                this.CheckInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInOperationCompleted);
            }
            this.InvokeAsync("CheckIn", new object[] {
                        uploadToken,
                        option,
                        originalFileName,
                        documentName,
                        metadataVersionId,
                        sendEmailToMembers}, this.CheckInOperationCompleted, userState);
        }
        
        private void OnCheckInOperationCompleted(object arg) {
            if ((this.CheckInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInCompleted(this, new CheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ReinstateAsLatestVersion", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReinstateAsLatestVersion(int metadataVersionId, bool restoreMetadata) {
            this.Invoke("ReinstateAsLatestVersion", new object[] {
                        metadataVersionId,
                        restoreMetadata});
        }
        
        /// <remarks/>
        public void ReinstateAsLatestVersionAsync(int metadataVersionId, bool restoreMetadata) {
            this.ReinstateAsLatestVersionAsync(metadataVersionId, restoreMetadata, null);
        }
        
        /// <remarks/>
        public void ReinstateAsLatestVersionAsync(int metadataVersionId, bool restoreMetadata, object userState) {
            if ((this.ReinstateAsLatestVersionOperationCompleted == null)) {
                this.ReinstateAsLatestVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReinstateAsLatestVersionOperationCompleted);
            }
            this.InvokeAsync("ReinstateAsLatestVersion", new object[] {
                        metadataVersionId,
                        restoreMetadata}, this.ReinstateAsLatestVersionOperationCompleted, userState);
        }
        
        private void OnReinstateAsLatestVersionOperationCompleted(object arg) {
            if ((this.ReinstateAsLatestVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReinstateAsLatestVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ChangeDocumentType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeDocumentType(int metadataVersionId, DocumentSchemaType type) {
            this.Invoke("ChangeDocumentType", new object[] {
                        metadataVersionId,
                        type});
        }
        
        /// <remarks/>
        public void ChangeDocumentTypeAsync(int metadataVersionId, DocumentSchemaType type) {
            this.ChangeDocumentTypeAsync(metadataVersionId, type, null);
        }
        
        /// <remarks/>
        public void ChangeDocumentTypeAsync(int metadataVersionId, DocumentSchemaType type, object userState) {
            if ((this.ChangeDocumentTypeOperationCompleted == null)) {
                this.ChangeDocumentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeDocumentTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeDocumentType", new object[] {
                        metadataVersionId,
                        type}, this.ChangeDocumentTypeOperationCompleted, userState);
        }
        
        private void OnChangeDocumentTypeOperationCompleted(object arg) {
            if ((this.ChangeDocumentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeDocumentTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ChangeType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeType(System.Guid selectionId, DocumentSchemaType type) {
            this.Invoke("ChangeType", new object[] {
                        selectionId,
                        type});
        }
        
        /// <remarks/>
        public void ChangeTypeAsync(System.Guid selectionId, DocumentSchemaType type) {
            this.ChangeTypeAsync(selectionId, type, null);
        }
        
        /// <remarks/>
        public void ChangeTypeAsync(System.Guid selectionId, DocumentSchemaType type, object userState) {
            if ((this.ChangeTypeOperationCompleted == null)) {
                this.ChangeTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeType", new object[] {
                        selectionId,
                        type}, this.ChangeTypeOperationCompleted, userState);
        }
        
        private void OnChangeTypeOperationCompleted(object arg) {
            if ((this.ChangeTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ConvertToOffline", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConvertToOffline(System.Guid selectionId) {
            this.Invoke("ConvertToOffline", new object[] {
                        selectionId});
        }
        
        /// <remarks/>
        public void ConvertToOfflineAsync(System.Guid selectionId) {
            this.ConvertToOfflineAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void ConvertToOfflineAsync(System.Guid selectionId, object userState) {
            if ((this.ConvertToOfflineOperationCompleted == null)) {
                this.ConvertToOfflineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToOfflineOperationCompleted);
            }
            this.InvokeAsync("ConvertToOffline", new object[] {
                        selectionId}, this.ConvertToOfflineOperationCompleted, userState);
        }
        
        private void OnConvertToOfflineOperationCompleted(object arg) {
            if ((this.ConvertToOfflineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToOfflineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ConvertToOfflineById", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConvertToOfflineById(int documentId) {
            this.Invoke("ConvertToOfflineById", new object[] {
                        documentId});
        }
        
        /// <remarks/>
        public void ConvertToOfflineByIdAsync(int documentId) {
            this.ConvertToOfflineByIdAsync(documentId, null);
        }
        
        /// <remarks/>
        public void ConvertToOfflineByIdAsync(int documentId, object userState) {
            if ((this.ConvertToOfflineByIdOperationCompleted == null)) {
                this.ConvertToOfflineByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToOfflineByIdOperationCompleted);
            }
            this.InvokeAsync("ConvertToOfflineById", new object[] {
                        documentId}, this.ConvertToOfflineByIdOperationCompleted, userState);
        }
        
        private void OnConvertToOfflineByIdOperationCompleted(object arg) {
            if ((this.ConvertToOfflineByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToOfflineByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ConvertToElectronic", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConvertToElectronic(System.Guid uploadToken, string originalFileName, string documentName, int metadataVersionId, bool sendEmailToMembers) {
            object[] results = this.Invoke("ConvertToElectronic", new object[] {
                        uploadToken,
                        originalFileName,
                        documentName,
                        metadataVersionId,
                        sendEmailToMembers});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertToElectronicAsync(System.Guid uploadToken, string originalFileName, string documentName, int metadataVersionId, bool sendEmailToMembers) {
            this.ConvertToElectronicAsync(uploadToken, originalFileName, documentName, metadataVersionId, sendEmailToMembers, null);
        }
        
        /// <remarks/>
        public void ConvertToElectronicAsync(System.Guid uploadToken, string originalFileName, string documentName, int metadataVersionId, bool sendEmailToMembers, object userState) {
            if ((this.ConvertToElectronicOperationCompleted == null)) {
                this.ConvertToElectronicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToElectronicOperationCompleted);
            }
            this.InvokeAsync("ConvertToElectronic", new object[] {
                        uploadToken,
                        originalFileName,
                        documentName,
                        metadataVersionId,
                        sendEmailToMembers}, this.ConvertToElectronicOperationCompleted, userState);
        }
        
        private void OnConvertToElectronicOperationCompleted(object arg) {
            if ((this.ConvertToElectronicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToElectronicCompleted(this, new ConvertToElectronicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/ChangeDocumentsOwner", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeDocumentsOwner(System.Guid selectionId, System.Guid newOwnerGuid) {
            this.Invoke("ChangeDocumentsOwner", new object[] {
                        selectionId,
                        newOwnerGuid});
        }
        
        /// <remarks/>
        public void ChangeDocumentsOwnerAsync(System.Guid selectionId, System.Guid newOwnerGuid) {
            this.ChangeDocumentsOwnerAsync(selectionId, newOwnerGuid, null);
        }
        
        /// <remarks/>
        public void ChangeDocumentsOwnerAsync(System.Guid selectionId, System.Guid newOwnerGuid, object userState) {
            if ((this.ChangeDocumentsOwnerOperationCompleted == null)) {
                this.ChangeDocumentsOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeDocumentsOwnerOperationCompleted);
            }
            this.InvokeAsync("ChangeDocumentsOwner", new object[] {
                        selectionId,
                        newOwnerGuid}, this.ChangeDocumentsOwnerOperationCompleted, userState);
        }
        
        private void OnChangeDocumentsOwnerOperationCompleted(object arg) {
            if ((this.ChangeDocumentsOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeDocumentsOwnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentName", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentName(int documentId) {
            object[] results = this.Invoke("GetDocumentName", new object[] {
                        documentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentNameAsync(int documentId) {
            this.GetDocumentNameAsync(documentId, null);
        }
        
        /// <remarks/>
        public void GetDocumentNameAsync(int documentId, object userState) {
            if ((this.GetDocumentNameOperationCompleted == null)) {
                this.GetDocumentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentNameOperationCompleted);
            }
            this.InvokeAsync("GetDocumentName", new object[] {
                        documentId}, this.GetDocumentNameOperationCompleted, userState);
        }
        
        private void OnGetDocumentNameOperationCompleted(object arg) {
            if ((this.GetDocumentNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentNameCompleted(this, new GetDocumentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentVersionName", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentVersionName(int documentVersionId) {
            object[] results = this.Invoke("GetDocumentVersionName", new object[] {
                        documentVersionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentVersionNameAsync(int documentVersionId) {
            this.GetDocumentVersionNameAsync(documentVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentVersionNameAsync(int documentVersionId, object userState) {
            if ((this.GetDocumentVersionNameOperationCompleted == null)) {
                this.GetDocumentVersionNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentVersionNameOperationCompleted);
            }
            this.InvokeAsync("GetDocumentVersionName", new object[] {
                        documentVersionId}, this.GetDocumentVersionNameOperationCompleted, userState);
        }
        
        private void OnGetDocumentVersionNameOperationCompleted(object arg) {
            if ((this.GetDocumentVersionNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentVersionNameCompleted(this, new GetDocumentVersionNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentNameAndSchema", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDocumentNameAndSchema(int metadataVersionId) {
            object[] results = this.Invoke("GetDocumentNameAndSchema", new object[] {
                        metadataVersionId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentNameAndSchemaAsync(int metadataVersionId) {
            this.GetDocumentNameAndSchemaAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentNameAndSchemaAsync(int metadataVersionId, object userState) {
            if ((this.GetDocumentNameAndSchemaOperationCompleted == null)) {
                this.GetDocumentNameAndSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentNameAndSchemaOperationCompleted);
            }
            this.InvokeAsync("GetDocumentNameAndSchema", new object[] {
                        metadataVersionId}, this.GetDocumentNameAndSchemaOperationCompleted, userState);
        }
        
        private void OnGetDocumentNameAndSchemaOperationCompleted(object arg) {
            if ((this.GetDocumentNameAndSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentNameAndSchemaCompleted(this, new GetDocumentNameAndSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentLocation", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetDocumentLocation(int documentId) {
            object[] results = this.Invoke("GetDocumentLocation", new object[] {
                        documentId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentLocationAsync(int documentId) {
            this.GetDocumentLocationAsync(documentId, null);
        }
        
        /// <remarks/>
        public void GetDocumentLocationAsync(int documentId, object userState) {
            if ((this.GetDocumentLocationOperationCompleted == null)) {
                this.GetDocumentLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentLocationOperationCompleted);
            }
            this.InvokeAsync("GetDocumentLocation", new object[] {
                        documentId}, this.GetDocumentLocationOperationCompleted, userState);
        }
        
        private void OnGetDocumentLocationOperationCompleted(object arg) {
            if ((this.GetDocumentLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentLocationCompleted(this, new GetDocumentLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetAutoTaggingForDocument", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AutoTagging GetAutoTaggingForDocument(int metadataVersionId) {
            object[] results = this.Invoke("GetAutoTaggingForDocument", new object[] {
                        metadataVersionId});
            return ((AutoTagging)(results[0]));
        }
        
        /// <remarks/>
        public void GetAutoTaggingForDocumentAsync(int metadataVersionId) {
            this.GetAutoTaggingForDocumentAsync(metadataVersionId, null);
        }
        
        /// <remarks/>
        public void GetAutoTaggingForDocumentAsync(int metadataVersionId, object userState) {
            if ((this.GetAutoTaggingForDocumentOperationCompleted == null)) {
                this.GetAutoTaggingForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAutoTaggingForDocumentOperationCompleted);
            }
            this.InvokeAsync("GetAutoTaggingForDocument", new object[] {
                        metadataVersionId}, this.GetAutoTaggingForDocumentOperationCompleted, userState);
        }
        
        private void OnGetAutoTaggingForDocumentOperationCompleted(object arg) {
            if ((this.GetAutoTaggingForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAutoTaggingForDocumentCompleted(this, new GetAutoTaggingForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetAutoTaggingForSelection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AutoTagging GetAutoTaggingForSelection(System.Guid selectionId) {
            object[] results = this.Invoke("GetAutoTaggingForSelection", new object[] {
                        selectionId});
            return ((AutoTagging)(results[0]));
        }
        
        /// <remarks/>
        public void GetAutoTaggingForSelectionAsync(System.Guid selectionId) {
            this.GetAutoTaggingForSelectionAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetAutoTaggingForSelectionAsync(System.Guid selectionId, object userState) {
            if ((this.GetAutoTaggingForSelectionOperationCompleted == null)) {
                this.GetAutoTaggingForSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAutoTaggingForSelectionOperationCompleted);
            }
            this.InvokeAsync("GetAutoTaggingForSelection", new object[] {
                        selectionId}, this.GetAutoTaggingForSelectionOperationCompleted, userState);
        }
        
        private void OnGetAutoTaggingForSelectionOperationCompleted(object arg) {
            if ((this.GetAutoTaggingForSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAutoTaggingForSelectionCompleted(this, new GetAutoTaggingForSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetAutoTaggingForFolders", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AutoTagging GetAutoTaggingForFolders(int[] folderIds) {
            object[] results = this.Invoke("GetAutoTaggingForFolders", new object[] {
                        folderIds});
            return ((AutoTagging)(results[0]));
        }
        
        /// <remarks/>
        public void GetAutoTaggingForFoldersAsync(int[] folderIds) {
            this.GetAutoTaggingForFoldersAsync(folderIds, null);
        }
        
        /// <remarks/>
        public void GetAutoTaggingForFoldersAsync(int[] folderIds, object userState) {
            if ((this.GetAutoTaggingForFoldersOperationCompleted == null)) {
                this.GetAutoTaggingForFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAutoTaggingForFoldersOperationCompleted);
            }
            this.InvokeAsync("GetAutoTaggingForFolders", new object[] {
                        folderIds}, this.GetAutoTaggingForFoldersOperationCompleted, userState);
        }
        
        private void OnGetAutoTaggingForFoldersOperationCompleted(object arg) {
            if ((this.GetAutoTaggingForFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAutoTaggingForFoldersCompleted(this, new GetAutoTaggingForFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/Archive", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Archive(System.Guid selectionId) {
            this.Invoke("Archive", new object[] {
                        selectionId});
        }
        
        /// <remarks/>
        public void ArchiveAsync(System.Guid selectionId) {
            this.ArchiveAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void ArchiveAsync(System.Guid selectionId, object userState) {
            if ((this.ArchiveOperationCompleted == null)) {
                this.ArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveOperationCompleted);
            }
            this.InvokeAsync("Archive", new object[] {
                        selectionId}, this.ArchiveOperationCompleted, userState);
        }
        
        private void OnArchiveOperationCompleted(object arg) {
            if ((this.ArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/AddShortcut", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddShortcut(int documentId, int folderId) {
            this.Invoke("AddShortcut", new object[] {
                        documentId,
                        folderId});
        }
        
        /// <remarks/>
        public void AddShortcutAsync(int documentId, int folderId) {
            this.AddShortcutAsync(documentId, folderId, null);
        }
        
        /// <remarks/>
        public void AddShortcutAsync(int documentId, int folderId, object userState) {
            if ((this.AddShortcutOperationCompleted == null)) {
                this.AddShortcutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddShortcutOperationCompleted);
            }
            this.InvokeAsync("AddShortcut", new object[] {
                        documentId,
                        folderId}, this.AddShortcutOperationCompleted, userState);
        }
        
        private void OnAddShortcutOperationCompleted(object arg) {
            if ((this.AddShortcutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddShortcutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckShortcutsExist", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckShortcutsExist() {
            object[] results = this.Invoke("CheckShortcutsExist", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckShortcutsExistAsync() {
            this.CheckShortcutsExistAsync(null);
        }
        
        /// <remarks/>
        public void CheckShortcutsExistAsync(object userState) {
            if ((this.CheckShortcutsExistOperationCompleted == null)) {
                this.CheckShortcutsExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckShortcutsExistOperationCompleted);
            }
            this.InvokeAsync("CheckShortcutsExist", new object[0], this.CheckShortcutsExistOperationCompleted, userState);
        }
        
        private void OnCheckShortcutsExistOperationCompleted(object arg) {
            if ((this.CheckShortcutsExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckShortcutsExistCompleted(this, new CheckShortcutsExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CreateSelection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid CreateSelection(Selection selection) {
            object[] results = this.Invoke("CreateSelection", new object[] {
                        selection});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSelectionAsync(Selection selection) {
            this.CreateSelectionAsync(selection, null);
        }
        
        /// <remarks/>
        public void CreateSelectionAsync(Selection selection, object userState) {
            if ((this.CreateSelectionOperationCompleted == null)) {
                this.CreateSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSelectionOperationCompleted);
            }
            this.InvokeAsync("CreateSelection", new object[] {
                        selection}, this.CreateSelectionOperationCompleted, userState);
        }
        
        private void OnCreateSelectionOperationCompleted(object arg) {
            if ((this.CreateSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSelectionCompleted(this, new CreateSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckSelectionContent", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckSelectionContent(System.Guid selectionId, ref bool hasDocuments, ref bool hasShortcuts, ref bool hasCheckedOut, ref bool hasNotLastVersions, ref bool hasShortcutsToCheckedInDocuments, ref bool hasActiveWorkflows, ref bool hasLastVisible, ref bool hasLockedMarkups) {
            object[] results = this.Invoke("CheckSelectionContent", new object[] {
                        selectionId,
                        hasDocuments,
                        hasShortcuts,
                        hasCheckedOut,
                        hasNotLastVersions,
                        hasShortcutsToCheckedInDocuments,
                        hasActiveWorkflows,
                        hasLastVisible,
                        hasLockedMarkups});
            hasDocuments = ((bool)(results[0]));
            hasShortcuts = ((bool)(results[1]));
            hasCheckedOut = ((bool)(results[2]));
            hasNotLastVersions = ((bool)(results[3]));
            hasShortcutsToCheckedInDocuments = ((bool)(results[4]));
            hasActiveWorkflows = ((bool)(results[5]));
            hasLastVisible = ((bool)(results[6]));
            hasLockedMarkups = ((bool)(results[7]));
        }
        
        /// <remarks/>
        public void CheckSelectionContentAsync(System.Guid selectionId, bool hasDocuments, bool hasShortcuts, bool hasCheckedOut, bool hasNotLastVersions, bool hasShortcutsToCheckedInDocuments, bool hasActiveWorkflows, bool hasLastVisible, bool hasLockedMarkups) {
            this.CheckSelectionContentAsync(selectionId, hasDocuments, hasShortcuts, hasCheckedOut, hasNotLastVersions, hasShortcutsToCheckedInDocuments, hasActiveWorkflows, hasLastVisible, hasLockedMarkups, null);
        }
        
        /// <remarks/>
        public void CheckSelectionContentAsync(System.Guid selectionId, bool hasDocuments, bool hasShortcuts, bool hasCheckedOut, bool hasNotLastVersions, bool hasShortcutsToCheckedInDocuments, bool hasActiveWorkflows, bool hasLastVisible, bool hasLockedMarkups, object userState) {
            if ((this.CheckSelectionContentOperationCompleted == null)) {
                this.CheckSelectionContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSelectionContentOperationCompleted);
            }
            this.InvokeAsync("CheckSelectionContent", new object[] {
                        selectionId,
                        hasDocuments,
                        hasShortcuts,
                        hasCheckedOut,
                        hasNotLastVersions,
                        hasShortcutsToCheckedInDocuments,
                        hasActiveWorkflows,
                        hasLastVisible,
                        hasLockedMarkups}, this.CheckSelectionContentOperationCompleted, userState);
        }
        
        private void OnCheckSelectionContentOperationCompleted(object arg) {
            if ((this.CheckSelectionContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSelectionContentCompleted(this, new CheckSelectionContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckSelectionDeleted", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckSelectionDeleted(System.Guid selectionId, ref bool deleted) {
            object[] results = this.Invoke("CheckSelectionDeleted", new object[] {
                        selectionId,
                        deleted});
            deleted = ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSelectionDeletedAsync(System.Guid selectionId, bool deleted) {
            this.CheckSelectionDeletedAsync(selectionId, deleted, null);
        }
        
        /// <remarks/>
        public void CheckSelectionDeletedAsync(System.Guid selectionId, bool deleted, object userState) {
            if ((this.CheckSelectionDeletedOperationCompleted == null)) {
                this.CheckSelectionDeletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSelectionDeletedOperationCompleted);
            }
            this.InvokeAsync("CheckSelectionDeleted", new object[] {
                        selectionId,
                        deleted}, this.CheckSelectionDeletedOperationCompleted, userState);
        }
        
        private void OnCheckSelectionDeletedOperationCompleted(object arg) {
            if ((this.CheckSelectionDeletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSelectionDeletedCompleted(this, new CheckSelectionDeletedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckSelectionLocation", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckSelectionLocation(System.Guid selectionId, ref bool inLibrary, ref bool inArchive) {
            object[] results = this.Invoke("CheckSelectionLocation", new object[] {
                        selectionId,
                        inLibrary,
                        inArchive});
            inLibrary = ((bool)(results[0]));
            inArchive = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CheckSelectionLocationAsync(System.Guid selectionId, bool inLibrary, bool inArchive) {
            this.CheckSelectionLocationAsync(selectionId, inLibrary, inArchive, null);
        }
        
        /// <remarks/>
        public void CheckSelectionLocationAsync(System.Guid selectionId, bool inLibrary, bool inArchive, object userState) {
            if ((this.CheckSelectionLocationOperationCompleted == null)) {
                this.CheckSelectionLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSelectionLocationOperationCompleted);
            }
            this.InvokeAsync("CheckSelectionLocation", new object[] {
                        selectionId,
                        inLibrary,
                        inArchive}, this.CheckSelectionLocationOperationCompleted, userState);
        }
        
        private void OnCheckSelectionLocationOperationCompleted(object arg) {
            if ((this.CheckSelectionLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSelectionLocationCompleted(this, new CheckSelectionLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckAllCanUnArchive", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAllCanUnArchive(System.Guid selectionId) {
            object[] results = this.Invoke("CheckAllCanUnArchive", new object[] {
                        selectionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAllCanUnArchiveAsync(System.Guid selectionId) {
            this.CheckAllCanUnArchiveAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void CheckAllCanUnArchiveAsync(System.Guid selectionId, object userState) {
            if ((this.CheckAllCanUnArchiveOperationCompleted == null)) {
                this.CheckAllCanUnArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAllCanUnArchiveOperationCompleted);
            }
            this.InvokeAsync("CheckAllCanUnArchive", new object[] {
                        selectionId}, this.CheckAllCanUnArchiveOperationCompleted, userState);
        }
        
        private void OnCheckAllCanUnArchiveOperationCompleted(object arg) {
            if ((this.CheckAllCanUnArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAllCanUnArchiveCompleted(this, new CheckAllCanUnArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckDocumentsInWorkflow", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckDocumentsInWorkflow(System.Guid selectionId, ref bool hasActiveWorkflow, ref bool hasSupportingWorkflow) {
            object[] results = this.Invoke("CheckDocumentsInWorkflow", new object[] {
                        selectionId,
                        hasActiveWorkflow,
                        hasSupportingWorkflow});
            hasActiveWorkflow = ((bool)(results[0]));
            hasSupportingWorkflow = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CheckDocumentsInWorkflowAsync(System.Guid selectionId, bool hasActiveWorkflow, bool hasSupportingWorkflow) {
            this.CheckDocumentsInWorkflowAsync(selectionId, hasActiveWorkflow, hasSupportingWorkflow, null);
        }
        
        /// <remarks/>
        public void CheckDocumentsInWorkflowAsync(System.Guid selectionId, bool hasActiveWorkflow, bool hasSupportingWorkflow, object userState) {
            if ((this.CheckDocumentsInWorkflowOperationCompleted == null)) {
                this.CheckDocumentsInWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocumentsInWorkflowOperationCompleted);
            }
            this.InvokeAsync("CheckDocumentsInWorkflow", new object[] {
                        selectionId,
                        hasActiveWorkflow,
                        hasSupportingWorkflow}, this.CheckDocumentsInWorkflowOperationCompleted, userState);
        }
        
        private void OnCheckDocumentsInWorkflowOperationCompleted(object arg) {
            if ((this.CheckDocumentsInWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocumentsInWorkflowCompleted(this, new CheckDocumentsInWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentsInSchemas", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentInSchema[] GetDocumentsInSchemas(System.Guid selectionId, out int documentsCountInAllSchemas) {
            object[] results = this.Invoke("GetDocumentsInSchemas", new object[] {
                        selectionId});
            documentsCountInAllSchemas = ((int)(results[1]));
            return ((DocumentInSchema[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsInSchemasAsync(System.Guid selectionId) {
            this.GetDocumentsInSchemasAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetDocumentsInSchemasAsync(System.Guid selectionId, object userState) {
            if ((this.GetDocumentsInSchemasOperationCompleted == null)) {
                this.GetDocumentsInSchemasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsInSchemasOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsInSchemas", new object[] {
                        selectionId}, this.GetDocumentsInSchemasOperationCompleted, userState);
        }
        
        private void OnGetDocumentsInSchemasOperationCompleted(object arg) {
            if ((this.GetDocumentsInSchemasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsInSchemasCompleted(this, new GetDocumentsInSchemasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentsInSchemaType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocumentsInSchemaType(System.Guid selectionId, int maxCount, DocumentSchemaType type, ref string[] names) {
            object[] results = this.Invoke("GetDocumentsInSchemaType", new object[] {
                        selectionId,
                        maxCount,
                        type,
                        names});
            names = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsInSchemaTypeAsync(System.Guid selectionId, int maxCount, DocumentSchemaType type, string[] names) {
            this.GetDocumentsInSchemaTypeAsync(selectionId, maxCount, type, names, null);
        }
        
        /// <remarks/>
        public void GetDocumentsInSchemaTypeAsync(System.Guid selectionId, int maxCount, DocumentSchemaType type, string[] names, object userState) {
            if ((this.GetDocumentsInSchemaTypeOperationCompleted == null)) {
                this.GetDocumentsInSchemaTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsInSchemaTypeOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsInSchemaType", new object[] {
                        selectionId,
                        maxCount,
                        type,
                        names}, this.GetDocumentsInSchemaTypeOperationCompleted, userState);
        }
        
        private void OnGetDocumentsInSchemaTypeOperationCompleted(object arg) {
            if ((this.GetDocumentsInSchemaTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsInSchemaTypeCompleted(this, new GetDocumentsInSchemaTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckSelectionSchemaType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSelectionSchemaType(System.Guid selectionId, ref int firstMetadataVersionId) {
            object[] results = this.Invoke("CheckSelectionSchemaType", new object[] {
                        selectionId,
                        firstMetadataVersionId});
            firstMetadataVersionId = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSelectionSchemaTypeAsync(System.Guid selectionId, int firstMetadataVersionId) {
            this.CheckSelectionSchemaTypeAsync(selectionId, firstMetadataVersionId, null);
        }
        
        /// <remarks/>
        public void CheckSelectionSchemaTypeAsync(System.Guid selectionId, int firstMetadataVersionId, object userState) {
            if ((this.CheckSelectionSchemaTypeOperationCompleted == null)) {
                this.CheckSelectionSchemaTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSelectionSchemaTypeOperationCompleted);
            }
            this.InvokeAsync("CheckSelectionSchemaType", new object[] {
                        selectionId,
                        firstMetadataVersionId}, this.CheckSelectionSchemaTypeOperationCompleted, userState);
        }
        
        private void OnCheckSelectionSchemaTypeOperationCompleted(object arg) {
            if ((this.CheckSelectionSchemaTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSelectionSchemaTypeCompleted(this, new CheckSelectionSchemaTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckSelectionDocumentType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckSelectionDocumentType(System.Guid selectionId, ref bool allElectronic, ref bool allRecords, ref bool allOffline, ref bool allCanChangeType) {
            object[] results = this.Invoke("CheckSelectionDocumentType", new object[] {
                        selectionId,
                        allElectronic,
                        allRecords,
                        allOffline,
                        allCanChangeType});
            allElectronic = ((bool)(results[0]));
            allRecords = ((bool)(results[1]));
            allOffline = ((bool)(results[2]));
            allCanChangeType = ((bool)(results[3]));
        }
        
        /// <remarks/>
        public void CheckSelectionDocumentTypeAsync(System.Guid selectionId, bool allElectronic, bool allRecords, bool allOffline, bool allCanChangeType) {
            this.CheckSelectionDocumentTypeAsync(selectionId, allElectronic, allRecords, allOffline, allCanChangeType, null);
        }
        
        /// <remarks/>
        public void CheckSelectionDocumentTypeAsync(System.Guid selectionId, bool allElectronic, bool allRecords, bool allOffline, bool allCanChangeType, object userState) {
            if ((this.CheckSelectionDocumentTypeOperationCompleted == null)) {
                this.CheckSelectionDocumentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSelectionDocumentTypeOperationCompleted);
            }
            this.InvokeAsync("CheckSelectionDocumentType", new object[] {
                        selectionId,
                        allElectronic,
                        allRecords,
                        allOffline,
                        allCanChangeType}, this.CheckSelectionDocumentTypeOperationCompleted, userState);
        }
        
        private void OnCheckSelectionDocumentTypeOperationCompleted(object arg) {
            if ((this.CheckSelectionDocumentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSelectionDocumentTypeCompleted(this, new CheckSelectionDocumentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckAllCanChangeType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAllCanChangeType(int[] metadataVersionIds) {
            object[] results = this.Invoke("CheckAllCanChangeType", new object[] {
                        metadataVersionIds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAllCanChangeTypeAsync(int[] metadataVersionIds) {
            this.CheckAllCanChangeTypeAsync(metadataVersionIds, null);
        }
        
        /// <remarks/>
        public void CheckAllCanChangeTypeAsync(int[] metadataVersionIds, object userState) {
            if ((this.CheckAllCanChangeTypeOperationCompleted == null)) {
                this.CheckAllCanChangeTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAllCanChangeTypeOperationCompleted);
            }
            this.InvokeAsync("CheckAllCanChangeType", new object[] {
                        metadataVersionIds}, this.CheckAllCanChangeTypeOperationCompleted, userState);
        }
        
        private void OnCheckAllCanChangeTypeOperationCompleted(object arg) {
            if ((this.CheckAllCanChangeTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAllCanChangeTypeCompleted(this, new CheckAllCanChangeTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckAllCanConvertToElectronic" +
            "", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAllCanConvertToElectronic(int[] metadataVersionIds) {
            object[] results = this.Invoke("CheckAllCanConvertToElectronic", new object[] {
                        metadataVersionIds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAllCanConvertToElectronicAsync(int[] metadataVersionIds) {
            this.CheckAllCanConvertToElectronicAsync(metadataVersionIds, null);
        }
        
        /// <remarks/>
        public void CheckAllCanConvertToElectronicAsync(int[] metadataVersionIds, object userState) {
            if ((this.CheckAllCanConvertToElectronicOperationCompleted == null)) {
                this.CheckAllCanConvertToElectronicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAllCanConvertToElectronicOperationCompleted);
            }
            this.InvokeAsync("CheckAllCanConvertToElectronic", new object[] {
                        metadataVersionIds}, this.CheckAllCanConvertToElectronicOperationCompleted, userState);
        }
        
        private void OnCheckAllCanConvertToElectronicOperationCompleted(object arg) {
            if ((this.CheckAllCanConvertToElectronicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAllCanConvertToElectronicCompleted(this, new CheckAllCanConvertToElectronicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckDocumentType", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckDocumentType(int[] metadataVersionIds, ref bool allIncludeElectronic, ref bool allIncludeRecords, ref bool allIncludeOffline) {
            object[] results = this.Invoke("CheckDocumentType", new object[] {
                        metadataVersionIds,
                        allIncludeElectronic,
                        allIncludeRecords,
                        allIncludeOffline});
            allIncludeElectronic = ((bool)(results[0]));
            allIncludeRecords = ((bool)(results[1]));
            allIncludeOffline = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void CheckDocumentTypeAsync(int[] metadataVersionIds, bool allIncludeElectronic, bool allIncludeRecords, bool allIncludeOffline) {
            this.CheckDocumentTypeAsync(metadataVersionIds, allIncludeElectronic, allIncludeRecords, allIncludeOffline, null);
        }
        
        /// <remarks/>
        public void CheckDocumentTypeAsync(int[] metadataVersionIds, bool allIncludeElectronic, bool allIncludeRecords, bool allIncludeOffline, object userState) {
            if ((this.CheckDocumentTypeOperationCompleted == null)) {
                this.CheckDocumentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocumentTypeOperationCompleted);
            }
            this.InvokeAsync("CheckDocumentType", new object[] {
                        metadataVersionIds,
                        allIncludeElectronic,
                        allIncludeRecords,
                        allIncludeOffline}, this.CheckDocumentTypeOperationCompleted, userState);
        }
        
        private void OnCheckDocumentTypeOperationCompleted(object arg) {
            if ((this.CheckDocumentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocumentTypeCompleted(this, new CheckDocumentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentsWithCustomNaming", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocumentsWithCustomNaming(System.Guid selectionId, int maxCount, ref string[] names) {
            object[] results = this.Invoke("GetDocumentsWithCustomNaming", new object[] {
                        selectionId,
                        maxCount,
                        names});
            names = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsWithCustomNamingAsync(System.Guid selectionId, int maxCount, string[] names) {
            this.GetDocumentsWithCustomNamingAsync(selectionId, maxCount, names, null);
        }
        
        /// <remarks/>
        public void GetDocumentsWithCustomNamingAsync(System.Guid selectionId, int maxCount, string[] names, object userState) {
            if ((this.GetDocumentsWithCustomNamingOperationCompleted == null)) {
                this.GetDocumentsWithCustomNamingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsWithCustomNamingOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsWithCustomNaming", new object[] {
                        selectionId,
                        maxCount,
                        names}, this.GetDocumentsWithCustomNamingOperationCompleted, userState);
        }
        
        private void OnGetDocumentsWithCustomNamingOperationCompleted(object arg) {
            if ((this.GetDocumentsWithCustomNamingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsWithCustomNamingCompleted(this, new GetDocumentsWithCustomNamingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CheckSelectionDocumentNumber", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckSelectionDocumentNumber(System.Guid selectionId) {
            object[] results = this.Invoke("CheckSelectionDocumentNumber", new object[] {
                        selectionId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSelectionDocumentNumberAsync(System.Guid selectionId) {
            this.CheckSelectionDocumentNumberAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void CheckSelectionDocumentNumberAsync(System.Guid selectionId, object userState) {
            if ((this.CheckSelectionDocumentNumberOperationCompleted == null)) {
                this.CheckSelectionDocumentNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSelectionDocumentNumberOperationCompleted);
            }
            this.InvokeAsync("CheckSelectionDocumentNumber", new object[] {
                        selectionId}, this.CheckSelectionDocumentNumberOperationCompleted, userState);
        }
        
        private void OnCheckSelectionDocumentNumberOperationCompleted(object arg) {
            if ((this.CheckSelectionDocumentNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSelectionDocumentNumberCompleted(this, new CheckSelectionDocumentNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/RemoveSelection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveSelection(System.Guid selectionId) {
            this.Invoke("RemoveSelection", new object[] {
                        selectionId});
        }
        
        /// <remarks/>
        public void RemoveSelectionAsync(System.Guid selectionId) {
            this.RemoveSelectionAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void RemoveSelectionAsync(System.Guid selectionId, object userState) {
            if ((this.RemoveSelectionOperationCompleted == null)) {
                this.RemoveSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSelectionOperationCompleted);
            }
            this.InvokeAsync("RemoveSelection", new object[] {
                        selectionId}, this.RemoveSelectionOperationCompleted, userState);
        }
        
        private void OnRemoveSelectionOperationCompleted(object arg) {
            if ((this.RemoveSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSelectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetShortcutsFromSelection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetShortcutsFromSelection(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetShortcutsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetShortcutsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetShortcutsFromSelectionAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetShortcutsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetShortcutsFromSelectionOperationCompleted == null)) {
                this.GetShortcutsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShortcutsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetShortcutsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetShortcutsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetShortcutsFromSelectionOperationCompleted(object arg) {
            if ((this.GetShortcutsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetShortcutsFromSelectionCompleted(this, new GetShortcutsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetCheckedOutDocumentsFromSele" +
            "ction", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetCheckedOutDocumentsFromSelection(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetCheckedOutDocumentsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetCheckedOutDocumentsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetCheckedOutDocumentsFromSelectionAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetCheckedOutDocumentsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetCheckedOutDocumentsFromSelectionOperationCompleted == null)) {
                this.GetCheckedOutDocumentsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckedOutDocumentsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetCheckedOutDocumentsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetCheckedOutDocumentsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetCheckedOutDocumentsFromSelectionOperationCompleted(object arg) {
            if ((this.GetCheckedOutDocumentsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckedOutDocumentsFromSelectionCompleted(this, new GetCheckedOutDocumentsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetActiveWorkflowDocumentsFrom" +
            "Selection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetActiveWorkflowDocumentsFromSelection(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetActiveWorkflowDocumentsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetActiveWorkflowDocumentsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetActiveWorkflowDocumentsFromSelectionAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetActiveWorkflowDocumentsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetActiveWorkflowDocumentsFromSelectionOperationCompleted == null)) {
                this.GetActiveWorkflowDocumentsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveWorkflowDocumentsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetActiveWorkflowDocumentsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetActiveWorkflowDocumentsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetActiveWorkflowDocumentsFromSelectionOperationCompleted(object arg) {
            if ((this.GetActiveWorkflowDocumentsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveWorkflowDocumentsFromSelectionCompleted(this, new GetActiveWorkflowDocumentsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetActiveWorkflowDocumentsForC" +
            "heckOut", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetActiveWorkflowDocumentsForCheckOut(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetActiveWorkflowDocumentsForCheckOut", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetActiveWorkflowDocumentsForCheckOutAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetActiveWorkflowDocumentsForCheckOutAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetActiveWorkflowDocumentsForCheckOutAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetActiveWorkflowDocumentsForCheckOutOperationCompleted == null)) {
                this.GetActiveWorkflowDocumentsForCheckOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveWorkflowDocumentsForCheckOutOperationCompleted);
            }
            this.InvokeAsync("GetActiveWorkflowDocumentsForCheckOut", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetActiveWorkflowDocumentsForCheckOutOperationCompleted, userState);
        }
        
        private void OnGetActiveWorkflowDocumentsForCheckOutOperationCompleted(object arg) {
            if ((this.GetActiveWorkflowDocumentsForCheckOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveWorkflowDocumentsForCheckOutCompleted(this, new GetActiveWorkflowDocumentsForCheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetLastVisibleVersionsFromSele" +
            "ction", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLastVisibleVersionsFromSelection(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetLastVisibleVersionsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetLastVisibleVersionsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetLastVisibleVersionsFromSelectionAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetLastVisibleVersionsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetLastVisibleVersionsFromSelectionOperationCompleted == null)) {
                this.GetLastVisibleVersionsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastVisibleVersionsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetLastVisibleVersionsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetLastVisibleVersionsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetLastVisibleVersionsFromSelectionOperationCompleted(object arg) {
            if ((this.GetLastVisibleVersionsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastVisibleVersionsFromSelectionCompleted(this, new GetLastVisibleVersionsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetNotLastVersionsFromSelectio" +
            "n", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetNotLastVersionsFromSelection(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetNotLastVersionsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetNotLastVersionsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetNotLastVersionsFromSelectionAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetNotLastVersionsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetNotLastVersionsFromSelectionOperationCompleted == null)) {
                this.GetNotLastVersionsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotLastVersionsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetNotLastVersionsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetNotLastVersionsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetNotLastVersionsFromSelectionOperationCompleted(object arg) {
            if ((this.GetNotLastVersionsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNotLastVersionsFromSelectionCompleted(this, new GetNotLastVersionsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetLockedMarkupDocumentsFromSe" +
            "lection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLockedMarkupDocumentsFromSelection(System.Guid selectionId, int maxCount, ref string[] names, ref int totalCount) {
            object[] results = this.Invoke("GetLockedMarkupDocumentsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount});
            names = ((string[])(results[0]));
            totalCount = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void GetLockedMarkupDocumentsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount) {
            this.GetLockedMarkupDocumentsFromSelectionAsync(selectionId, maxCount, names, totalCount, null);
        }
        
        /// <remarks/>
        public void GetLockedMarkupDocumentsFromSelectionAsync(System.Guid selectionId, int maxCount, string[] names, int totalCount, object userState) {
            if ((this.GetLockedMarkupDocumentsFromSelectionOperationCompleted == null)) {
                this.GetLockedMarkupDocumentsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLockedMarkupDocumentsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetLockedMarkupDocumentsFromSelection", new object[] {
                        selectionId,
                        maxCount,
                        names,
                        totalCount}, this.GetLockedMarkupDocumentsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetLockedMarkupDocumentsFromSelectionOperationCompleted(object arg) {
            if ((this.GetLockedMarkupDocumentsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLockedMarkupDocumentsFromSelectionCompleted(this, new GetLockedMarkupDocumentsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetSelectionContent", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SelectionItem[] GetSelectionContent(System.Guid selectionId) {
            object[] results = this.Invoke("GetSelectionContent", new object[] {
                        selectionId});
            return ((SelectionItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSelectionContentAsync(System.Guid selectionId) {
            this.GetSelectionContentAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetSelectionContentAsync(System.Guid selectionId, object userState) {
            if ((this.GetSelectionContentOperationCompleted == null)) {
                this.GetSelectionContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSelectionContentOperationCompleted);
            }
            this.InvokeAsync("GetSelectionContent", new object[] {
                        selectionId}, this.GetSelectionContentOperationCompleted, userState);
        }
        
        private void OnGetSelectionContentOperationCompleted(object arg) {
            if ((this.GetSelectionContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSelectionContentCompleted(this, new GetSelectionContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetBinaryVersionsFromSelection" +
            "", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetBinaryVersionsFromSelection(System.Guid selectionId) {
            object[] results = this.Invoke("GetBinaryVersionsFromSelection", new object[] {
                        selectionId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBinaryVersionsFromSelectionAsync(System.Guid selectionId) {
            this.GetBinaryVersionsFromSelectionAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetBinaryVersionsFromSelectionAsync(System.Guid selectionId, object userState) {
            if ((this.GetBinaryVersionsFromSelectionOperationCompleted == null)) {
                this.GetBinaryVersionsFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBinaryVersionsFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetBinaryVersionsFromSelection", new object[] {
                        selectionId}, this.GetBinaryVersionsFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetBinaryVersionsFromSelectionOperationCompleted(object arg) {
            if ((this.GetBinaryVersionsFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBinaryVersionsFromSelectionCompleted(this, new GetBinaryVersionsFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetSchemaTypesFromSelection", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentWithType[] GetSchemaTypesFromSelection(System.Guid selectionId) {
            object[] results = this.Invoke("GetSchemaTypesFromSelection", new object[] {
                        selectionId});
            return ((DocumentWithType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaTypesFromSelectionAsync(System.Guid selectionId) {
            this.GetSchemaTypesFromSelectionAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void GetSchemaTypesFromSelectionAsync(System.Guid selectionId, object userState) {
            if ((this.GetSchemaTypesFromSelectionOperationCompleted == null)) {
                this.GetSchemaTypesFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaTypesFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetSchemaTypesFromSelection", new object[] {
                        selectionId}, this.GetSchemaTypesFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetSchemaTypesFromSelectionOperationCompleted(object arg) {
            if ((this.GetSchemaTypesFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaTypesFromSelectionCompleted(this, new GetSchemaTypesFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/CreateWorkingDocumentSelection" +
            "", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid CreateWorkingDocumentSelection(int documentId, int version) {
            object[] results = this.Invoke("CreateWorkingDocumentSelection", new object[] {
                        documentId,
                        version});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWorkingDocumentSelectionAsync(int documentId, int version) {
            this.CreateWorkingDocumentSelectionAsync(documentId, version, null);
        }
        
        /// <remarks/>
        public void CreateWorkingDocumentSelectionAsync(int documentId, int version, object userState) {
            if ((this.CreateWorkingDocumentSelectionOperationCompleted == null)) {
                this.CreateWorkingDocumentSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWorkingDocumentSelectionOperationCompleted);
            }
            this.InvokeAsync("CreateWorkingDocumentSelection", new object[] {
                        documentId,
                        version}, this.CreateWorkingDocumentSelectionOperationCompleted, userState);
        }
        
        private void OnCreateWorkingDocumentSelectionOperationCompleted(object arg) {
            if ((this.CreateWorkingDocumentSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWorkingDocumentSelectionCompleted(this, new CreateWorkingDocumentSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/GetDocumentSchemaFromSelection" +
            "", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocumentSchemaFromSelection(System.Guid selectionId, bool allVersions) {
            object[] results = this.Invoke("GetDocumentSchemaFromSelection", new object[] {
                        selectionId,
                        allVersions});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentSchemaFromSelectionAsync(System.Guid selectionId, bool allVersions) {
            this.GetDocumentSchemaFromSelectionAsync(selectionId, allVersions, null);
        }
        
        /// <remarks/>
        public void GetDocumentSchemaFromSelectionAsync(System.Guid selectionId, bool allVersions, object userState) {
            if ((this.GetDocumentSchemaFromSelectionOperationCompleted == null)) {
                this.GetDocumentSchemaFromSelectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentSchemaFromSelectionOperationCompleted);
            }
            this.InvokeAsync("GetDocumentSchemaFromSelection", new object[] {
                        selectionId,
                        allVersions}, this.GetDocumentSchemaFromSelectionOperationCompleted, userState);
        }
        
        private void OnGetDocumentSchemaFromSelectionOperationCompleted(object arg) {
            if ((this.GetDocumentSchemaFromSelectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentSchemaFromSelectionCompleted(this, new GetDocumentSchemaFromSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/DeleteDocuments", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteDocuments(System.Guid selectionId, bool removeAllVersions) {
            object[] results = this.Invoke("DeleteDocuments", new object[] {
                        selectionId,
                        removeAllVersions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDocumentsAsync(System.Guid selectionId, bool removeAllVersions) {
            this.DeleteDocumentsAsync(selectionId, removeAllVersions, null);
        }
        
        /// <remarks/>
        public void DeleteDocumentsAsync(System.Guid selectionId, bool removeAllVersions, object userState) {
            if ((this.DeleteDocumentsOperationCompleted == null)) {
                this.DeleteDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentsOperationCompleted);
            }
            this.InvokeAsync("DeleteDocuments", new object[] {
                        selectionId,
                        removeAllVersions}, this.DeleteDocumentsOperationCompleted, userState);
        }
        
        private void OnDeleteDocumentsOperationCompleted(object arg) {
            if ((this.DeleteDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDocumentsCompleted(this, new DeleteDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/documentmanager/PrepareDocumentsToDownload", RequestNamespace="http://filehold.com/librarymanager/documentmanager/", ResponseNamespace="http://filehold.com/librarymanager/documentmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PrepareDocumentsToDownload(System.Guid selectionId, bool includeShortcuts, bool checkingOut, ref System.Guid token, ref long fileSize, ref string fileName) {
            object[] results = this.Invoke("PrepareDocumentsToDownload", new object[] {
                        selectionId,
                        includeShortcuts,
                        checkingOut,
                        token,
                        fileSize,
                        fileName});
            token = ((System.Guid)(results[0]));
            fileSize = ((long)(results[1]));
            fileName = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void PrepareDocumentsToDownloadAsync(System.Guid selectionId, bool includeShortcuts, bool checkingOut, System.Guid token, long fileSize, string fileName) {
            this.PrepareDocumentsToDownloadAsync(selectionId, includeShortcuts, checkingOut, token, fileSize, fileName, null);
        }
        
        /// <remarks/>
        public void PrepareDocumentsToDownloadAsync(System.Guid selectionId, bool includeShortcuts, bool checkingOut, System.Guid token, long fileSize, string fileName, object userState) {
            if ((this.PrepareDocumentsToDownloadOperationCompleted == null)) {
                this.PrepareDocumentsToDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareDocumentsToDownloadOperationCompleted);
            }
            this.InvokeAsync("PrepareDocumentsToDownload", new object[] {
                        selectionId,
                        includeShortcuts,
                        checkingOut,
                        token,
                        fileSize,
                        fileName}, this.PrepareDocumentsToDownloadOperationCompleted, userState);
        }
        
        private void OnPrepareDocumentsToDownloadOperationCompleted(object arg) {
            if ((this.PrepareDocumentsToDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareDocumentsToDownloadCompleted(this, new PrepareDocumentsToDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class DownloadDocument {
        
        private int documentIdField;
        
        private int metadataVersionIdField;
        
        private int versionField;
        
        private string fileNameField;
        
        private int documentSchemaIdField;
        
        private DocumentSchemaType documentSchemaTypeField;
        
        private string locationField;
        
        private string documentNameField;
        
        private string typeNameField;
        
        private int folderIdField;
        
        /// <remarks/>
        public int DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public int MetadataVersionId {
            get {
                return this.metadataVersionIdField;
            }
            set {
                this.metadataVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public int Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentSchemaId {
            get {
                return this.documentSchemaIdField;
            }
            set {
                this.documentSchemaIdField = value;
            }
        }
        
        /// <remarks/>
        public DocumentSchemaType DocumentSchemaType {
            get {
                return this.documentSchemaTypeField;
            }
            set {
                this.documentSchemaTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public int FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public enum DocumentSchemaType {
        
        /// <remarks/>
        ElectronicDocument,
        
        /// <remarks/>
        ElectronicRecord,
        
        /// <remarks/>
        OfflineDocument,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/fulltextsearch/fulltextsearch/")]
    public partial class FTSServiceStatus {
        
        private System.DateTime compressedDateField;
        
        private System.DateTime createdDateField;
        
        private uint docCountField;
        
        private int flagsField;
        
        private uint fragmentationField;
        
        private ulong indexSizeField;
        
        private uint obsoleteCountField;
        
        private uint percentFullField;
        
        private uint structureVersionField;
        
        private System.DateTime updatedDateField;
        
        private ulong wordCountField;
        
        private int taskQueueLengthField;
        
        /// <remarks/>
        public System.DateTime CompressedDate {
            get {
                return this.compressedDateField;
            }
            set {
                this.compressedDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public uint DocCount {
            get {
                return this.docCountField;
            }
            set {
                this.docCountField = value;
            }
        }
        
        /// <remarks/>
        public int Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        /// <remarks/>
        public uint Fragmentation {
            get {
                return this.fragmentationField;
            }
            set {
                this.fragmentationField = value;
            }
        }
        
        /// <remarks/>
        public ulong IndexSize {
            get {
                return this.indexSizeField;
            }
            set {
                this.indexSizeField = value;
            }
        }
        
        /// <remarks/>
        public uint ObsoleteCount {
            get {
                return this.obsoleteCountField;
            }
            set {
                this.obsoleteCountField = value;
            }
        }
        
        /// <remarks/>
        public uint PercentFull {
            get {
                return this.percentFullField;
            }
            set {
                this.percentFullField = value;
            }
        }
        
        /// <remarks/>
        public uint StructureVersion {
            get {
                return this.structureVersionField;
            }
            set {
                this.structureVersionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdatedDate {
            get {
                return this.updatedDateField;
            }
            set {
                this.updatedDateField = value;
            }
        }
        
        /// <remarks/>
        public ulong WordCount {
            get {
                return this.wordCountField;
            }
            set {
                this.wordCountField = value;
            }
        }
        
        /// <remarks/>
        public int TaskQueueLength {
            get {
                return this.taskQueueLengthField;
            }
            set {
                this.taskQueueLengthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class DocumentWithType {
        
        private int metadataVersionIdField;
        
        private DocumentSchemaType documentSchemaTypeField;
        
        /// <remarks/>
        public int MetadataVersionId {
            get {
                return this.metadataVersionIdField;
            }
            set {
                this.metadataVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public DocumentSchemaType DocumentSchemaType {
            get {
                return this.documentSchemaTypeField;
            }
            set {
                this.documentSchemaTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class SelectionItem {
        
        private int metadataVersionIdField;
        
        private int documentIdField;
        
        private string nameField;
        
        /// <remarks/>
        public int MetadataVersionId {
            get {
                return this.metadataVersionIdField;
            }
            set {
                this.metadataVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class DocumentInSchema {
        
        private string schemaNameField;
        
        private int documentsCountField;
        
        /// <remarks/>
        public string SchemaName {
            get {
                return this.schemaNameField;
            }
            set {
                this.schemaNameField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentsCount {
            get {
                return this.documentsCountField;
            }
            set {
                this.documentsCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class SnapshotSelection {
        
        private System.Guid snapshotIdField;
        
        private bool containsExcludedField;
        
        private int[] documentIdListField;
        
        private int[] metadataVersionIdListField;
        
        /// <remarks/>
        public System.Guid SnapshotId {
            get {
                return this.snapshotIdField;
            }
            set {
                this.snapshotIdField = value;
            }
        }
        
        /// <remarks/>
        public bool ContainsExcluded {
            get {
                return this.containsExcludedField;
            }
            set {
                this.containsExcludedField = value;
            }
        }
        
        /// <remarks/>
        public int[] DocumentIdList {
            get {
                return this.documentIdListField;
            }
            set {
                this.documentIdListField = value;
            }
        }
        
        /// <remarks/>
        public int[] MetadataVersionIdList {
            get {
                return this.metadataVersionIdListField;
            }
            set {
                this.metadataVersionIdListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class Selection {
        
        private SnapshotSelection[] snapshotSelectionField;
        
        /// <remarks/>
        public SnapshotSelection[] SnapshotSelection {
            get {
                return this.snapshotSelectionField;
            }
            set {
                this.snapshotSelectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class AutoTaggingField {
        
        private int fieldIdField;
        
        private object fieldValueField;
        
        /// <remarks/>
        public int FieldId {
            get {
                return this.fieldIdField;
            }
            set {
                this.fieldIdField = value;
            }
        }
        
        /// <remarks/>
        public object FieldValue {
            get {
                return this.fieldValueField;
            }
            set {
                this.fieldValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class AutoTagging {
        
        private int documentSchemaIdField;
        
        private AutoTaggingField[] metadataFieldsField;
        
        private bool defaultForFoldersField;
        
        private bool inheritFromCabinetField;
        
        /// <remarks/>
        public int DocumentSchemaId {
            get {
                return this.documentSchemaIdField;
            }
            set {
                this.documentSchemaIdField = value;
            }
        }
        
        /// <remarks/>
        public AutoTaggingField[] MetadataFields {
            get {
                return this.metadataFieldsField;
            }
            set {
                this.metadataFieldsField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultForFolders {
            get {
                return this.defaultForFoldersField;
            }
            set {
                this.defaultForFoldersField = value;
            }
        }
        
        /// <remarks/>
        public bool InheritFromCabinet {
            get {
                return this.inheritFromCabinetField;
            }
            set {
                this.inheritFromCabinetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class DocumentInfo {
        
        private int folderIdField;
        
        private int documentSchemaIdField;
        
        private string documentNameField;
        
        private FieldWithValue[] fieldsWithValuesField;
        
        private System.Guid uploadTokenField;
        
        private string originalFileNameField;
        
        private System.Guid snapshotIdField;
        
        private bool sendEmailToMembersField;
        
        private string documentNumberField;
        
        private string versionNumberField;
        
        private string autoFilingScriptToUseField;
        
        private System.Nullable<DocumentSchemaType> documentSchemaTypeField;
        
        /// <remarks/>
        public int FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentSchemaId {
            get {
                return this.documentSchemaIdField;
            }
            set {
                this.documentSchemaIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public FieldWithValue[] FieldsWithValues {
            get {
                return this.fieldsWithValuesField;
            }
            set {
                this.fieldsWithValuesField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UploadToken {
            get {
                return this.uploadTokenField;
            }
            set {
                this.uploadTokenField = value;
            }
        }
        
        /// <remarks/>
        public string OriginalFileName {
            get {
                return this.originalFileNameField;
            }
            set {
                this.originalFileNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid SnapshotId {
            get {
                return this.snapshotIdField;
            }
            set {
                this.snapshotIdField = value;
            }
        }
        
        /// <remarks/>
        public bool SendEmailToMembers {
            get {
                return this.sendEmailToMembersField;
            }
            set {
                this.sendEmailToMembersField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentNumber {
            get {
                return this.documentNumberField;
            }
            set {
                this.documentNumberField = value;
            }
        }
        
        /// <remarks/>
        public string VersionNumber {
            get {
                return this.versionNumberField;
            }
            set {
                this.versionNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AutoFilingScriptToUse {
            get {
                return this.autoFilingScriptToUseField;
            }
            set {
                this.autoFilingScriptToUseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<DocumentSchemaType> DocumentSchemaType {
            get {
                return this.documentSchemaTypeField;
            }
            set {
                this.documentSchemaTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class FieldWithValue {
        
        private int fieldIdField;
        
        private object fieldValueField;
        
        /// <remarks/>
        public int FieldId {
            get {
                return this.fieldIdField;
            }
            set {
                this.fieldIdField = value;
            }
        }
        
        /// <remarks/>
        public object FieldValue {
            get {
                return this.fieldValueField;
            }
            set {
                this.fieldValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class AuditLogEntry {
        
        private int entryIdField;
        
        private string usernameField;
        
        private System.DateTime actionDateField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int EntryId {
            get {
                return this.entryIdField;
            }
            set {
                this.entryIdField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActionDate {
            get {
                return this.actionDateField;
            }
            set {
                this.actionDateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class FileExtension {
        
        private int idField;
        
        private string nameField;
        
        private string imageIdField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ImageId {
            get {
                return this.imageIdField;
            }
            set {
                this.imageIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public partial class EmailDocumentInfo {
        
        private int metadataVersionIdField;
        
        private string documentIconField;
        
        private string documentNameField;
        
        private string locationField;
        
        /// <remarks/>
        public int MetadataVersionId {
            get {
                return this.metadataVersionIdField;
            }
            set {
                this.metadataVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentIcon {
            get {
                return this.documentIconField;
            }
            set {
                this.documentIconField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public enum ActionType {
        
        /// <remarks/>
        CheckedOut,
        
        /// <remarks/>
        Downloaded,
        
        /// <remarks/>
        EditMetadata,
        
        /// <remarks/>
        CheckedIn,
        
        /// <remarks/>
        CheckedInNoChanges,
        
        /// <remarks/>
        AddDocument,
        
        /// <remarks/>
        ScheduledForDeletion,
        
        /// <remarks/>
        Linked,
        
        /// <remarks/>
        Moved,
        
        /// <remarks/>
        Copied,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        DocumentRecovered,
        
        /// <remarks/>
        PermanentlyDeleted,
        
        /// <remarks/>
        TransferedFrom,
        
        /// <remarks/>
        TransferedTo,
        
        /// <remarks/>
        Archived,
        
        /// <remarks/>
        CreatedByCopy,
        
        /// <remarks/>
        WorkflowInitiated,
        
        /// <remarks/>
        WorkflowCancelled,
        
        /// <remarks/>
        Viewed,
        
        /// <remarks/>
        Printed,
        
        /// <remarks/>
        Published,
        
        /// <remarks/>
        OwnerChanged,
        
        /// <remarks/>
        ConvertToDocument,
        
        /// <remarks/>
        ConvertToRecord,
        
        /// <remarks/>
        ConvertToOffline,
        
        /// <remarks/>
        Unlinked,
        
        /// <remarks/>
        RemovedFromWorkflow,
        
        /// <remarks/>
        AddedSupporting,
        
        /// <remarks/>
        RemovedSupporting,
        
        /// <remarks/>
        Notification,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/documentmanager/")]
    public enum CheckInOptions {
        
        /// <remarks/>
        CreateNewVersion,
        
        /// <remarks/>
        NoChanges,
        
        /// <remarks/>
        OverwriteCurrentVersion,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsToDownloadCompletedEventHandler(object sender, GetDocumentsToDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsToDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsToDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DownloadDocument[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadDocument[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSingleDocumentToDownloadCompletedEventHandler(object sender, GetSingleDocumentToDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleDocumentToDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleDocumentToDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DownloadDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsToCheckInCompletedEventHandler(object sender, GetDocumentsToCheckInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsToCheckInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsToCheckInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DownloadDocument[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadDocument[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PrepareSingleDocumentToDownloadCompletedEventHandler(object sender, PrepareSingleDocumentToDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareSingleDocumentToDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareSingleDocumentToDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid token {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PrepareSingleDocumentToDownloadByDocumentVersionIdCompletedEventHandler(object sender, PrepareSingleDocumentToDownloadByDocumentVersionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareSingleDocumentToDownloadByDocumentVersionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareSingleDocumentToDownloadByDocumentVersionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid token {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddUsageLogEntryForDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckOutDocumentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MoveCompletedEventHandler(object sender, MoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MoveAndEditCompletedEventHandler(object sender, MoveAndEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveAndEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveAndEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CopyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CopyAndEditCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddLinksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveLinksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RecoverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetMultiMetadataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsToSendCompletedEventHandler(object sender, GetDocumentsToSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsToSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsToSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmailDocumentInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmailDocumentInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFileExtensionsCompletedEventHandler(object sender, GetFileExtensionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileExtensionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileExtension[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileExtension[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddRemoveFavouritesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentIdCompletedEventHandler(object sender, GetDocumentIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentVersionIdCompletedEventHandler(object sender, GetDocumentVersionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentVersionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentVersionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SendEmailWithDocumentsCompletedEventHandler(object sender, SendEmailWithDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailWithDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailWithDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentUrlCompletedEventHandler(object sender, GetDocumentUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentLinkCompletedEventHandler(object sender, GetDocumentLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFTSServiceStatusCompletedEventHandler(object sender, GetFTSServiceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTSServiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTSServiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTSServiceStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTSServiceStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentOwnerGuidCompletedEventHandler(object sender, GetDocumentOwnerGuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentOwnerGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentOwnerGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLibraryAuditLogsCompletedEventHandler(object sender, GetLibraryAuditLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLibraryAuditLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLibraryAuditLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditLogEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditLogEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void InvokeUserActionCompletedEventHandler(object sender, InvokeUserActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvokeUserActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvokeUserActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddDocumentCompletedEventHandler(object sender, AddDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddDocumentWithAutoFilingCompletedEventHandler(object sender, AddDocumentWithAutoFilingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDocumentWithAutoFilingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDocumentWithAutoFilingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddDocumentInfoCompletedEventHandler(object sender, AddDocumentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDocumentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDocumentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetMetadataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IsCheckedOutCompletedEventHandler(object sender, IsCheckedOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCheckedOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCheckedOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IsCheckedOutByCompletedEventHandler(object sender, IsCheckedOutByCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCheckedOutByCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCheckedOutByCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckInDocumentsWithNoChangesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckInCompletedEventHandler(object sender, CheckInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReinstateAsLatestVersionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ChangeDocumentTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ChangeTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ConvertToOfflineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ConvertToOfflineByIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ConvertToElectronicCompletedEventHandler(object sender, ConvertToElectronicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertToElectronicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertToElectronicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ChangeDocumentsOwnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentNameCompletedEventHandler(object sender, GetDocumentNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentVersionNameCompletedEventHandler(object sender, GetDocumentVersionNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentVersionNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentVersionNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentNameAndSchemaCompletedEventHandler(object sender, GetDocumentNameAndSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentNameAndSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentNameAndSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentLocationCompletedEventHandler(object sender, GetDocumentLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAutoTaggingForDocumentCompletedEventHandler(object sender, GetAutoTaggingForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAutoTaggingForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAutoTaggingForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AutoTagging Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AutoTagging)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAutoTaggingForSelectionCompletedEventHandler(object sender, GetAutoTaggingForSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAutoTaggingForSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAutoTaggingForSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AutoTagging Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AutoTagging)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAutoTaggingForFoldersCompletedEventHandler(object sender, GetAutoTaggingForFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAutoTaggingForFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAutoTaggingForFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AutoTagging Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AutoTagging)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ArchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddShortcutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckShortcutsExistCompletedEventHandler(object sender, CheckShortcutsExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckShortcutsExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckShortcutsExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CreateSelectionCompletedEventHandler(object sender, CreateSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSelectionContentCompletedEventHandler(object sender, CheckSelectionContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSelectionContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSelectionContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool hasDocuments {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool hasShortcuts {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool hasCheckedOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool hasNotLastVersions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool hasShortcutsToCheckedInDocuments {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool hasActiveWorkflows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool hasLastVisible {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public bool hasLockedMarkups {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSelectionDeletedCompletedEventHandler(object sender, CheckSelectionDeletedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSelectionDeletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSelectionDeletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool deleted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSelectionLocationCompletedEventHandler(object sender, CheckSelectionLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSelectionLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSelectionLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool inLibrary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool inArchive {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckAllCanUnArchiveCompletedEventHandler(object sender, CheckAllCanUnArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAllCanUnArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAllCanUnArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckDocumentsInWorkflowCompletedEventHandler(object sender, CheckDocumentsInWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocumentsInWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocumentsInWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool hasActiveWorkflow {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool hasSupportingWorkflow {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsInSchemasCompletedEventHandler(object sender, GetDocumentsInSchemasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsInSchemasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsInSchemasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentInSchema[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentInSchema[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int documentsCountInAllSchemas {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsInSchemaTypeCompletedEventHandler(object sender, GetDocumentsInSchemaTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsInSchemaTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsInSchemaTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSelectionSchemaTypeCompletedEventHandler(object sender, CheckSelectionSchemaTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSelectionSchemaTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSelectionSchemaTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int firstMetadataVersionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSelectionDocumentTypeCompletedEventHandler(object sender, CheckSelectionDocumentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSelectionDocumentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSelectionDocumentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool allElectronic {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool allRecords {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool allOffline {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool allCanChangeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckAllCanChangeTypeCompletedEventHandler(object sender, CheckAllCanChangeTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAllCanChangeTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAllCanChangeTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckAllCanConvertToElectronicCompletedEventHandler(object sender, CheckAllCanConvertToElectronicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAllCanConvertToElectronicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAllCanConvertToElectronicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckDocumentTypeCompletedEventHandler(object sender, CheckDocumentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocumentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocumentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool allIncludeElectronic {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool allIncludeRecords {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool allIncludeOffline {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentsWithCustomNamingCompletedEventHandler(object sender, GetDocumentsWithCustomNamingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsWithCustomNamingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsWithCustomNamingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSelectionDocumentNumberCompletedEventHandler(object sender, CheckSelectionDocumentNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSelectionDocumentNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSelectionDocumentNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveSelectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetShortcutsFromSelectionCompletedEventHandler(object sender, GetShortcutsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetShortcutsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetShortcutsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCheckedOutDocumentsFromSelectionCompletedEventHandler(object sender, GetCheckedOutDocumentsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckedOutDocumentsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckedOutDocumentsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetActiveWorkflowDocumentsFromSelectionCompletedEventHandler(object sender, GetActiveWorkflowDocumentsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveWorkflowDocumentsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveWorkflowDocumentsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetActiveWorkflowDocumentsForCheckOutCompletedEventHandler(object sender, GetActiveWorkflowDocumentsForCheckOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveWorkflowDocumentsForCheckOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveWorkflowDocumentsForCheckOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLastVisibleVersionsFromSelectionCompletedEventHandler(object sender, GetLastVisibleVersionsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastVisibleVersionsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastVisibleVersionsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetNotLastVersionsFromSelectionCompletedEventHandler(object sender, GetNotLastVersionsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNotLastVersionsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNotLastVersionsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLockedMarkupDocumentsFromSelectionCompletedEventHandler(object sender, GetLockedMarkupDocumentsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLockedMarkupDocumentsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLockedMarkupDocumentsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] names {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSelectionContentCompletedEventHandler(object sender, GetSelectionContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSelectionContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSelectionContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SelectionItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SelectionItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetBinaryVersionsFromSelectionCompletedEventHandler(object sender, GetBinaryVersionsFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBinaryVersionsFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBinaryVersionsFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSchemaTypesFromSelectionCompletedEventHandler(object sender, GetSchemaTypesFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaTypesFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaTypesFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentWithType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentWithType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CreateWorkingDocumentSelectionCompletedEventHandler(object sender, CreateWorkingDocumentSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWorkingDocumentSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWorkingDocumentSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDocumentSchemaFromSelectionCompletedEventHandler(object sender, GetDocumentSchemaFromSelectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentSchemaFromSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentSchemaFromSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteDocumentsCompletedEventHandler(object sender, DeleteDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PrepareDocumentsToDownloadCompletedEventHandler(object sender, PrepareDocumentsToDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareDocumentsToDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareDocumentsToDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid token {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591