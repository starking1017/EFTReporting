//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.UserPreferencesService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UserPreferencesSoap", Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class UserPreferences : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetUserMiscSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAdvancedSearchSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserAdvancedSearchSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAdvancedSearchSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetAdvancedSearchSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdvancedSearchSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdvancedSearchSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAdvancedSearchSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDontShowMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DontShowMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetAllMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDownloadPreferencesInWebClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserDownloadPreferencesInWebClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewDetailsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddViewForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFixedViewPageSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePersonalViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultViewForContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParentViewForContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultViewForContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetCustomViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewPageSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveADAMObjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAlertSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserAlertSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAlertSystemSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetAlertSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlertSystemSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlertSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAlertSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAlertsAsReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetReminderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateReminderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveReminderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemindersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReminderDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkRemindersAsReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWorkflowNotificationsSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserWorkflowNotificationSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWorkflowNotificationsSystemSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetWorkflowNotificationsSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowNotificationsSystemSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowNotificationsSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserWorkflowNotificationsSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserPreferencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPreferencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFDAAdvancedSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserFDAAdvancedSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFDAAdvancedSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetFDAAdvancedSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFDAAdvancedSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFDAAdvancedSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserFDAAdvancedSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFastFindSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFastFindSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetFastFindSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFastFindSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFastFindSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMiscSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserMiscSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMiscSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetMiscSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMiscSettingsSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMiscSettingsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UserPreferences() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_UserPreferencesService_UserPreferences;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetUserMiscSettingsCompletedEventHandler GetUserMiscSettingsCompleted;
        
        /// <remarks/>
        public event SetAdvancedSearchSettingsCompletedEventHandler SetAdvancedSearchSettingsCompleted;
        
        /// <remarks/>
        public event SetUserAdvancedSearchSettingsCompletedEventHandler SetUserAdvancedSearchSettingsCompleted;
        
        /// <remarks/>
        public event SetAdvancedSearchSettingsSystemCompletedEventHandler SetAdvancedSearchSettingsSystemCompleted;
        
        /// <remarks/>
        public event ResetAdvancedSearchSettingsSystemCompletedEventHandler ResetAdvancedSearchSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetAdvancedSearchSettingsSystemCompletedEventHandler GetAdvancedSearchSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetAdvancedSearchSettingsCompletedEventHandler GetAdvancedSearchSettingsCompleted;
        
        /// <remarks/>
        public event GetUserAdvancedSearchSettingsCompletedEventHandler GetUserAdvancedSearchSettingsCompleted;
        
        /// <remarks/>
        public event GetDontShowMessageCompletedEventHandler GetDontShowMessageCompleted;
        
        /// <remarks/>
        public event DontShowMessageCompletedEventHandler DontShowMessageCompleted;
        
        /// <remarks/>
        public event ResetAllMessagesCompletedEventHandler ResetAllMessagesCompleted;
        
        /// <remarks/>
        public event GetUserDownloadPreferencesInWebClientCompletedEventHandler GetUserDownloadPreferencesInWebClientCompleted;
        
        /// <remarks/>
        public event SetUserDownloadPreferencesInWebClientCompletedEventHandler SetUserDownloadPreferencesInWebClientCompleted;
        
        /// <remarks/>
        public event GetSystemFieldsCompletedEventHandler GetSystemFieldsCompleted;
        
        /// <remarks/>
        public event GetSchemaFieldsCompletedEventHandler GetSchemaFieldsCompleted;
        
        /// <remarks/>
        public event GetViewsCompletedEventHandler GetViewsCompleted;
        
        /// <remarks/>
        public event GetViewsForUserCompletedEventHandler GetViewsForUserCompleted;
        
        /// <remarks/>
        public event GetViewDetailsCompletedEventHandler GetViewDetailsCompleted;
        
        /// <remarks/>
        public event GetViewDetailsForUserCompletedEventHandler GetViewDetailsForUserCompleted;
        
        /// <remarks/>
        public event AddViewCompletedEventHandler AddViewCompleted;
        
        /// <remarks/>
        public event AddViewForUserCompletedEventHandler AddViewForUserCompleted;
        
        /// <remarks/>
        public event UpdateViewCompletedEventHandler UpdateViewCompleted;
        
        /// <remarks/>
        public event SetFixedViewPageSizeCompletedEventHandler SetFixedViewPageSizeCompleted;
        
        /// <remarks/>
        public event RemoveViewCompletedEventHandler RemoveViewCompleted;
        
        /// <remarks/>
        public event SavePersonalViewCompletedEventHandler SavePersonalViewCompleted;
        
        /// <remarks/>
        public event GetDefaultViewForContextCompletedEventHandler GetDefaultViewForContextCompleted;
        
        /// <remarks/>
        public event GetParentViewForContextCompletedEventHandler GetParentViewForContextCompleted;
        
        /// <remarks/>
        public event SetDefaultViewForContextCompletedEventHandler SetDefaultViewForContextCompleted;
        
        /// <remarks/>
        public event GetViewSettingsCompletedEventHandler GetViewSettingsCompleted;
        
        /// <remarks/>
        public event SetCustomViewCompletedEventHandler SetCustomViewCompleted;
        
        /// <remarks/>
        public event SetDefaultViewCompletedEventHandler SetDefaultViewCompleted;
        
        /// <remarks/>
        public event GetCustomViewCompletedEventHandler GetCustomViewCompleted;
        
        /// <remarks/>
        public event ResetCustomViewCompletedEventHandler ResetCustomViewCompleted;
        
        /// <remarks/>
        public event GetViewPageSizeCompletedEventHandler GetViewPageSizeCompleted;
        
        /// <remarks/>
        public event RemoveADAMObjectsCompletedEventHandler RemoveADAMObjectsCompleted;
        
        /// <remarks/>
        public event SetAlertSettingsCompletedEventHandler SetAlertSettingsCompleted;
        
        /// <remarks/>
        public event SetUserAlertSettingsCompletedEventHandler SetUserAlertSettingsCompleted;
        
        /// <remarks/>
        public event SetAlertSystemSettingsCompletedEventHandler SetAlertSystemSettingsCompleted;
        
        /// <remarks/>
        public event ResetAlertSettingsCompletedEventHandler ResetAlertSettingsCompleted;
        
        /// <remarks/>
        public event GetAlertSystemSettingsCompletedEventHandler GetAlertSystemSettingsCompleted;
        
        /// <remarks/>
        public event GetAlertSettingsCompletedEventHandler GetAlertSettingsCompleted;
        
        /// <remarks/>
        public event GetUserAlertSettingsCompletedEventHandler GetUserAlertSettingsCompleted;
        
        /// <remarks/>
        public event AddAlertCompletedEventHandler AddAlertCompleted;
        
        /// <remarks/>
        public event RemoveAlertCompletedEventHandler RemoveAlertCompleted;
        
        /// <remarks/>
        public event GetAlertsCompletedEventHandler GetAlertsCompleted;
        
        /// <remarks/>
        public event MarkAlertsAsReadCompletedEventHandler MarkAlertsAsReadCompleted;
        
        /// <remarks/>
        public event SetReminderCompletedEventHandler SetReminderCompleted;
        
        /// <remarks/>
        public event UpdateReminderCompletedEventHandler UpdateReminderCompleted;
        
        /// <remarks/>
        public event RemoveReminderCompletedEventHandler RemoveReminderCompleted;
        
        /// <remarks/>
        public event GetRemindersCompletedEventHandler GetRemindersCompleted;
        
        /// <remarks/>
        public event GetReminderDetailsCompletedEventHandler GetReminderDetailsCompleted;
        
        /// <remarks/>
        public event MarkRemindersAsReadCompletedEventHandler MarkRemindersAsReadCompleted;
        
        /// <remarks/>
        public event SetWorkflowNotificationsSettingsCompletedEventHandler SetWorkflowNotificationsSettingsCompleted;
        
        /// <remarks/>
        public event SetUserWorkflowNotificationSettingsCompletedEventHandler SetUserWorkflowNotificationSettingsCompleted;
        
        /// <remarks/>
        public event SetWorkflowNotificationsSystemSettingsCompletedEventHandler SetWorkflowNotificationsSystemSettingsCompleted;
        
        /// <remarks/>
        public event ResetWorkflowNotificationsSettingsCompletedEventHandler ResetWorkflowNotificationsSettingsCompleted;
        
        /// <remarks/>
        public event GetWorkflowNotificationsSystemSettingsCompletedEventHandler GetWorkflowNotificationsSystemSettingsCompleted;
        
        /// <remarks/>
        public event GetWorkflowNotificationsSettingsCompletedEventHandler GetWorkflowNotificationsSettingsCompleted;
        
        /// <remarks/>
        public event GetUserWorkflowNotificationsSettingsCompletedEventHandler GetUserWorkflowNotificationsSettingsCompleted;
        
        /// <remarks/>
        public event SetDefaultTimeZoneCompletedEventHandler SetDefaultTimeZoneCompleted;
        
        /// <remarks/>
        public event GetDefaultTimeZoneCompletedEventHandler GetDefaultTimeZoneCompleted;
        
        /// <remarks/>
        public event SetTimeZoneCompletedEventHandler SetTimeZoneCompleted;
        
        /// <remarks/>
        public event GetTimeZoneCompletedEventHandler GetTimeZoneCompleted;
        
        /// <remarks/>
        public event SetUserLanguageCompletedEventHandler SetUserLanguageCompleted;
        
        /// <remarks/>
        public event SetUserPreferencesCompletedEventHandler SetUserPreferencesCompleted;
        
        /// <remarks/>
        public event GetUserLanguageCompletedEventHandler GetUserLanguageCompleted;
        
        /// <remarks/>
        public event GetUserPreferencesCompletedEventHandler GetUserPreferencesCompleted;
        
        /// <remarks/>
        public event SetFDAAdvancedSettingsCompletedEventHandler SetFDAAdvancedSettingsCompleted;
        
        /// <remarks/>
        public event SetUserFDAAdvancedSettingsCompletedEventHandler SetUserFDAAdvancedSettingsCompleted;
        
        /// <remarks/>
        public event SetFDAAdvancedSettingsSystemCompletedEventHandler SetFDAAdvancedSettingsSystemCompleted;
        
        /// <remarks/>
        public event ResetFDAAdvancedSettingsSystemCompletedEventHandler ResetFDAAdvancedSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetFDAAdvancedSettingsSystemCompletedEventHandler GetFDAAdvancedSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetFDAAdvancedSettingsCompletedEventHandler GetFDAAdvancedSettingsCompleted;
        
        /// <remarks/>
        public event GetUserFDAAdvancedSettingsCompletedEventHandler GetUserFDAAdvancedSettingsCompleted;
        
        /// <remarks/>
        public event SetFastFindSettingsCompletedEventHandler SetFastFindSettingsCompleted;
        
        /// <remarks/>
        public event SetFastFindSettingsSystemCompletedEventHandler SetFastFindSettingsSystemCompleted;
        
        /// <remarks/>
        public event ResetFastFindSettingsSystemCompletedEventHandler ResetFastFindSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetFastFindSettingsSystemCompletedEventHandler GetFastFindSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetFastFindSettingsCompletedEventHandler GetFastFindSettingsCompleted;
        
        /// <remarks/>
        public event SetMiscSettingsCompletedEventHandler SetMiscSettingsCompleted;
        
        /// <remarks/>
        public event SetUserMiscSettingsCompletedEventHandler SetUserMiscSettingsCompleted;
        
        /// <remarks/>
        public event SetMiscSettingsSystemCompletedEventHandler SetMiscSettingsSystemCompleted;
        
        /// <remarks/>
        public event ResetMiscSettingsSystemCompletedEventHandler ResetMiscSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetMiscSettingsSystemCompletedEventHandler GetMiscSettingsSystemCompleted;
        
        /// <remarks/>
        public event GetMiscSettingsCompletedEventHandler GetMiscSettingsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserMiscSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MiscSettings GetUserMiscSettings(System.Guid userGuid) {
            object[] results = this.Invoke("GetUserMiscSettings", new object[] {
                        userGuid});
            return ((MiscSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserMiscSettingsAsync(System.Guid userGuid) {
            this.GetUserMiscSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserMiscSettingsAsync(System.Guid userGuid, object userState) {
            if ((this.GetUserMiscSettingsOperationCompleted == null)) {
                this.GetUserMiscSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserMiscSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserMiscSettings", new object[] {
                        userGuid}, this.GetUserMiscSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserMiscSettingsOperationCompleted(object arg) {
            if ((this.GetUserMiscSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserMiscSettingsCompleted(this, new GetUserMiscSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetAdvancedSearchSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAdvancedSearchSettings(AdvancedSearchSettings settings) {
            this.Invoke("SetAdvancedSearchSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetAdvancedSearchSettingsAsync(AdvancedSearchSettings settings) {
            this.SetAdvancedSearchSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetAdvancedSearchSettingsAsync(AdvancedSearchSettings settings, object userState) {
            if ((this.SetAdvancedSearchSettingsOperationCompleted == null)) {
                this.SetAdvancedSearchSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAdvancedSearchSettingsOperationCompleted);
            }
            this.InvokeAsync("SetAdvancedSearchSettings", new object[] {
                        settings}, this.SetAdvancedSearchSettingsOperationCompleted, userState);
        }
        
        private void OnSetAdvancedSearchSettingsOperationCompleted(object arg) {
            if ((this.SetAdvancedSearchSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAdvancedSearchSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserAdvancedSearchSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserAdvancedSearchSettings(System.Guid userGuid, AdvancedSearchSettings settings) {
            this.Invoke("SetUserAdvancedSearchSettings", new object[] {
                        userGuid,
                        settings});
        }
        
        /// <remarks/>
        public void SetUserAdvancedSearchSettingsAsync(System.Guid userGuid, AdvancedSearchSettings settings) {
            this.SetUserAdvancedSearchSettingsAsync(userGuid, settings, null);
        }
        
        /// <remarks/>
        public void SetUserAdvancedSearchSettingsAsync(System.Guid userGuid, AdvancedSearchSettings settings, object userState) {
            if ((this.SetUserAdvancedSearchSettingsOperationCompleted == null)) {
                this.SetUserAdvancedSearchSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserAdvancedSearchSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserAdvancedSearchSettings", new object[] {
                        userGuid,
                        settings}, this.SetUserAdvancedSearchSettingsOperationCompleted, userState);
        }
        
        private void OnSetUserAdvancedSearchSettingsOperationCompleted(object arg) {
            if ((this.SetUserAdvancedSearchSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserAdvancedSearchSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetAdvancedSearchSettingsSyste" +
            "m", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAdvancedSearchSettingsSystem(AdvancedSearchSettings settings) {
            this.Invoke("SetAdvancedSearchSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetAdvancedSearchSettingsSystemAsync(AdvancedSearchSettings settings) {
            this.SetAdvancedSearchSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetAdvancedSearchSettingsSystemAsync(AdvancedSearchSettings settings, object userState) {
            if ((this.SetAdvancedSearchSettingsSystemOperationCompleted == null)) {
                this.SetAdvancedSearchSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAdvancedSearchSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("SetAdvancedSearchSettingsSystem", new object[] {
                        settings}, this.SetAdvancedSearchSettingsSystemOperationCompleted, userState);
        }
        
        private void OnSetAdvancedSearchSettingsSystemOperationCompleted(object arg) {
            if ((this.SetAdvancedSearchSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAdvancedSearchSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetAdvancedSearchSettingsSys" +
            "tem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetAdvancedSearchSettingsSystem(AdvancedSearchSettings settings) {
            this.Invoke("ResetAdvancedSearchSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void ResetAdvancedSearchSettingsSystemAsync(AdvancedSearchSettings settings) {
            this.ResetAdvancedSearchSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void ResetAdvancedSearchSettingsSystemAsync(AdvancedSearchSettings settings, object userState) {
            if ((this.ResetAdvancedSearchSettingsSystemOperationCompleted == null)) {
                this.ResetAdvancedSearchSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetAdvancedSearchSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("ResetAdvancedSearchSettingsSystem", new object[] {
                        settings}, this.ResetAdvancedSearchSettingsSystemOperationCompleted, userState);
        }
        
        private void OnResetAdvancedSearchSettingsSystemOperationCompleted(object arg) {
            if ((this.ResetAdvancedSearchSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetAdvancedSearchSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetAdvancedSearchSettingsSyste" +
            "m", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AdvancedSearchSettings GetAdvancedSearchSettingsSystem() {
            object[] results = this.Invoke("GetAdvancedSearchSettingsSystem", new object[0]);
            return ((AdvancedSearchSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdvancedSearchSettingsSystemAsync() {
            this.GetAdvancedSearchSettingsSystemAsync(null);
        }
        
        /// <remarks/>
        public void GetAdvancedSearchSettingsSystemAsync(object userState) {
            if ((this.GetAdvancedSearchSettingsSystemOperationCompleted == null)) {
                this.GetAdvancedSearchSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdvancedSearchSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("GetAdvancedSearchSettingsSystem", new object[0], this.GetAdvancedSearchSettingsSystemOperationCompleted, userState);
        }
        
        private void OnGetAdvancedSearchSettingsSystemOperationCompleted(object arg) {
            if ((this.GetAdvancedSearchSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdvancedSearchSettingsSystemCompleted(this, new GetAdvancedSearchSettingsSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetAdvancedSearchSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AdvancedSearchSettings GetAdvancedSearchSettings() {
            object[] results = this.Invoke("GetAdvancedSearchSettings", new object[0]);
            return ((AdvancedSearchSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdvancedSearchSettingsAsync() {
            this.GetAdvancedSearchSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetAdvancedSearchSettingsAsync(object userState) {
            if ((this.GetAdvancedSearchSettingsOperationCompleted == null)) {
                this.GetAdvancedSearchSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdvancedSearchSettingsOperationCompleted);
            }
            this.InvokeAsync("GetAdvancedSearchSettings", new object[0], this.GetAdvancedSearchSettingsOperationCompleted, userState);
        }
        
        private void OnGetAdvancedSearchSettingsOperationCompleted(object arg) {
            if ((this.GetAdvancedSearchSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdvancedSearchSettingsCompleted(this, new GetAdvancedSearchSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserAdvancedSearchSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AdvancedSearchSettings GetUserAdvancedSearchSettings(System.Guid userGuid) {
            object[] results = this.Invoke("GetUserAdvancedSearchSettings", new object[] {
                        userGuid});
            return ((AdvancedSearchSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAdvancedSearchSettingsAsync(System.Guid userGuid) {
            this.GetUserAdvancedSearchSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserAdvancedSearchSettingsAsync(System.Guid userGuid, object userState) {
            if ((this.GetUserAdvancedSearchSettingsOperationCompleted == null)) {
                this.GetUserAdvancedSearchSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAdvancedSearchSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserAdvancedSearchSettings", new object[] {
                        userGuid}, this.GetUserAdvancedSearchSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserAdvancedSearchSettingsOperationCompleted(object arg) {
            if ((this.GetUserAdvancedSearchSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAdvancedSearchSettingsCompleted(this, new GetUserAdvancedSearchSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetDontShowMessage", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDontShowMessage(string messageId) {
            object[] results = this.Invoke("GetDontShowMessage", new object[] {
                        messageId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDontShowMessageAsync(string messageId) {
            this.GetDontShowMessageAsync(messageId, null);
        }
        
        /// <remarks/>
        public void GetDontShowMessageAsync(string messageId, object userState) {
            if ((this.GetDontShowMessageOperationCompleted == null)) {
                this.GetDontShowMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDontShowMessageOperationCompleted);
            }
            this.InvokeAsync("GetDontShowMessage", new object[] {
                        messageId}, this.GetDontShowMessageOperationCompleted, userState);
        }
        
        private void OnGetDontShowMessageOperationCompleted(object arg) {
            if ((this.GetDontShowMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDontShowMessageCompleted(this, new GetDontShowMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/DontShowMessage", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DontShowMessage(string messageId) {
            this.Invoke("DontShowMessage", new object[] {
                        messageId});
        }
        
        /// <remarks/>
        public void DontShowMessageAsync(string messageId) {
            this.DontShowMessageAsync(messageId, null);
        }
        
        /// <remarks/>
        public void DontShowMessageAsync(string messageId, object userState) {
            if ((this.DontShowMessageOperationCompleted == null)) {
                this.DontShowMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDontShowMessageOperationCompleted);
            }
            this.InvokeAsync("DontShowMessage", new object[] {
                        messageId}, this.DontShowMessageOperationCompleted, userState);
        }
        
        private void OnDontShowMessageOperationCompleted(object arg) {
            if ((this.DontShowMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DontShowMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetAllMessages", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetAllMessages() {
            this.Invoke("ResetAllMessages", new object[0]);
        }
        
        /// <remarks/>
        public void ResetAllMessagesAsync() {
            this.ResetAllMessagesAsync(null);
        }
        
        /// <remarks/>
        public void ResetAllMessagesAsync(object userState) {
            if ((this.ResetAllMessagesOperationCompleted == null)) {
                this.ResetAllMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetAllMessagesOperationCompleted);
            }
            this.InvokeAsync("ResetAllMessages", new object[0], this.ResetAllMessagesOperationCompleted, userState);
        }
        
        private void OnResetAllMessagesOperationCompleted(object arg) {
            if ((this.ResetAllMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetAllMessagesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserDownloadPreferencesInWe" +
            "bClient", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DownloadPreferences GetUserDownloadPreferencesInWebClient() {
            object[] results = this.Invoke("GetUserDownloadPreferencesInWebClient", new object[0]);
            return ((DownloadPreferences)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDownloadPreferencesInWebClientAsync() {
            this.GetUserDownloadPreferencesInWebClientAsync(null);
        }
        
        /// <remarks/>
        public void GetUserDownloadPreferencesInWebClientAsync(object userState) {
            if ((this.GetUserDownloadPreferencesInWebClientOperationCompleted == null)) {
                this.GetUserDownloadPreferencesInWebClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDownloadPreferencesInWebClientOperationCompleted);
            }
            this.InvokeAsync("GetUserDownloadPreferencesInWebClient", new object[0], this.GetUserDownloadPreferencesInWebClientOperationCompleted, userState);
        }
        
        private void OnGetUserDownloadPreferencesInWebClientOperationCompleted(object arg) {
            if ((this.GetUserDownloadPreferencesInWebClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDownloadPreferencesInWebClientCompleted(this, new GetUserDownloadPreferencesInWebClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserDownloadPreferencesInWe" +
            "bClient", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserDownloadPreferencesInWebClient(DownloadPreferences downloadPreferences) {
            this.Invoke("SetUserDownloadPreferencesInWebClient", new object[] {
                        downloadPreferences});
        }
        
        /// <remarks/>
        public void SetUserDownloadPreferencesInWebClientAsync(DownloadPreferences downloadPreferences) {
            this.SetUserDownloadPreferencesInWebClientAsync(downloadPreferences, null);
        }
        
        /// <remarks/>
        public void SetUserDownloadPreferencesInWebClientAsync(DownloadPreferences downloadPreferences, object userState) {
            if ((this.SetUserDownloadPreferencesInWebClientOperationCompleted == null)) {
                this.SetUserDownloadPreferencesInWebClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserDownloadPreferencesInWebClientOperationCompleted);
            }
            this.InvokeAsync("SetUserDownloadPreferencesInWebClient", new object[] {
                        downloadPreferences}, this.SetUserDownloadPreferencesInWebClientOperationCompleted, userState);
        }
        
        private void OnSetUserDownloadPreferencesInWebClientOperationCompleted(object arg) {
            if ((this.SetUserDownloadPreferencesInWebClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserDownloadPreferencesInWebClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetSystemFields", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewColumn[] GetSystemFields(string containerType) {
            object[] results = this.Invoke("GetSystemFields", new object[] {
                        containerType});
            return ((ViewColumn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemFieldsAsync(string containerType) {
            this.GetSystemFieldsAsync(containerType, null);
        }
        
        /// <remarks/>
        public void GetSystemFieldsAsync(string containerType, object userState) {
            if ((this.GetSystemFieldsOperationCompleted == null)) {
                this.GetSystemFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemFieldsOperationCompleted);
            }
            this.InvokeAsync("GetSystemFields", new object[] {
                        containerType}, this.GetSystemFieldsOperationCompleted, userState);
        }
        
        private void OnGetSystemFieldsOperationCompleted(object arg) {
            if ((this.GetSystemFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemFieldsCompleted(this, new GetSystemFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetSchemaFields", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewColumn[] GetSchemaFields() {
            object[] results = this.Invoke("GetSchemaFields", new object[0]);
            return ((ViewColumn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaFieldsAsync() {
            this.GetSchemaFieldsAsync(null);
        }
        
        /// <remarks/>
        public void GetSchemaFieldsAsync(object userState) {
            if ((this.GetSchemaFieldsOperationCompleted == null)) {
                this.GetSchemaFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaFieldsOperationCompleted);
            }
            this.InvokeAsync("GetSchemaFields", new object[0], this.GetSchemaFieldsOperationCompleted, userState);
        }
        
        private void OnGetSchemaFieldsOperationCompleted(object arg) {
            if ((this.GetSchemaFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaFieldsCompleted(this, new GetSchemaFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetViews", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewDefinition[] GetViews(string containerType) {
            object[] results = this.Invoke("GetViews", new object[] {
                        containerType});
            return ((ViewDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetViewsAsync(string containerType) {
            this.GetViewsAsync(containerType, null);
        }
        
        /// <remarks/>
        public void GetViewsAsync(string containerType, object userState) {
            if ((this.GetViewsOperationCompleted == null)) {
                this.GetViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewsOperationCompleted);
            }
            this.InvokeAsync("GetViews", new object[] {
                        containerType}, this.GetViewsOperationCompleted, userState);
        }
        
        private void OnGetViewsOperationCompleted(object arg) {
            if ((this.GetViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewsCompleted(this, new GetViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetViewsForUser", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewDefinition[] GetViewsForUser(string containerType, System.Guid userId) {
            object[] results = this.Invoke("GetViewsForUser", new object[] {
                        containerType,
                        userId});
            return ((ViewDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetViewsForUserAsync(string containerType, System.Guid userId) {
            this.GetViewsForUserAsync(containerType, userId, null);
        }
        
        /// <remarks/>
        public void GetViewsForUserAsync(string containerType, System.Guid userId, object userState) {
            if ((this.GetViewsForUserOperationCompleted == null)) {
                this.GetViewsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewsForUserOperationCompleted);
            }
            this.InvokeAsync("GetViewsForUser", new object[] {
                        containerType,
                        userId}, this.GetViewsForUserOperationCompleted, userState);
        }
        
        private void OnGetViewsForUserOperationCompleted(object arg) {
            if ((this.GetViewsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewsForUserCompleted(this, new GetViewsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetViewDetails", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewDefinition GetViewDetails(int viewId) {
            object[] results = this.Invoke("GetViewDetails", new object[] {
                        viewId});
            return ((ViewDefinition)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewDetailsAsync(int viewId) {
            this.GetViewDetailsAsync(viewId, null);
        }
        
        /// <remarks/>
        public void GetViewDetailsAsync(int viewId, object userState) {
            if ((this.GetViewDetailsOperationCompleted == null)) {
                this.GetViewDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewDetailsOperationCompleted);
            }
            this.InvokeAsync("GetViewDetails", new object[] {
                        viewId}, this.GetViewDetailsOperationCompleted, userState);
        }
        
        private void OnGetViewDetailsOperationCompleted(object arg) {
            if ((this.GetViewDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewDetailsCompleted(this, new GetViewDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetViewDetailsForUser", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewDefinition GetViewDetailsForUser(int viewId, System.Guid userId) {
            object[] results = this.Invoke("GetViewDetailsForUser", new object[] {
                        viewId,
                        userId});
            return ((ViewDefinition)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewDetailsForUserAsync(int viewId, System.Guid userId) {
            this.GetViewDetailsForUserAsync(viewId, userId, null);
        }
        
        /// <remarks/>
        public void GetViewDetailsForUserAsync(int viewId, System.Guid userId, object userState) {
            if ((this.GetViewDetailsForUserOperationCompleted == null)) {
                this.GetViewDetailsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewDetailsForUserOperationCompleted);
            }
            this.InvokeAsync("GetViewDetailsForUser", new object[] {
                        viewId,
                        userId}, this.GetViewDetailsForUserOperationCompleted, userState);
        }
        
        private void OnGetViewDetailsForUserOperationCompleted(object arg) {
            if ((this.GetViewDetailsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewDetailsForUserCompleted(this, new GetViewDetailsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/AddView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddView(ViewDefinition view) {
            object[] results = this.Invoke("AddView", new object[] {
                        view});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddViewAsync(ViewDefinition view) {
            this.AddViewAsync(view, null);
        }
        
        /// <remarks/>
        public void AddViewAsync(ViewDefinition view, object userState) {
            if ((this.AddViewOperationCompleted == null)) {
                this.AddViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddViewOperationCompleted);
            }
            this.InvokeAsync("AddView", new object[] {
                        view}, this.AddViewOperationCompleted, userState);
        }
        
        private void OnAddViewOperationCompleted(object arg) {
            if ((this.AddViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddViewCompleted(this, new AddViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/AddViewForUser", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddViewForUser(ViewDefinition view, System.Guid userId) {
            object[] results = this.Invoke("AddViewForUser", new object[] {
                        view,
                        userId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddViewForUserAsync(ViewDefinition view, System.Guid userId) {
            this.AddViewForUserAsync(view, userId, null);
        }
        
        /// <remarks/>
        public void AddViewForUserAsync(ViewDefinition view, System.Guid userId, object userState) {
            if ((this.AddViewForUserOperationCompleted == null)) {
                this.AddViewForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddViewForUserOperationCompleted);
            }
            this.InvokeAsync("AddViewForUser", new object[] {
                        view,
                        userId}, this.AddViewForUserOperationCompleted, userState);
        }
        
        private void OnAddViewForUserOperationCompleted(object arg) {
            if ((this.AddViewForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddViewForUserCompleted(this, new AddViewForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/UpdateView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateView(ViewDefinition view) {
            this.Invoke("UpdateView", new object[] {
                        view});
        }
        
        /// <remarks/>
        public void UpdateViewAsync(ViewDefinition view) {
            this.UpdateViewAsync(view, null);
        }
        
        /// <remarks/>
        public void UpdateViewAsync(ViewDefinition view, object userState) {
            if ((this.UpdateViewOperationCompleted == null)) {
                this.UpdateViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateViewOperationCompleted);
            }
            this.InvokeAsync("UpdateView", new object[] {
                        view}, this.UpdateViewOperationCompleted, userState);
        }
        
        private void OnUpdateViewOperationCompleted(object arg) {
            if ((this.UpdateViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetFixedViewPageSize", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFixedViewPageSize(string containerType, int pageSize) {
            this.Invoke("SetFixedViewPageSize", new object[] {
                        containerType,
                        pageSize});
        }
        
        /// <remarks/>
        public void SetFixedViewPageSizeAsync(string containerType, int pageSize) {
            this.SetFixedViewPageSizeAsync(containerType, pageSize, null);
        }
        
        /// <remarks/>
        public void SetFixedViewPageSizeAsync(string containerType, int pageSize, object userState) {
            if ((this.SetFixedViewPageSizeOperationCompleted == null)) {
                this.SetFixedViewPageSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFixedViewPageSizeOperationCompleted);
            }
            this.InvokeAsync("SetFixedViewPageSize", new object[] {
                        containerType,
                        pageSize}, this.SetFixedViewPageSizeOperationCompleted, userState);
        }
        
        private void OnSetFixedViewPageSizeOperationCompleted(object arg) {
            if ((this.SetFixedViewPageSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFixedViewPageSizeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/RemoveView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveView(int viewId) {
            this.Invoke("RemoveView", new object[] {
                        viewId});
        }
        
        /// <remarks/>
        public void RemoveViewAsync(int viewId) {
            this.RemoveViewAsync(viewId, null);
        }
        
        /// <remarks/>
        public void RemoveViewAsync(int viewId, object userState) {
            if ((this.RemoveViewOperationCompleted == null)) {
                this.RemoveViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveViewOperationCompleted);
            }
            this.InvokeAsync("RemoveView", new object[] {
                        viewId}, this.RemoveViewOperationCompleted, userState);
        }
        
        private void OnRemoveViewOperationCompleted(object arg) {
            if ((this.RemoveViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SavePersonalView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SavePersonalView(DefaultView context, ViewDefinition view) {
            object[] results = this.Invoke("SavePersonalView", new object[] {
                        context,
                        view});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SavePersonalViewAsync(DefaultView context, ViewDefinition view) {
            this.SavePersonalViewAsync(context, view, null);
        }
        
        /// <remarks/>
        public void SavePersonalViewAsync(DefaultView context, ViewDefinition view, object userState) {
            if ((this.SavePersonalViewOperationCompleted == null)) {
                this.SavePersonalViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePersonalViewOperationCompleted);
            }
            this.InvokeAsync("SavePersonalView", new object[] {
                        context,
                        view}, this.SavePersonalViewOperationCompleted, userState);
        }
        
        private void OnSavePersonalViewOperationCompleted(object arg) {
            if ((this.SavePersonalViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePersonalViewCompleted(this, new SavePersonalViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetDefaultViewForContext", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DefaultView GetDefaultViewForContext(DefaultView context) {
            object[] results = this.Invoke("GetDefaultViewForContext", new object[] {
                        context});
            return ((DefaultView)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultViewForContextAsync(DefaultView context) {
            this.GetDefaultViewForContextAsync(context, null);
        }
        
        /// <remarks/>
        public void GetDefaultViewForContextAsync(DefaultView context, object userState) {
            if ((this.GetDefaultViewForContextOperationCompleted == null)) {
                this.GetDefaultViewForContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultViewForContextOperationCompleted);
            }
            this.InvokeAsync("GetDefaultViewForContext", new object[] {
                        context}, this.GetDefaultViewForContextOperationCompleted, userState);
        }
        
        private void OnGetDefaultViewForContextOperationCompleted(object arg) {
            if ((this.GetDefaultViewForContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultViewForContextCompleted(this, new GetDefaultViewForContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetParentViewForContext", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DefaultView GetParentViewForContext(DefaultView context) {
            object[] results = this.Invoke("GetParentViewForContext", new object[] {
                        context});
            return ((DefaultView)(results[0]));
        }
        
        /// <remarks/>
        public void GetParentViewForContextAsync(DefaultView context) {
            this.GetParentViewForContextAsync(context, null);
        }
        
        /// <remarks/>
        public void GetParentViewForContextAsync(DefaultView context, object userState) {
            if ((this.GetParentViewForContextOperationCompleted == null)) {
                this.GetParentViewForContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParentViewForContextOperationCompleted);
            }
            this.InvokeAsync("GetParentViewForContext", new object[] {
                        context}, this.GetParentViewForContextOperationCompleted, userState);
        }
        
        private void OnGetParentViewForContextOperationCompleted(object arg) {
            if ((this.GetParentViewForContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParentViewForContextCompleted(this, new GetParentViewForContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetDefaultViewForContext", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDefaultViewForContext(DefaultView context, bool forceAllUsers, bool forceChildObjects) {
            this.Invoke("SetDefaultViewForContext", new object[] {
                        context,
                        forceAllUsers,
                        forceChildObjects});
        }
        
        /// <remarks/>
        public void SetDefaultViewForContextAsync(DefaultView context, bool forceAllUsers, bool forceChildObjects) {
            this.SetDefaultViewForContextAsync(context, forceAllUsers, forceChildObjects, null);
        }
        
        /// <remarks/>
        public void SetDefaultViewForContextAsync(DefaultView context, bool forceAllUsers, bool forceChildObjects, object userState) {
            if ((this.SetDefaultViewForContextOperationCompleted == null)) {
                this.SetDefaultViewForContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultViewForContextOperationCompleted);
            }
            this.InvokeAsync("SetDefaultViewForContext", new object[] {
                        context,
                        forceAllUsers,
                        forceChildObjects}, this.SetDefaultViewForContextOperationCompleted, userState);
        }
        
        private void OnSetDefaultViewForContextOperationCompleted(object arg) {
            if ((this.SetDefaultViewForContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultViewForContextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetViewSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewDefinition GetViewSettings(string containerType, int folderId, ref bool isUserDefault) {
            object[] results = this.Invoke("GetViewSettings", new object[] {
                        containerType,
                        folderId,
                        isUserDefault});
            isUserDefault = ((bool)(results[1]));
            return ((ViewDefinition)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewSettingsAsync(string containerType, int folderId, bool isUserDefault) {
            this.GetViewSettingsAsync(containerType, folderId, isUserDefault, null);
        }
        
        /// <remarks/>
        public void GetViewSettingsAsync(string containerType, int folderId, bool isUserDefault, object userState) {
            if ((this.GetViewSettingsOperationCompleted == null)) {
                this.GetViewSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewSettingsOperationCompleted);
            }
            this.InvokeAsync("GetViewSettings", new object[] {
                        containerType,
                        folderId,
                        isUserDefault}, this.GetViewSettingsOperationCompleted, userState);
        }
        
        private void OnGetViewSettingsOperationCompleted(object arg) {
            if ((this.GetViewSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewSettingsCompleted(this, new GetViewSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetCustomView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCustomView(string containerType, ViewColumn[] view, int pageSize) {
            this.Invoke("SetCustomView", new object[] {
                        containerType,
                        view,
                        pageSize});
        }
        
        /// <remarks/>
        public void SetCustomViewAsync(string containerType, ViewColumn[] view, int pageSize) {
            this.SetCustomViewAsync(containerType, view, pageSize, null);
        }
        
        /// <remarks/>
        public void SetCustomViewAsync(string containerType, ViewColumn[] view, int pageSize, object userState) {
            if ((this.SetCustomViewOperationCompleted == null)) {
                this.SetCustomViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomViewOperationCompleted);
            }
            this.InvokeAsync("SetCustomView", new object[] {
                        containerType,
                        view,
                        pageSize}, this.SetCustomViewOperationCompleted, userState);
        }
        
        private void OnSetCustomViewOperationCompleted(object arg) {
            if ((this.SetCustomViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetDefaultView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDefaultView(string containerType, ViewColumn[] view, int pageSize) {
            this.Invoke("SetDefaultView", new object[] {
                        containerType,
                        view,
                        pageSize});
        }
        
        /// <remarks/>
        public void SetDefaultViewAsync(string containerType, ViewColumn[] view, int pageSize) {
            this.SetDefaultViewAsync(containerType, view, pageSize, null);
        }
        
        /// <remarks/>
        public void SetDefaultViewAsync(string containerType, ViewColumn[] view, int pageSize, object userState) {
            if ((this.SetDefaultViewOperationCompleted == null)) {
                this.SetDefaultViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultViewOperationCompleted);
            }
            this.InvokeAsync("SetDefaultView", new object[] {
                        containerType,
                        view,
                        pageSize}, this.SetDefaultViewOperationCompleted, userState);
        }
        
        private void OnSetDefaultViewOperationCompleted(object arg) {
            if ((this.SetDefaultViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetCustomView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViewColumn[] GetCustomView(string containerType) {
            object[] results = this.Invoke("GetCustomView", new object[] {
                        containerType});
            return ((ViewColumn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomViewAsync(string containerType) {
            this.GetCustomViewAsync(containerType, null);
        }
        
        /// <remarks/>
        public void GetCustomViewAsync(string containerType, object userState) {
            if ((this.GetCustomViewOperationCompleted == null)) {
                this.GetCustomViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomViewOperationCompleted);
            }
            this.InvokeAsync("GetCustomView", new object[] {
                        containerType}, this.GetCustomViewOperationCompleted, userState);
        }
        
        private void OnGetCustomViewOperationCompleted(object arg) {
            if ((this.GetCustomViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomViewCompleted(this, new GetCustomViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetCustomView", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetCustomView(string containerType) {
            this.Invoke("ResetCustomView", new object[] {
                        containerType});
        }
        
        /// <remarks/>
        public void ResetCustomViewAsync(string containerType) {
            this.ResetCustomViewAsync(containerType, null);
        }
        
        /// <remarks/>
        public void ResetCustomViewAsync(string containerType, object userState) {
            if ((this.ResetCustomViewOperationCompleted == null)) {
                this.ResetCustomViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetCustomViewOperationCompleted);
            }
            this.InvokeAsync("ResetCustomView", new object[] {
                        containerType}, this.ResetCustomViewOperationCompleted, userState);
        }
        
        private void OnResetCustomViewOperationCompleted(object arg) {
            if ((this.ResetCustomViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetCustomViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetViewPageSize", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetViewPageSize(string containerType) {
            object[] results = this.Invoke("GetViewPageSize", new object[] {
                        containerType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewPageSizeAsync(string containerType) {
            this.GetViewPageSizeAsync(containerType, null);
        }
        
        /// <remarks/>
        public void GetViewPageSizeAsync(string containerType, object userState) {
            if ((this.GetViewPageSizeOperationCompleted == null)) {
                this.GetViewPageSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewPageSizeOperationCompleted);
            }
            this.InvokeAsync("GetViewPageSize", new object[] {
                        containerType}, this.GetViewPageSizeOperationCompleted, userState);
        }
        
        private void OnGetViewPageSizeOperationCompleted(object arg) {
            if ((this.GetViewPageSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewPageSizeCompleted(this, new GetViewPageSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/RemoveADAMObjects", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveADAMObjects(System.Guid[] adamObjectIds) {
            this.Invoke("RemoveADAMObjects", new object[] {
                        adamObjectIds});
        }
        
        /// <remarks/>
        public void RemoveADAMObjectsAsync(System.Guid[] adamObjectIds) {
            this.RemoveADAMObjectsAsync(adamObjectIds, null);
        }
        
        /// <remarks/>
        public void RemoveADAMObjectsAsync(System.Guid[] adamObjectIds, object userState) {
            if ((this.RemoveADAMObjectsOperationCompleted == null)) {
                this.RemoveADAMObjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveADAMObjectsOperationCompleted);
            }
            this.InvokeAsync("RemoveADAMObjects", new object[] {
                        adamObjectIds}, this.RemoveADAMObjectsOperationCompleted, userState);
        }
        
        private void OnRemoveADAMObjectsOperationCompleted(object arg) {
            if ((this.RemoveADAMObjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveADAMObjectsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetAlertSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAlertSettings(AlertSettings settings) {
            this.Invoke("SetAlertSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetAlertSettingsAsync(AlertSettings settings) {
            this.SetAlertSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetAlertSettingsAsync(AlertSettings settings, object userState) {
            if ((this.SetAlertSettingsOperationCompleted == null)) {
                this.SetAlertSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAlertSettingsOperationCompleted);
            }
            this.InvokeAsync("SetAlertSettings", new object[] {
                        settings}, this.SetAlertSettingsOperationCompleted, userState);
        }
        
        private void OnSetAlertSettingsOperationCompleted(object arg) {
            if ((this.SetAlertSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAlertSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserAlertSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserAlertSettings(System.Guid userGuid, AlertSettings settings) {
            this.Invoke("SetUserAlertSettings", new object[] {
                        userGuid,
                        settings});
        }
        
        /// <remarks/>
        public void SetUserAlertSettingsAsync(System.Guid userGuid, AlertSettings settings) {
            this.SetUserAlertSettingsAsync(userGuid, settings, null);
        }
        
        /// <remarks/>
        public void SetUserAlertSettingsAsync(System.Guid userGuid, AlertSettings settings, object userState) {
            if ((this.SetUserAlertSettingsOperationCompleted == null)) {
                this.SetUserAlertSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserAlertSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserAlertSettings", new object[] {
                        userGuid,
                        settings}, this.SetUserAlertSettingsOperationCompleted, userState);
        }
        
        private void OnSetUserAlertSettingsOperationCompleted(object arg) {
            if ((this.SetUserAlertSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserAlertSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetAlertSystemSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAlertSystemSettings(AlertSettings settings) {
            this.Invoke("SetAlertSystemSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetAlertSystemSettingsAsync(AlertSettings settings) {
            this.SetAlertSystemSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetAlertSystemSettingsAsync(AlertSettings settings, object userState) {
            if ((this.SetAlertSystemSettingsOperationCompleted == null)) {
                this.SetAlertSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAlertSystemSettingsOperationCompleted);
            }
            this.InvokeAsync("SetAlertSystemSettings", new object[] {
                        settings}, this.SetAlertSystemSettingsOperationCompleted, userState);
        }
        
        private void OnSetAlertSystemSettingsOperationCompleted(object arg) {
            if ((this.SetAlertSystemSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAlertSystemSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetAlertSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetAlertSettings(AlertSettings settings) {
            this.Invoke("ResetAlertSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void ResetAlertSettingsAsync(AlertSettings settings) {
            this.ResetAlertSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void ResetAlertSettingsAsync(AlertSettings settings, object userState) {
            if ((this.ResetAlertSettingsOperationCompleted == null)) {
                this.ResetAlertSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetAlertSettingsOperationCompleted);
            }
            this.InvokeAsync("ResetAlertSettings", new object[] {
                        settings}, this.ResetAlertSettingsOperationCompleted, userState);
        }
        
        private void OnResetAlertSettingsOperationCompleted(object arg) {
            if ((this.ResetAlertSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetAlertSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetAlertSystemSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AlertSettings GetAlertSystemSettings() {
            object[] results = this.Invoke("GetAlertSystemSettings", new object[0]);
            return ((AlertSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetAlertSystemSettingsAsync() {
            this.GetAlertSystemSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetAlertSystemSettingsAsync(object userState) {
            if ((this.GetAlertSystemSettingsOperationCompleted == null)) {
                this.GetAlertSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlertSystemSettingsOperationCompleted);
            }
            this.InvokeAsync("GetAlertSystemSettings", new object[0], this.GetAlertSystemSettingsOperationCompleted, userState);
        }
        
        private void OnGetAlertSystemSettingsOperationCompleted(object arg) {
            if ((this.GetAlertSystemSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlertSystemSettingsCompleted(this, new GetAlertSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetAlertSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AlertSettings GetAlertSettings() {
            object[] results = this.Invoke("GetAlertSettings", new object[0]);
            return ((AlertSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetAlertSettingsAsync() {
            this.GetAlertSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetAlertSettingsAsync(object userState) {
            if ((this.GetAlertSettingsOperationCompleted == null)) {
                this.GetAlertSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlertSettingsOperationCompleted);
            }
            this.InvokeAsync("GetAlertSettings", new object[0], this.GetAlertSettingsOperationCompleted, userState);
        }
        
        private void OnGetAlertSettingsOperationCompleted(object arg) {
            if ((this.GetAlertSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlertSettingsCompleted(this, new GetAlertSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserAlertSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AlertSettings GetUserAlertSettings(System.Guid userGuid) {
            object[] results = this.Invoke("GetUserAlertSettings", new object[] {
                        userGuid});
            return ((AlertSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAlertSettingsAsync(System.Guid userGuid) {
            this.GetUserAlertSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserAlertSettingsAsync(System.Guid userGuid, object userState) {
            if ((this.GetUserAlertSettingsOperationCompleted == null)) {
                this.GetUserAlertSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAlertSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserAlertSettings", new object[] {
                        userGuid}, this.GetUserAlertSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserAlertSettingsOperationCompleted(object arg) {
            if ((this.GetUserAlertSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAlertSettingsCompleted(this, new GetUserAlertSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/AddAlert", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddAlert(int objectId, bool isFolder) {
            this.Invoke("AddAlert", new object[] {
                        objectId,
                        isFolder});
        }
        
        /// <remarks/>
        public void AddAlertAsync(int objectId, bool isFolder) {
            this.AddAlertAsync(objectId, isFolder, null);
        }
        
        /// <remarks/>
        public void AddAlertAsync(int objectId, bool isFolder, object userState) {
            if ((this.AddAlertOperationCompleted == null)) {
                this.AddAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAlertOperationCompleted);
            }
            this.InvokeAsync("AddAlert", new object[] {
                        objectId,
                        isFolder}, this.AddAlertOperationCompleted, userState);
        }
        
        private void OnAddAlertOperationCompleted(object arg) {
            if ((this.AddAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/RemoveAlert", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveAlert(int objectId, bool isFolder) {
            this.Invoke("RemoveAlert", new object[] {
                        objectId,
                        isFolder});
        }
        
        /// <remarks/>
        public void RemoveAlertAsync(int objectId, bool isFolder) {
            this.RemoveAlertAsync(objectId, isFolder, null);
        }
        
        /// <remarks/>
        public void RemoveAlertAsync(int objectId, bool isFolder, object userState) {
            if ((this.RemoveAlertOperationCompleted == null)) {
                this.RemoveAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAlertOperationCompleted);
            }
            this.InvokeAsync("RemoveAlert", new object[] {
                        objectId,
                        isFolder}, this.RemoveAlertOperationCompleted, userState);
        }
        
        private void OnRemoveAlertOperationCompleted(object arg) {
            if ((this.RemoveAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetAlerts", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AlertInfo[] GetAlerts() {
            object[] results = this.Invoke("GetAlerts", new object[0]);
            return ((AlertInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAlertsAsync() {
            this.GetAlertsAsync(null);
        }
        
        /// <remarks/>
        public void GetAlertsAsync(object userState) {
            if ((this.GetAlertsOperationCompleted == null)) {
                this.GetAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlertsOperationCompleted);
            }
            this.InvokeAsync("GetAlerts", new object[0], this.GetAlertsOperationCompleted, userState);
        }
        
        private void OnGetAlertsOperationCompleted(object arg) {
            if ((this.GetAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlertsCompleted(this, new GetAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/MarkAlertsAsRead", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkAlertsAsRead(System.Guid selectionId) {
            this.Invoke("MarkAlertsAsRead", new object[] {
                        selectionId});
        }
        
        /// <remarks/>
        public void MarkAlertsAsReadAsync(System.Guid selectionId) {
            this.MarkAlertsAsReadAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void MarkAlertsAsReadAsync(System.Guid selectionId, object userState) {
            if ((this.MarkAlertsAsReadOperationCompleted == null)) {
                this.MarkAlertsAsReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAlertsAsReadOperationCompleted);
            }
            this.InvokeAsync("MarkAlertsAsRead", new object[] {
                        selectionId}, this.MarkAlertsAsReadOperationCompleted, userState);
        }
        
        private void OnMarkAlertsAsReadOperationCompleted(object arg) {
            if ((this.MarkAlertsAsReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAlertsAsReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetReminder", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetReminder(Reminder reminder) {
            object[] results = this.Invoke("SetReminder", new object[] {
                        reminder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetReminderAsync(Reminder reminder) {
            this.SetReminderAsync(reminder, null);
        }
        
        /// <remarks/>
        public void SetReminderAsync(Reminder reminder, object userState) {
            if ((this.SetReminderOperationCompleted == null)) {
                this.SetReminderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReminderOperationCompleted);
            }
            this.InvokeAsync("SetReminder", new object[] {
                        reminder}, this.SetReminderOperationCompleted, userState);
        }
        
        private void OnSetReminderOperationCompleted(object arg) {
            if ((this.SetReminderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReminderCompleted(this, new SetReminderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/UpdateReminder", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateReminder(int reminderId, Reminder reminder) {
            this.Invoke("UpdateReminder", new object[] {
                        reminderId,
                        reminder});
        }
        
        /// <remarks/>
        public void UpdateReminderAsync(int reminderId, Reminder reminder) {
            this.UpdateReminderAsync(reminderId, reminder, null);
        }
        
        /// <remarks/>
        public void UpdateReminderAsync(int reminderId, Reminder reminder, object userState) {
            if ((this.UpdateReminderOperationCompleted == null)) {
                this.UpdateReminderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReminderOperationCompleted);
            }
            this.InvokeAsync("UpdateReminder", new object[] {
                        reminderId,
                        reminder}, this.UpdateReminderOperationCompleted, userState);
        }
        
        private void OnUpdateReminderOperationCompleted(object arg) {
            if ((this.UpdateReminderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateReminderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/RemoveReminder", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveReminder(int reminderId) {
            this.Invoke("RemoveReminder", new object[] {
                        reminderId});
        }
        
        /// <remarks/>
        public void RemoveReminderAsync(int reminderId) {
            this.RemoveReminderAsync(reminderId, null);
        }
        
        /// <remarks/>
        public void RemoveReminderAsync(int reminderId, object userState) {
            if ((this.RemoveReminderOperationCompleted == null)) {
                this.RemoveReminderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveReminderOperationCompleted);
            }
            this.InvokeAsync("RemoveReminder", new object[] {
                        reminderId}, this.RemoveReminderOperationCompleted, userState);
        }
        
        private void OnRemoveReminderOperationCompleted(object arg) {
            if ((this.RemoveReminderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveReminderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetReminders", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReminderInfo[] GetReminders() {
            object[] results = this.Invoke("GetReminders", new object[0]);
            return ((ReminderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemindersAsync() {
            this.GetRemindersAsync(null);
        }
        
        /// <remarks/>
        public void GetRemindersAsync(object userState) {
            if ((this.GetRemindersOperationCompleted == null)) {
                this.GetRemindersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemindersOperationCompleted);
            }
            this.InvokeAsync("GetReminders", new object[0], this.GetRemindersOperationCompleted, userState);
        }
        
        private void OnGetRemindersOperationCompleted(object arg) {
            if ((this.GetRemindersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemindersCompleted(this, new GetRemindersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetReminderDetails", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Reminder GetReminderDetails(int reminderId) {
            object[] results = this.Invoke("GetReminderDetails", new object[] {
                        reminderId});
            return ((Reminder)(results[0]));
        }
        
        /// <remarks/>
        public void GetReminderDetailsAsync(int reminderId) {
            this.GetReminderDetailsAsync(reminderId, null);
        }
        
        /// <remarks/>
        public void GetReminderDetailsAsync(int reminderId, object userState) {
            if ((this.GetReminderDetailsOperationCompleted == null)) {
                this.GetReminderDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReminderDetailsOperationCompleted);
            }
            this.InvokeAsync("GetReminderDetails", new object[] {
                        reminderId}, this.GetReminderDetailsOperationCompleted, userState);
        }
        
        private void OnGetReminderDetailsOperationCompleted(object arg) {
            if ((this.GetReminderDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReminderDetailsCompleted(this, new GetReminderDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/MarkRemindersAsRead", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkRemindersAsRead(System.Guid selectionId) {
            this.Invoke("MarkRemindersAsRead", new object[] {
                        selectionId});
        }
        
        /// <remarks/>
        public void MarkRemindersAsReadAsync(System.Guid selectionId) {
            this.MarkRemindersAsReadAsync(selectionId, null);
        }
        
        /// <remarks/>
        public void MarkRemindersAsReadAsync(System.Guid selectionId, object userState) {
            if ((this.MarkRemindersAsReadOperationCompleted == null)) {
                this.MarkRemindersAsReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkRemindersAsReadOperationCompleted);
            }
            this.InvokeAsync("MarkRemindersAsRead", new object[] {
                        selectionId}, this.MarkRemindersAsReadOperationCompleted, userState);
        }
        
        private void OnMarkRemindersAsReadOperationCompleted(object arg) {
            if ((this.MarkRemindersAsReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkRemindersAsReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetWorkflowNotificationsSettin" +
            "gs", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWorkflowNotificationsSettings(WorkflowNotificationsSettings settings) {
            this.Invoke("SetWorkflowNotificationsSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetWorkflowNotificationsSettingsAsync(WorkflowNotificationsSettings settings) {
            this.SetWorkflowNotificationsSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetWorkflowNotificationsSettingsAsync(WorkflowNotificationsSettings settings, object userState) {
            if ((this.SetWorkflowNotificationsSettingsOperationCompleted == null)) {
                this.SetWorkflowNotificationsSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWorkflowNotificationsSettingsOperationCompleted);
            }
            this.InvokeAsync("SetWorkflowNotificationsSettings", new object[] {
                        settings}, this.SetWorkflowNotificationsSettingsOperationCompleted, userState);
        }
        
        private void OnSetWorkflowNotificationsSettingsOperationCompleted(object arg) {
            if ((this.SetWorkflowNotificationsSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWorkflowNotificationsSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserWorkflowNotificationSet" +
            "tings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserWorkflowNotificationSettings(System.Guid userGuid, WorkflowNotificationsSettings settings) {
            this.Invoke("SetUserWorkflowNotificationSettings", new object[] {
                        userGuid,
                        settings});
        }
        
        /// <remarks/>
        public void SetUserWorkflowNotificationSettingsAsync(System.Guid userGuid, WorkflowNotificationsSettings settings) {
            this.SetUserWorkflowNotificationSettingsAsync(userGuid, settings, null);
        }
        
        /// <remarks/>
        public void SetUserWorkflowNotificationSettingsAsync(System.Guid userGuid, WorkflowNotificationsSettings settings, object userState) {
            if ((this.SetUserWorkflowNotificationSettingsOperationCompleted == null)) {
                this.SetUserWorkflowNotificationSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserWorkflowNotificationSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserWorkflowNotificationSettings", new object[] {
                        userGuid,
                        settings}, this.SetUserWorkflowNotificationSettingsOperationCompleted, userState);
        }
        
        private void OnSetUserWorkflowNotificationSettingsOperationCompleted(object arg) {
            if ((this.SetUserWorkflowNotificationSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserWorkflowNotificationSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetWorkflowNotificationsSystem" +
            "Settings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWorkflowNotificationsSystemSettings(WorkflowNotificationsSettings settings) {
            this.Invoke("SetWorkflowNotificationsSystemSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetWorkflowNotificationsSystemSettingsAsync(WorkflowNotificationsSettings settings) {
            this.SetWorkflowNotificationsSystemSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetWorkflowNotificationsSystemSettingsAsync(WorkflowNotificationsSettings settings, object userState) {
            if ((this.SetWorkflowNotificationsSystemSettingsOperationCompleted == null)) {
                this.SetWorkflowNotificationsSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWorkflowNotificationsSystemSettingsOperationCompleted);
            }
            this.InvokeAsync("SetWorkflowNotificationsSystemSettings", new object[] {
                        settings}, this.SetWorkflowNotificationsSystemSettingsOperationCompleted, userState);
        }
        
        private void OnSetWorkflowNotificationsSystemSettingsOperationCompleted(object arg) {
            if ((this.SetWorkflowNotificationsSystemSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWorkflowNotificationsSystemSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetWorkflowNotificationsSett" +
            "ings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetWorkflowNotificationsSettings(WorkflowNotificationsSettings settings) {
            this.Invoke("ResetWorkflowNotificationsSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void ResetWorkflowNotificationsSettingsAsync(WorkflowNotificationsSettings settings) {
            this.ResetWorkflowNotificationsSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void ResetWorkflowNotificationsSettingsAsync(WorkflowNotificationsSettings settings, object userState) {
            if ((this.ResetWorkflowNotificationsSettingsOperationCompleted == null)) {
                this.ResetWorkflowNotificationsSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetWorkflowNotificationsSettingsOperationCompleted);
            }
            this.InvokeAsync("ResetWorkflowNotificationsSettings", new object[] {
                        settings}, this.ResetWorkflowNotificationsSettingsOperationCompleted, userState);
        }
        
        private void OnResetWorkflowNotificationsSettingsOperationCompleted(object arg) {
            if ((this.ResetWorkflowNotificationsSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetWorkflowNotificationsSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetWorkflowNotificationsSystem" +
            "Settings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowNotificationsSettings GetWorkflowNotificationsSystemSettings() {
            object[] results = this.Invoke("GetWorkflowNotificationsSystemSettings", new object[0]);
            return ((WorkflowNotificationsSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowNotificationsSystemSettingsAsync() {
            this.GetWorkflowNotificationsSystemSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetWorkflowNotificationsSystemSettingsAsync(object userState) {
            if ((this.GetWorkflowNotificationsSystemSettingsOperationCompleted == null)) {
                this.GetWorkflowNotificationsSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowNotificationsSystemSettingsOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowNotificationsSystemSettings", new object[0], this.GetWorkflowNotificationsSystemSettingsOperationCompleted, userState);
        }
        
        private void OnGetWorkflowNotificationsSystemSettingsOperationCompleted(object arg) {
            if ((this.GetWorkflowNotificationsSystemSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowNotificationsSystemSettingsCompleted(this, new GetWorkflowNotificationsSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetWorkflowNotificationsSettin" +
            "gs", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowNotificationsSettings GetWorkflowNotificationsSettings() {
            object[] results = this.Invoke("GetWorkflowNotificationsSettings", new object[0]);
            return ((WorkflowNotificationsSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowNotificationsSettingsAsync() {
            this.GetWorkflowNotificationsSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetWorkflowNotificationsSettingsAsync(object userState) {
            if ((this.GetWorkflowNotificationsSettingsOperationCompleted == null)) {
                this.GetWorkflowNotificationsSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowNotificationsSettingsOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowNotificationsSettings", new object[0], this.GetWorkflowNotificationsSettingsOperationCompleted, userState);
        }
        
        private void OnGetWorkflowNotificationsSettingsOperationCompleted(object arg) {
            if ((this.GetWorkflowNotificationsSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowNotificationsSettingsCompleted(this, new GetWorkflowNotificationsSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserWorkflowNotificationsSe" +
            "ttings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowNotificationsSettings GetUserWorkflowNotificationsSettings(System.Guid userGuid) {
            object[] results = this.Invoke("GetUserWorkflowNotificationsSettings", new object[] {
                        userGuid});
            return ((WorkflowNotificationsSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserWorkflowNotificationsSettingsAsync(System.Guid userGuid) {
            this.GetUserWorkflowNotificationsSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserWorkflowNotificationsSettingsAsync(System.Guid userGuid, object userState) {
            if ((this.GetUserWorkflowNotificationsSettingsOperationCompleted == null)) {
                this.GetUserWorkflowNotificationsSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserWorkflowNotificationsSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserWorkflowNotificationsSettings", new object[] {
                        userGuid}, this.GetUserWorkflowNotificationsSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserWorkflowNotificationsSettingsOperationCompleted(object arg) {
            if ((this.GetUserWorkflowNotificationsSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserWorkflowNotificationsSettingsCompleted(this, new GetUserWorkflowNotificationsSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetDefaultTimeZone", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDefaultTimeZone(int timeShift) {
            this.Invoke("SetDefaultTimeZone", new object[] {
                        timeShift});
        }
        
        /// <remarks/>
        public void SetDefaultTimeZoneAsync(int timeShift) {
            this.SetDefaultTimeZoneAsync(timeShift, null);
        }
        
        /// <remarks/>
        public void SetDefaultTimeZoneAsync(int timeShift, object userState) {
            if ((this.SetDefaultTimeZoneOperationCompleted == null)) {
                this.SetDefaultTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultTimeZoneOperationCompleted);
            }
            this.InvokeAsync("SetDefaultTimeZone", new object[] {
                        timeShift}, this.SetDefaultTimeZoneOperationCompleted, userState);
        }
        
        private void OnSetDefaultTimeZoneOperationCompleted(object arg) {
            if ((this.SetDefaultTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultTimeZoneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetDefaultTimeZone", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDefaultTimeZone() {
            object[] results = this.Invoke("GetDefaultTimeZone", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultTimeZoneAsync() {
            this.GetDefaultTimeZoneAsync(null);
        }
        
        /// <remarks/>
        public void GetDefaultTimeZoneAsync(object userState) {
            if ((this.GetDefaultTimeZoneOperationCompleted == null)) {
                this.GetDefaultTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultTimeZoneOperationCompleted);
            }
            this.InvokeAsync("GetDefaultTimeZone", new object[0], this.GetDefaultTimeZoneOperationCompleted, userState);
        }
        
        private void OnGetDefaultTimeZoneOperationCompleted(object arg) {
            if ((this.GetDefaultTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultTimeZoneCompleted(this, new GetDefaultTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetTimeZone", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetTimeZone(int timeShift) {
            this.Invoke("SetTimeZone", new object[] {
                        timeShift});
        }
        
        /// <remarks/>
        public void SetTimeZoneAsync(int timeShift) {
            this.SetTimeZoneAsync(timeShift, null);
        }
        
        /// <remarks/>
        public void SetTimeZoneAsync(int timeShift, object userState) {
            if ((this.SetTimeZoneOperationCompleted == null)) {
                this.SetTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTimeZoneOperationCompleted);
            }
            this.InvokeAsync("SetTimeZone", new object[] {
                        timeShift}, this.SetTimeZoneOperationCompleted, userState);
        }
        
        private void OnSetTimeZoneOperationCompleted(object arg) {
            if ((this.SetTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTimeZoneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetTimeZone", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTimeZone() {
            object[] results = this.Invoke("GetTimeZone", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeZoneAsync() {
            this.GetTimeZoneAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeZoneAsync(object userState) {
            if ((this.GetTimeZoneOperationCompleted == null)) {
                this.GetTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeZoneOperationCompleted);
            }
            this.InvokeAsync("GetTimeZone", new object[0], this.GetTimeZoneOperationCompleted, userState);
        }
        
        private void OnGetTimeZoneOperationCompleted(object arg) {
            if ((this.GetTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeZoneCompleted(this, new GetTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserLanguage", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserLanguage(System.Guid userGuid, string language) {
            this.Invoke("SetUserLanguage", new object[] {
                        userGuid,
                        language});
        }
        
        /// <remarks/>
        public void SetUserLanguageAsync(System.Guid userGuid, string language) {
            this.SetUserLanguageAsync(userGuid, language, null);
        }
        
        /// <remarks/>
        public void SetUserLanguageAsync(System.Guid userGuid, string language, object userState) {
            if ((this.SetUserLanguageOperationCompleted == null)) {
                this.SetUserLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserLanguageOperationCompleted);
            }
            this.InvokeAsync("SetUserLanguage", new object[] {
                        userGuid,
                        language}, this.SetUserLanguageOperationCompleted, userState);
        }
        
        private void OnSetUserLanguageOperationCompleted(object arg) {
            if ((this.SetUserLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserLanguageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserPreferences", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserPreferences(UserProfile userProfile) {
            this.Invoke("SetUserPreferences", new object[] {
                        userProfile});
        }
        
        /// <remarks/>
        public void SetUserPreferencesAsync(UserProfile userProfile) {
            this.SetUserPreferencesAsync(userProfile, null);
        }
        
        /// <remarks/>
        public void SetUserPreferencesAsync(UserProfile userProfile, object userState) {
            if ((this.SetUserPreferencesOperationCompleted == null)) {
                this.SetUserPreferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPreferencesOperationCompleted);
            }
            this.InvokeAsync("SetUserPreferences", new object[] {
                        userProfile}, this.SetUserPreferencesOperationCompleted, userState);
        }
        
        private void OnSetUserPreferencesOperationCompleted(object arg) {
            if ((this.SetUserPreferencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPreferencesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserLanguage", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserLanguage(System.Guid userGuid) {
            object[] results = this.Invoke("GetUserLanguage", new object[] {
                        userGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLanguageAsync(System.Guid userGuid) {
            this.GetUserLanguageAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserLanguageAsync(System.Guid userGuid, object userState) {
            if ((this.GetUserLanguageOperationCompleted == null)) {
                this.GetUserLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLanguageOperationCompleted);
            }
            this.InvokeAsync("GetUserLanguage", new object[] {
                        userGuid}, this.GetUserLanguageOperationCompleted, userState);
        }
        
        private void OnGetUserLanguageOperationCompleted(object arg) {
            if ((this.GetUserLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLanguageCompleted(this, new GetUserLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserPreferences", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserProfile GetUserPreferences() {
            object[] results = this.Invoke("GetUserPreferences", new object[0]);
            return ((UserProfile)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPreferencesAsync() {
            this.GetUserPreferencesAsync(null);
        }
        
        /// <remarks/>
        public void GetUserPreferencesAsync(object userState) {
            if ((this.GetUserPreferencesOperationCompleted == null)) {
                this.GetUserPreferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPreferencesOperationCompleted);
            }
            this.InvokeAsync("GetUserPreferences", new object[0], this.GetUserPreferencesOperationCompleted, userState);
        }
        
        private void OnGetUserPreferencesOperationCompleted(object arg) {
            if ((this.GetUserPreferencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPreferencesCompleted(this, new GetUserPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetFDAAdvancedSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFDAAdvancedSettings(FDAAdvancedSettings settings) {
            this.Invoke("SetFDAAdvancedSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetFDAAdvancedSettingsAsync(FDAAdvancedSettings settings) {
            this.SetFDAAdvancedSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetFDAAdvancedSettingsAsync(FDAAdvancedSettings settings, object userState) {
            if ((this.SetFDAAdvancedSettingsOperationCompleted == null)) {
                this.SetFDAAdvancedSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFDAAdvancedSettingsOperationCompleted);
            }
            this.InvokeAsync("SetFDAAdvancedSettings", new object[] {
                        settings}, this.SetFDAAdvancedSettingsOperationCompleted, userState);
        }
        
        private void OnSetFDAAdvancedSettingsOperationCompleted(object arg) {
            if ((this.SetFDAAdvancedSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFDAAdvancedSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserFDAAdvancedSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserFDAAdvancedSettings(System.Guid userGuid, FDAAdvancedSettings settings) {
            this.Invoke("SetUserFDAAdvancedSettings", new object[] {
                        userGuid,
                        settings});
        }
        
        /// <remarks/>
        public void SetUserFDAAdvancedSettingsAsync(System.Guid userGuid, FDAAdvancedSettings settings) {
            this.SetUserFDAAdvancedSettingsAsync(userGuid, settings, null);
        }
        
        /// <remarks/>
        public void SetUserFDAAdvancedSettingsAsync(System.Guid userGuid, FDAAdvancedSettings settings, object userState) {
            if ((this.SetUserFDAAdvancedSettingsOperationCompleted == null)) {
                this.SetUserFDAAdvancedSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserFDAAdvancedSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserFDAAdvancedSettings", new object[] {
                        userGuid,
                        settings}, this.SetUserFDAAdvancedSettingsOperationCompleted, userState);
        }
        
        private void OnSetUserFDAAdvancedSettingsOperationCompleted(object arg) {
            if ((this.SetUserFDAAdvancedSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserFDAAdvancedSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetFDAAdvancedSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFDAAdvancedSettingsSystem(FDAAdvancedSettings settings) {
            this.Invoke("SetFDAAdvancedSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetFDAAdvancedSettingsSystemAsync(FDAAdvancedSettings settings) {
            this.SetFDAAdvancedSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetFDAAdvancedSettingsSystemAsync(FDAAdvancedSettings settings, object userState) {
            if ((this.SetFDAAdvancedSettingsSystemOperationCompleted == null)) {
                this.SetFDAAdvancedSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFDAAdvancedSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("SetFDAAdvancedSettingsSystem", new object[] {
                        settings}, this.SetFDAAdvancedSettingsSystemOperationCompleted, userState);
        }
        
        private void OnSetFDAAdvancedSettingsSystemOperationCompleted(object arg) {
            if ((this.SetFDAAdvancedSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFDAAdvancedSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetFDAAdvancedSettingsSystem" +
            "", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetFDAAdvancedSettingsSystem(FDAAdvancedSettings settings) {
            this.Invoke("ResetFDAAdvancedSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void ResetFDAAdvancedSettingsSystemAsync(FDAAdvancedSettings settings) {
            this.ResetFDAAdvancedSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void ResetFDAAdvancedSettingsSystemAsync(FDAAdvancedSettings settings, object userState) {
            if ((this.ResetFDAAdvancedSettingsSystemOperationCompleted == null)) {
                this.ResetFDAAdvancedSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetFDAAdvancedSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("ResetFDAAdvancedSettingsSystem", new object[] {
                        settings}, this.ResetFDAAdvancedSettingsSystemOperationCompleted, userState);
        }
        
        private void OnResetFDAAdvancedSettingsSystemOperationCompleted(object arg) {
            if ((this.ResetFDAAdvancedSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetFDAAdvancedSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetFDAAdvancedSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FDAAdvancedSettings GetFDAAdvancedSettingsSystem() {
            object[] results = this.Invoke("GetFDAAdvancedSettingsSystem", new object[0]);
            return ((FDAAdvancedSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetFDAAdvancedSettingsSystemAsync() {
            this.GetFDAAdvancedSettingsSystemAsync(null);
        }
        
        /// <remarks/>
        public void GetFDAAdvancedSettingsSystemAsync(object userState) {
            if ((this.GetFDAAdvancedSettingsSystemOperationCompleted == null)) {
                this.GetFDAAdvancedSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFDAAdvancedSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("GetFDAAdvancedSettingsSystem", new object[0], this.GetFDAAdvancedSettingsSystemOperationCompleted, userState);
        }
        
        private void OnGetFDAAdvancedSettingsSystemOperationCompleted(object arg) {
            if ((this.GetFDAAdvancedSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFDAAdvancedSettingsSystemCompleted(this, new GetFDAAdvancedSettingsSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetFDAAdvancedSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FDAAdvancedSettings GetFDAAdvancedSettings() {
            object[] results = this.Invoke("GetFDAAdvancedSettings", new object[0]);
            return ((FDAAdvancedSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetFDAAdvancedSettingsAsync() {
            this.GetFDAAdvancedSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetFDAAdvancedSettingsAsync(object userState) {
            if ((this.GetFDAAdvancedSettingsOperationCompleted == null)) {
                this.GetFDAAdvancedSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFDAAdvancedSettingsOperationCompleted);
            }
            this.InvokeAsync("GetFDAAdvancedSettings", new object[0], this.GetFDAAdvancedSettingsOperationCompleted, userState);
        }
        
        private void OnGetFDAAdvancedSettingsOperationCompleted(object arg) {
            if ((this.GetFDAAdvancedSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFDAAdvancedSettingsCompleted(this, new GetFDAAdvancedSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetUserFDAAdvancedSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FDAAdvancedSettings GetUserFDAAdvancedSettings(System.Guid userGuid) {
            object[] results = this.Invoke("GetUserFDAAdvancedSettings", new object[] {
                        userGuid});
            return ((FDAAdvancedSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserFDAAdvancedSettingsAsync(System.Guid userGuid) {
            this.GetUserFDAAdvancedSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserFDAAdvancedSettingsAsync(System.Guid userGuid, object userState) {
            if ((this.GetUserFDAAdvancedSettingsOperationCompleted == null)) {
                this.GetUserFDAAdvancedSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserFDAAdvancedSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserFDAAdvancedSettings", new object[] {
                        userGuid}, this.GetUserFDAAdvancedSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserFDAAdvancedSettingsOperationCompleted(object arg) {
            if ((this.GetUserFDAAdvancedSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserFDAAdvancedSettingsCompleted(this, new GetUserFDAAdvancedSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetFastFindSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFastFindSettings(FastFindSettings settings) {
            this.Invoke("SetFastFindSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetFastFindSettingsAsync(FastFindSettings settings) {
            this.SetFastFindSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetFastFindSettingsAsync(FastFindSettings settings, object userState) {
            if ((this.SetFastFindSettingsOperationCompleted == null)) {
                this.SetFastFindSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFastFindSettingsOperationCompleted);
            }
            this.InvokeAsync("SetFastFindSettings", new object[] {
                        settings}, this.SetFastFindSettingsOperationCompleted, userState);
        }
        
        private void OnSetFastFindSettingsOperationCompleted(object arg) {
            if ((this.SetFastFindSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFastFindSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetFastFindSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFastFindSettingsSystem(FastFindSettings settings) {
            this.Invoke("SetFastFindSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetFastFindSettingsSystemAsync(FastFindSettings settings) {
            this.SetFastFindSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetFastFindSettingsSystemAsync(FastFindSettings settings, object userState) {
            if ((this.SetFastFindSettingsSystemOperationCompleted == null)) {
                this.SetFastFindSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFastFindSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("SetFastFindSettingsSystem", new object[] {
                        settings}, this.SetFastFindSettingsSystemOperationCompleted, userState);
        }
        
        private void OnSetFastFindSettingsSystemOperationCompleted(object arg) {
            if ((this.SetFastFindSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFastFindSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetFastFindSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetFastFindSettingsSystem(FastFindSettings settings) {
            this.Invoke("ResetFastFindSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void ResetFastFindSettingsSystemAsync(FastFindSettings settings) {
            this.ResetFastFindSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void ResetFastFindSettingsSystemAsync(FastFindSettings settings, object userState) {
            if ((this.ResetFastFindSettingsSystemOperationCompleted == null)) {
                this.ResetFastFindSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetFastFindSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("ResetFastFindSettingsSystem", new object[] {
                        settings}, this.ResetFastFindSettingsSystemOperationCompleted, userState);
        }
        
        private void OnResetFastFindSettingsSystemOperationCompleted(object arg) {
            if ((this.ResetFastFindSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetFastFindSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetFastFindSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FastFindSettings GetFastFindSettingsSystem() {
            object[] results = this.Invoke("GetFastFindSettingsSystem", new object[0]);
            return ((FastFindSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetFastFindSettingsSystemAsync() {
            this.GetFastFindSettingsSystemAsync(null);
        }
        
        /// <remarks/>
        public void GetFastFindSettingsSystemAsync(object userState) {
            if ((this.GetFastFindSettingsSystemOperationCompleted == null)) {
                this.GetFastFindSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFastFindSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("GetFastFindSettingsSystem", new object[0], this.GetFastFindSettingsSystemOperationCompleted, userState);
        }
        
        private void OnGetFastFindSettingsSystemOperationCompleted(object arg) {
            if ((this.GetFastFindSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFastFindSettingsSystemCompleted(this, new GetFastFindSettingsSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetFastFindSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FastFindSettings GetFastFindSettings() {
            object[] results = this.Invoke("GetFastFindSettings", new object[0]);
            return ((FastFindSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetFastFindSettingsAsync() {
            this.GetFastFindSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetFastFindSettingsAsync(object userState) {
            if ((this.GetFastFindSettingsOperationCompleted == null)) {
                this.GetFastFindSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFastFindSettingsOperationCompleted);
            }
            this.InvokeAsync("GetFastFindSettings", new object[0], this.GetFastFindSettingsOperationCompleted, userState);
        }
        
        private void OnGetFastFindSettingsOperationCompleted(object arg) {
            if ((this.GetFastFindSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFastFindSettingsCompleted(this, new GetFastFindSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetMiscSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMiscSettings(MiscSettings settings) {
            this.Invoke("SetMiscSettings", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetMiscSettingsAsync(MiscSettings settings) {
            this.SetMiscSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetMiscSettingsAsync(MiscSettings settings, object userState) {
            if ((this.SetMiscSettingsOperationCompleted == null)) {
                this.SetMiscSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMiscSettingsOperationCompleted);
            }
            this.InvokeAsync("SetMiscSettings", new object[] {
                        settings}, this.SetMiscSettingsOperationCompleted, userState);
        }
        
        private void OnSetMiscSettingsOperationCompleted(object arg) {
            if ((this.SetMiscSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMiscSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetUserMiscSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserMiscSettings(System.Guid userGuid, MiscSettings settings) {
            this.Invoke("SetUserMiscSettings", new object[] {
                        userGuid,
                        settings});
        }
        
        /// <remarks/>
        public void SetUserMiscSettingsAsync(System.Guid userGuid, MiscSettings settings) {
            this.SetUserMiscSettingsAsync(userGuid, settings, null);
        }
        
        /// <remarks/>
        public void SetUserMiscSettingsAsync(System.Guid userGuid, MiscSettings settings, object userState) {
            if ((this.SetUserMiscSettingsOperationCompleted == null)) {
                this.SetUserMiscSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserMiscSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserMiscSettings", new object[] {
                        userGuid,
                        settings}, this.SetUserMiscSettingsOperationCompleted, userState);
        }
        
        private void OnSetUserMiscSettingsOperationCompleted(object arg) {
            if ((this.SetUserMiscSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserMiscSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/SetMiscSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMiscSettingsSystem(MiscSettings settings) {
            this.Invoke("SetMiscSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void SetMiscSettingsSystemAsync(MiscSettings settings) {
            this.SetMiscSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void SetMiscSettingsSystemAsync(MiscSettings settings, object userState) {
            if ((this.SetMiscSettingsSystemOperationCompleted == null)) {
                this.SetMiscSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMiscSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("SetMiscSettingsSystem", new object[] {
                        settings}, this.SetMiscSettingsSystemOperationCompleted, userState);
        }
        
        private void OnSetMiscSettingsSystemOperationCompleted(object arg) {
            if ((this.SetMiscSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMiscSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/ResetMiscSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetMiscSettingsSystem(MiscSettings settings) {
            this.Invoke("ResetMiscSettingsSystem", new object[] {
                        settings});
        }
        
        /// <remarks/>
        public void ResetMiscSettingsSystemAsync(MiscSettings settings) {
            this.ResetMiscSettingsSystemAsync(settings, null);
        }
        
        /// <remarks/>
        public void ResetMiscSettingsSystemAsync(MiscSettings settings, object userState) {
            if ((this.ResetMiscSettingsSystemOperationCompleted == null)) {
                this.ResetMiscSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetMiscSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("ResetMiscSettingsSystem", new object[] {
                        settings}, this.ResetMiscSettingsSystemOperationCompleted, userState);
        }
        
        private void OnResetMiscSettingsSystemOperationCompleted(object arg) {
            if ((this.ResetMiscSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetMiscSettingsSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetMiscSettingsSystem", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MiscSettings GetMiscSettingsSystem() {
            object[] results = this.Invoke("GetMiscSettingsSystem", new object[0]);
            return ((MiscSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetMiscSettingsSystemAsync() {
            this.GetMiscSettingsSystemAsync(null);
        }
        
        /// <remarks/>
        public void GetMiscSettingsSystemAsync(object userState) {
            if ((this.GetMiscSettingsSystemOperationCompleted == null)) {
                this.GetMiscSettingsSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMiscSettingsSystemOperationCompleted);
            }
            this.InvokeAsync("GetMiscSettingsSystem", new object[0], this.GetMiscSettingsSystemOperationCompleted, userState);
        }
        
        private void OnGetMiscSettingsSystemOperationCompleted(object arg) {
            if ((this.GetMiscSettingsSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMiscSettingsSystemCompleted(this, new GetMiscSettingsSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/librarymanager/userpreferences/GetMiscSettings", RequestNamespace="http://filehold.com/librarymanager/userpreferences/", ResponseNamespace="http://filehold.com/librarymanager/userpreferences/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MiscSettings GetMiscSettings() {
            object[] results = this.Invoke("GetMiscSettings", new object[0]);
            return ((MiscSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetMiscSettingsAsync() {
            this.GetMiscSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetMiscSettingsAsync(object userState) {
            if ((this.GetMiscSettingsOperationCompleted == null)) {
                this.GetMiscSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMiscSettingsOperationCompleted);
            }
            this.InvokeAsync("GetMiscSettings", new object[0], this.GetMiscSettingsOperationCompleted, userState);
        }
        
        private void OnGetMiscSettingsOperationCompleted(object arg) {
            if ((this.GetMiscSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMiscSettingsCompleted(this, new GetMiscSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class MiscSettings {
        
        private int defaultWebPageField;
        
        private bool editMetadataCheckInField;
        
        private bool clearRequiredMetadataCheckInField;
        
        private int noExpandedDrawersField;
        
        private bool defaultWebPageIsSystemField;
        
        private bool editMetadataCheckInIsSystemField;
        
        private bool clearRequiredMetadataCheckInIsSystemField;
        
        private bool noExpandedDrawersIsSystemField;
        
        /// <remarks/>
        public int DefaultWebPage {
            get {
                return this.defaultWebPageField;
            }
            set {
                this.defaultWebPageField = value;
            }
        }
        
        /// <remarks/>
        public bool EditMetadataCheckIn {
            get {
                return this.editMetadataCheckInField;
            }
            set {
                this.editMetadataCheckInField = value;
            }
        }
        
        /// <remarks/>
        public bool ClearRequiredMetadataCheckIn {
            get {
                return this.clearRequiredMetadataCheckInField;
            }
            set {
                this.clearRequiredMetadataCheckInField = value;
            }
        }
        
        /// <remarks/>
        public int NoExpandedDrawers {
            get {
                return this.noExpandedDrawersField;
            }
            set {
                this.noExpandedDrawersField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultWebPageIsSystem {
            get {
                return this.defaultWebPageIsSystemField;
            }
            set {
                this.defaultWebPageIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool EditMetadataCheckInIsSystem {
            get {
                return this.editMetadataCheckInIsSystemField;
            }
            set {
                this.editMetadataCheckInIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ClearRequiredMetadataCheckInIsSystem {
            get {
                return this.clearRequiredMetadataCheckInIsSystemField;
            }
            set {
                this.clearRequiredMetadataCheckInIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool NoExpandedDrawersIsSystem {
            get {
                return this.noExpandedDrawersIsSystemField;
            }
            set {
                this.noExpandedDrawersIsSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class FastFindSettings {
        
        private bool fastFindEnabledField;
        
        private bool updateTemplatesField;
        
        private bool mouseSearchField;
        
        private bool selectionSearchField;
        
        private bool clipboardSearchField;
        
        private bool screenSearchField;
        
        private bool fastFindEnabledIsSystemField;
        
        private bool updateTemplatesIsSystemField;
        
        private bool mouseSearchIsSystemField;
        
        private bool selectionSearchIsSystemField;
        
        private bool clipboardSearchIsSystemField;
        
        private bool screenSearchIsSystemField;
        
        /// <remarks/>
        public bool FastFindEnabled {
            get {
                return this.fastFindEnabledField;
            }
            set {
                this.fastFindEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool UpdateTemplates {
            get {
                return this.updateTemplatesField;
            }
            set {
                this.updateTemplatesField = value;
            }
        }
        
        /// <remarks/>
        public bool MouseSearch {
            get {
                return this.mouseSearchField;
            }
            set {
                this.mouseSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool SelectionSearch {
            get {
                return this.selectionSearchField;
            }
            set {
                this.selectionSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool ClipboardSearch {
            get {
                return this.clipboardSearchField;
            }
            set {
                this.clipboardSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool ScreenSearch {
            get {
                return this.screenSearchField;
            }
            set {
                this.screenSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool FastFindEnabledIsSystem {
            get {
                return this.fastFindEnabledIsSystemField;
            }
            set {
                this.fastFindEnabledIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool UpdateTemplatesIsSystem {
            get {
                return this.updateTemplatesIsSystemField;
            }
            set {
                this.updateTemplatesIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MouseSearchIsSystem {
            get {
                return this.mouseSearchIsSystemField;
            }
            set {
                this.mouseSearchIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool SelectionSearchIsSystem {
            get {
                return this.selectionSearchIsSystemField;
            }
            set {
                this.selectionSearchIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ClipboardSearchIsSystem {
            get {
                return this.clipboardSearchIsSystemField;
            }
            set {
                this.clipboardSearchIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ScreenSearchIsSystem {
            get {
                return this.screenSearchIsSystemField;
            }
            set {
                this.screenSearchIsSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class FDAAdvancedSettings {
        
        private bool showWelcomeScreenField;
        
        private int defaultScreenField;
        
        private int maxTransfersField;
        
        private bool defaultCloseField;
        
        private bool deleteAfterAddField;
        
        private bool deleteAfterCheckInField;
        
        private bool messageDownloadCopiesField;
        
        private bool messageDownloadCheckOutField;
        
        private bool messageRemoveFilesField;
        
        private bool messageCleanUpField;
        
        private bool sendAutoTaggedField;
        
        private bool sendMetadataField;
        
        private bool recycleBinField;
        
        private bool viewerAutoopenInboxField;
        
        private bool viewerAutoopenRegularField;
        
        private bool viewerSeparateTabsField;
        
        private bool messageSmartCheckInOutField;
        
        private bool oneInManyViewersField;
        
        private bool clickToTagField;
        
        private bool showWelcomeScreenIsSystemField;
        
        private bool defaultScreenIsSystemField;
        
        private bool maxTransfersIsSystemField;
        
        private bool defaultCloseIsSystemField;
        
        private bool deleteAfterAddIsSystemField;
        
        private bool deleteAfterCheckInIsSystemField;
        
        private bool messageDownloadCopiesIsSystemField;
        
        private bool messageDownloadCheckOutIsSystemField;
        
        private bool messageRemoveFilesIsSystemField;
        
        private bool messageCleanUpIsSystemField;
        
        private bool sendAutoTaggedIsSystemField;
        
        private bool sendMetadataIsSystemField;
        
        private bool recycleBinIsSystemField;
        
        private bool viewerAutoopenInboxIsSystemField;
        
        private bool viewerAutoopenRegularIsSystemField;
        
        private bool viewerSeparateTabsIsSystemField;
        
        private bool messageSmartCheckInOutIsSystemField;
        
        private bool oneInManyViewersIsSystemField;
        
        private bool clickToTagIsSystemField;
        
        /// <remarks/>
        public bool ShowWelcomeScreen {
            get {
                return this.showWelcomeScreenField;
            }
            set {
                this.showWelcomeScreenField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultScreen {
            get {
                return this.defaultScreenField;
            }
            set {
                this.defaultScreenField = value;
            }
        }
        
        /// <remarks/>
        public int MaxTransfers {
            get {
                return this.maxTransfersField;
            }
            set {
                this.maxTransfersField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultClose {
            get {
                return this.defaultCloseField;
            }
            set {
                this.defaultCloseField = value;
            }
        }
        
        /// <remarks/>
        public bool DeleteAfterAdd {
            get {
                return this.deleteAfterAddField;
            }
            set {
                this.deleteAfterAddField = value;
            }
        }
        
        /// <remarks/>
        public bool DeleteAfterCheckIn {
            get {
                return this.deleteAfterCheckInField;
            }
            set {
                this.deleteAfterCheckInField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageDownloadCopies {
            get {
                return this.messageDownloadCopiesField;
            }
            set {
                this.messageDownloadCopiesField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageDownloadCheckOut {
            get {
                return this.messageDownloadCheckOutField;
            }
            set {
                this.messageDownloadCheckOutField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageRemoveFiles {
            get {
                return this.messageRemoveFilesField;
            }
            set {
                this.messageRemoveFilesField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageCleanUp {
            get {
                return this.messageCleanUpField;
            }
            set {
                this.messageCleanUpField = value;
            }
        }
        
        /// <remarks/>
        public bool SendAutoTagged {
            get {
                return this.sendAutoTaggedField;
            }
            set {
                this.sendAutoTaggedField = value;
            }
        }
        
        /// <remarks/>
        public bool SendMetadata {
            get {
                return this.sendMetadataField;
            }
            set {
                this.sendMetadataField = value;
            }
        }
        
        /// <remarks/>
        public bool RecycleBin {
            get {
                return this.recycleBinField;
            }
            set {
                this.recycleBinField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewerAutoopenInbox {
            get {
                return this.viewerAutoopenInboxField;
            }
            set {
                this.viewerAutoopenInboxField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewerAutoopenRegular {
            get {
                return this.viewerAutoopenRegularField;
            }
            set {
                this.viewerAutoopenRegularField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewerSeparateTabs {
            get {
                return this.viewerSeparateTabsField;
            }
            set {
                this.viewerSeparateTabsField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageSmartCheckInOut {
            get {
                return this.messageSmartCheckInOutField;
            }
            set {
                this.messageSmartCheckInOutField = value;
            }
        }
        
        /// <remarks/>
        public bool OneInManyViewers {
            get {
                return this.oneInManyViewersField;
            }
            set {
                this.oneInManyViewersField = value;
            }
        }
        
        /// <remarks/>
        public bool ClickToTag {
            get {
                return this.clickToTagField;
            }
            set {
                this.clickToTagField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowWelcomeScreenIsSystem {
            get {
                return this.showWelcomeScreenIsSystemField;
            }
            set {
                this.showWelcomeScreenIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultScreenIsSystem {
            get {
                return this.defaultScreenIsSystemField;
            }
            set {
                this.defaultScreenIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MaxTransfersIsSystem {
            get {
                return this.maxTransfersIsSystemField;
            }
            set {
                this.maxTransfersIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultCloseIsSystem {
            get {
                return this.defaultCloseIsSystemField;
            }
            set {
                this.defaultCloseIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DeleteAfterAddIsSystem {
            get {
                return this.deleteAfterAddIsSystemField;
            }
            set {
                this.deleteAfterAddIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DeleteAfterCheckInIsSystem {
            get {
                return this.deleteAfterCheckInIsSystemField;
            }
            set {
                this.deleteAfterCheckInIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageDownloadCopiesIsSystem {
            get {
                return this.messageDownloadCopiesIsSystemField;
            }
            set {
                this.messageDownloadCopiesIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageDownloadCheckOutIsSystem {
            get {
                return this.messageDownloadCheckOutIsSystemField;
            }
            set {
                this.messageDownloadCheckOutIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageRemoveFilesIsSystem {
            get {
                return this.messageRemoveFilesIsSystemField;
            }
            set {
                this.messageRemoveFilesIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageCleanUpIsSystem {
            get {
                return this.messageCleanUpIsSystemField;
            }
            set {
                this.messageCleanUpIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool SendAutoTaggedIsSystem {
            get {
                return this.sendAutoTaggedIsSystemField;
            }
            set {
                this.sendAutoTaggedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool SendMetadataIsSystem {
            get {
                return this.sendMetadataIsSystemField;
            }
            set {
                this.sendMetadataIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool RecycleBinIsSystem {
            get {
                return this.recycleBinIsSystemField;
            }
            set {
                this.recycleBinIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewerAutoopenInboxIsSystem {
            get {
                return this.viewerAutoopenInboxIsSystemField;
            }
            set {
                this.viewerAutoopenInboxIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewerAutoopenRegularIsSystem {
            get {
                return this.viewerAutoopenRegularIsSystemField;
            }
            set {
                this.viewerAutoopenRegularIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewerSeparateTabsIsSystem {
            get {
                return this.viewerSeparateTabsIsSystemField;
            }
            set {
                this.viewerSeparateTabsIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool MessageSmartCheckInOutIsSystem {
            get {
                return this.messageSmartCheckInOutIsSystemField;
            }
            set {
                this.messageSmartCheckInOutIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool OneInManyViewersIsSystem {
            get {
                return this.oneInManyViewersIsSystemField;
            }
            set {
                this.oneInManyViewersIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ClickToTagIsSystem {
            get {
                return this.clickToTagIsSystemField;
            }
            set {
                this.clickToTagIsSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class UserProfile {
        
        private string languageField;
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class WorkflowNotificationsSettings {
        
        private bool taskInitiatorField;
        
        private bool taskAssignedOrDelegatedField;
        
        private bool taskOverdueField;
        
        private bool taskOverriddenField;
        
        private bool taskCancelledField;
        
        private bool activityCompletedField;
        
        private bool activityCompletedDocumentOwnField;
        
        private bool workflowCompletedField;
        
        private bool observedWorkflowCompletedField;
        
        private bool taskBlockedField;
        
        private bool taskRestartedField;
        
        private bool taskDocumentAddedRemovedField;
        
        private bool taskDocumentCheckedOutInField;
        
        private bool workflowRestartedField;
        
        private bool observedWorkflowRestartedField;
        
        private bool documentAddedRemovedField;
        
        private bool observedDocumentAddedRemovedField;
        
        private AlertFrequency emailAlertFrequencyField;
        
        private System.Guid delegateToUserField;
        
        private bool taskInitiatorIsSystemField;
        
        private bool taskAssignedOrDelegatedIsSystemField;
        
        private bool taskOverdueIsSystemField;
        
        private bool taskOverriddenIsSystemField;
        
        private bool taskCancelledIsSystemField;
        
        private bool activityCompletedIsSystemField;
        
        private bool activityCompletedDocumentOwnIsSystemField;
        
        private bool workflowCompletedIsSystemField;
        
        private bool observedWorkflowCompletedIsSystemField;
        
        private bool taskBlockedIsSystemField;
        
        private bool taskRestartedIsSystemField;
        
        private bool taskDocumentAddedRemovedIsSystemField;
        
        private bool taskDocumentCheckedOutInIsSystemField;
        
        private bool workflowRestartedIsSystemField;
        
        private bool observedWorkflowRestartedIsSystemField;
        
        private bool documentAddedRemovedIsSystemField;
        
        private bool observedDocumentAddedRemovedIsSystemField;
        
        private bool emailAlertFrequencyIsSystemField;
        
        /// <remarks/>
        public bool TaskInitiator {
            get {
                return this.taskInitiatorField;
            }
            set {
                this.taskInitiatorField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskAssignedOrDelegated {
            get {
                return this.taskAssignedOrDelegatedField;
            }
            set {
                this.taskAssignedOrDelegatedField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskOverdue {
            get {
                return this.taskOverdueField;
            }
            set {
                this.taskOverdueField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskOverridden {
            get {
                return this.taskOverriddenField;
            }
            set {
                this.taskOverriddenField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskCancelled {
            get {
                return this.taskCancelledField;
            }
            set {
                this.taskCancelledField = value;
            }
        }
        
        /// <remarks/>
        public bool ActivityCompleted {
            get {
                return this.activityCompletedField;
            }
            set {
                this.activityCompletedField = value;
            }
        }
        
        /// <remarks/>
        public bool ActivityCompletedDocumentOwn {
            get {
                return this.activityCompletedDocumentOwnField;
            }
            set {
                this.activityCompletedDocumentOwnField = value;
            }
        }
        
        /// <remarks/>
        public bool WorkflowCompleted {
            get {
                return this.workflowCompletedField;
            }
            set {
                this.workflowCompletedField = value;
            }
        }
        
        /// <remarks/>
        public bool ObservedWorkflowCompleted {
            get {
                return this.observedWorkflowCompletedField;
            }
            set {
                this.observedWorkflowCompletedField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskBlocked {
            get {
                return this.taskBlockedField;
            }
            set {
                this.taskBlockedField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskRestarted {
            get {
                return this.taskRestartedField;
            }
            set {
                this.taskRestartedField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskDocumentAddedRemoved {
            get {
                return this.taskDocumentAddedRemovedField;
            }
            set {
                this.taskDocumentAddedRemovedField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskDocumentCheckedOutIn {
            get {
                return this.taskDocumentCheckedOutInField;
            }
            set {
                this.taskDocumentCheckedOutInField = value;
            }
        }
        
        /// <remarks/>
        public bool WorkflowRestarted {
            get {
                return this.workflowRestartedField;
            }
            set {
                this.workflowRestartedField = value;
            }
        }
        
        /// <remarks/>
        public bool ObservedWorkflowRestarted {
            get {
                return this.observedWorkflowRestartedField;
            }
            set {
                this.observedWorkflowRestartedField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentAddedRemoved {
            get {
                return this.documentAddedRemovedField;
            }
            set {
                this.documentAddedRemovedField = value;
            }
        }
        
        /// <remarks/>
        public bool ObservedDocumentAddedRemoved {
            get {
                return this.observedDocumentAddedRemovedField;
            }
            set {
                this.observedDocumentAddedRemovedField = value;
            }
        }
        
        /// <remarks/>
        public AlertFrequency EmailAlertFrequency {
            get {
                return this.emailAlertFrequencyField;
            }
            set {
                this.emailAlertFrequencyField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid DelegateToUser {
            get {
                return this.delegateToUserField;
            }
            set {
                this.delegateToUserField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskInitiatorIsSystem {
            get {
                return this.taskInitiatorIsSystemField;
            }
            set {
                this.taskInitiatorIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskAssignedOrDelegatedIsSystem {
            get {
                return this.taskAssignedOrDelegatedIsSystemField;
            }
            set {
                this.taskAssignedOrDelegatedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskOverdueIsSystem {
            get {
                return this.taskOverdueIsSystemField;
            }
            set {
                this.taskOverdueIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskOverriddenIsSystem {
            get {
                return this.taskOverriddenIsSystemField;
            }
            set {
                this.taskOverriddenIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskCancelledIsSystem {
            get {
                return this.taskCancelledIsSystemField;
            }
            set {
                this.taskCancelledIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ActivityCompletedIsSystem {
            get {
                return this.activityCompletedIsSystemField;
            }
            set {
                this.activityCompletedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ActivityCompletedDocumentOwnIsSystem {
            get {
                return this.activityCompletedDocumentOwnIsSystemField;
            }
            set {
                this.activityCompletedDocumentOwnIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool WorkflowCompletedIsSystem {
            get {
                return this.workflowCompletedIsSystemField;
            }
            set {
                this.workflowCompletedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ObservedWorkflowCompletedIsSystem {
            get {
                return this.observedWorkflowCompletedIsSystemField;
            }
            set {
                this.observedWorkflowCompletedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskBlockedIsSystem {
            get {
                return this.taskBlockedIsSystemField;
            }
            set {
                this.taskBlockedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskRestartedIsSystem {
            get {
                return this.taskRestartedIsSystemField;
            }
            set {
                this.taskRestartedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskDocumentAddedRemovedIsSystem {
            get {
                return this.taskDocumentAddedRemovedIsSystemField;
            }
            set {
                this.taskDocumentAddedRemovedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskDocumentCheckedOutInIsSystem {
            get {
                return this.taskDocumentCheckedOutInIsSystemField;
            }
            set {
                this.taskDocumentCheckedOutInIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool WorkflowRestartedIsSystem {
            get {
                return this.workflowRestartedIsSystemField;
            }
            set {
                this.workflowRestartedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ObservedWorkflowRestartedIsSystem {
            get {
                return this.observedWorkflowRestartedIsSystemField;
            }
            set {
                this.observedWorkflowRestartedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentAddedRemovedIsSystem {
            get {
                return this.documentAddedRemovedIsSystemField;
            }
            set {
                this.documentAddedRemovedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool ObservedDocumentAddedRemovedIsSystem {
            get {
                return this.observedDocumentAddedRemovedIsSystemField;
            }
            set {
                this.observedDocumentAddedRemovedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool EmailAlertFrequencyIsSystem {
            get {
                return this.emailAlertFrequencyIsSystemField;
            }
            set {
                this.emailAlertFrequencyIsSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public enum AlertFrequency {
        
        /// <remarks/>
        Immediately,
        
        /// <remarks/>
        DailySummary,
        
        /// <remarks/>
        WeeklySummary,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReminderInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class Reminder {
        
        private int documentIdField;
        
        private System.DateTime initialDateField;
        
        private ReminderFrequency frequencyField;
        
        /// <remarks/>
        public int DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InitialDate {
            get {
                return this.initialDateField;
            }
            set {
                this.initialDateField = value;
            }
        }
        
        /// <remarks/>
        public ReminderFrequency Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public enum ReminderFrequency {
        
        /// <remarks/>
        OnceOnly,
        
        /// <remarks/>
        Daily,
        
        /// <remarks/>
        Weekly,
        
        /// <remarks/>
        Quarterly,
        
        /// <remarks/>
        BiAnnually,
        
        /// <remarks/>
        Annually,
        
        /// <remarks/>
        Monthly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class ReminderInfo : Reminder {
        
        private int reminderIdField;
        
        private string documentNameField;
        
        private string locationField;
        
        /// <remarks/>
        public int ReminderId {
            get {
                return this.reminderIdField;
            }
            set {
                this.reminderIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class AlertInfo {
        
        private int objectIdField;
        
        private string nameField;
        
        private string locationField;
        
        private bool isFolderField;
        
        /// <remarks/>
        public int ObjectId {
            get {
                return this.objectIdField;
            }
            set {
                this.objectIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFolder {
            get {
                return this.isFolderField;
            }
            set {
                this.isFolderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class AlertSettings {
        
        private bool addedToFolderField;
        
        private bool transferedFromFolderField;
        
        private bool transferedToFolderField;
        
        private bool deletedFromFolderField;
        
        private bool documentIsCheckedOutField;
        
        private bool documentIsEmailedField;
        
        private bool documentIsCheckedInField;
        
        private bool documentMetadataUpdatedField;
        
        private bool sendEmailField;
        
        private string emailAddressField;
        
        private AlertFrequency emailAlertFrequencyField;
        
        private bool sendReminderEmailField;
        
        private EmailReminderFrequency emailReminderFrequencyField;
        
        private bool addedToFolderIsSystemField;
        
        private bool transferedFromFolderIsSystemField;
        
        private bool transferedToFolderIsSystemField;
        
        private bool deletedFromFolderIsSystemField;
        
        private bool documentIsCheckedOutIsSystemField;
        
        private bool documentIsEmailedIsSystemField;
        
        private bool documentIsCheckedInIsSystemField;
        
        private bool documentMetadataUpdatedIsSystemField;
        
        private bool sendEmailIsSystemField;
        
        private bool emailAlertFrequencyIsSystemField;
        
        private bool sendReminderEmailIsSystemField;
        
        private bool emailReminderFrequencyIsSystemField;
        
        /// <remarks/>
        public bool AddedToFolder {
            get {
                return this.addedToFolderField;
            }
            set {
                this.addedToFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool TransferedFromFolder {
            get {
                return this.transferedFromFolderField;
            }
            set {
                this.transferedFromFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool TransferedToFolder {
            get {
                return this.transferedToFolderField;
            }
            set {
                this.transferedToFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool DeletedFromFolder {
            get {
                return this.deletedFromFolderField;
            }
            set {
                this.deletedFromFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentIsCheckedOut {
            get {
                return this.documentIsCheckedOutField;
            }
            set {
                this.documentIsCheckedOutField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentIsEmailed {
            get {
                return this.documentIsEmailedField;
            }
            set {
                this.documentIsEmailedField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentIsCheckedIn {
            get {
                return this.documentIsCheckedInField;
            }
            set {
                this.documentIsCheckedInField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentMetadataUpdated {
            get {
                return this.documentMetadataUpdatedField;
            }
            set {
                this.documentMetadataUpdatedField = value;
            }
        }
        
        /// <remarks/>
        public bool SendEmail {
            get {
                return this.sendEmailField;
            }
            set {
                this.sendEmailField = value;
            }
        }
        
        /// <remarks/>
        public string EmailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
            }
        }
        
        /// <remarks/>
        public AlertFrequency EmailAlertFrequency {
            get {
                return this.emailAlertFrequencyField;
            }
            set {
                this.emailAlertFrequencyField = value;
            }
        }
        
        /// <remarks/>
        public bool SendReminderEmail {
            get {
                return this.sendReminderEmailField;
            }
            set {
                this.sendReminderEmailField = value;
            }
        }
        
        /// <remarks/>
        public EmailReminderFrequency EmailReminderFrequency {
            get {
                return this.emailReminderFrequencyField;
            }
            set {
                this.emailReminderFrequencyField = value;
            }
        }
        
        /// <remarks/>
        public bool AddedToFolderIsSystem {
            get {
                return this.addedToFolderIsSystemField;
            }
            set {
                this.addedToFolderIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TransferedFromFolderIsSystem {
            get {
                return this.transferedFromFolderIsSystemField;
            }
            set {
                this.transferedFromFolderIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool TransferedToFolderIsSystem {
            get {
                return this.transferedToFolderIsSystemField;
            }
            set {
                this.transferedToFolderIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DeletedFromFolderIsSystem {
            get {
                return this.deletedFromFolderIsSystemField;
            }
            set {
                this.deletedFromFolderIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentIsCheckedOutIsSystem {
            get {
                return this.documentIsCheckedOutIsSystemField;
            }
            set {
                this.documentIsCheckedOutIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentIsEmailedIsSystem {
            get {
                return this.documentIsEmailedIsSystemField;
            }
            set {
                this.documentIsEmailedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentIsCheckedInIsSystem {
            get {
                return this.documentIsCheckedInIsSystemField;
            }
            set {
                this.documentIsCheckedInIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool DocumentMetadataUpdatedIsSystem {
            get {
                return this.documentMetadataUpdatedIsSystemField;
            }
            set {
                this.documentMetadataUpdatedIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool SendEmailIsSystem {
            get {
                return this.sendEmailIsSystemField;
            }
            set {
                this.sendEmailIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool EmailAlertFrequencyIsSystem {
            get {
                return this.emailAlertFrequencyIsSystemField;
            }
            set {
                this.emailAlertFrequencyIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool SendReminderEmailIsSystem {
            get {
                return this.sendReminderEmailIsSystemField;
            }
            set {
                this.sendReminderEmailIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool EmailReminderFrequencyIsSystem {
            get {
                return this.emailReminderFrequencyIsSystemField;
            }
            set {
                this.emailReminderFrequencyIsSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public enum EmailReminderFrequency {
        
        /// <remarks/>
        Immediately,
        
        /// <remarks/>
        DailySummary,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class DefaultView {
        
        private string containerTypeField;
        
        private bool isUserDefaultField;
        
        private ObjectType objectDefaultField;
        
        private int objectIdField;
        
        private int parentObjectIdField;
        
        private int viewIdField;
        
        /// <remarks/>
        public string ContainerType {
            get {
                return this.containerTypeField;
            }
            set {
                this.containerTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsUserDefault {
            get {
                return this.isUserDefaultField;
            }
            set {
                this.isUserDefaultField = value;
            }
        }
        
        /// <remarks/>
        public ObjectType ObjectDefault {
            get {
                return this.objectDefaultField;
            }
            set {
                this.objectDefaultField = value;
            }
        }
        
        /// <remarks/>
        public int ObjectId {
            get {
                return this.objectIdField;
            }
            set {
                this.objectIdField = value;
            }
        }
        
        /// <remarks/>
        public int ParentObjectId {
            get {
                return this.parentObjectIdField;
            }
            set {
                this.parentObjectIdField = value;
            }
        }
        
        /// <remarks/>
        public int ViewId {
            get {
                return this.viewIdField;
            }
            set {
                this.viewIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public enum ObjectType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Cabinet,
        
        /// <remarks/>
        Drawer,
        
        /// <remarks/>
        FolderGroup,
        
        /// <remarks/>
        Folder,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class ViewDefinition {
        
        private int viewIdField;
        
        private string viewNameField;
        
        private bool isPublicField;
        
        private string containerTypeField;
        
        private ViewColumn[] columnsField;
        
        private int pageSizeField;
        
        private int sortColumnField;
        
        private int sortOrderField;
        
        private int groupColumnField;
        
        private int groupOrderField;
        
        /// <remarks/>
        public int ViewId {
            get {
                return this.viewIdField;
            }
            set {
                this.viewIdField = value;
            }
        }
        
        /// <remarks/>
        public string ViewName {
            get {
                return this.viewNameField;
            }
            set {
                this.viewNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public string ContainerType {
            get {
                return this.containerTypeField;
            }
            set {
                this.containerTypeField = value;
            }
        }
        
        /// <remarks/>
        public ViewColumn[] Columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
            }
        }
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public int SortColumn {
            get {
                return this.sortColumnField;
            }
            set {
                this.sortColumnField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public int GroupColumn {
            get {
                return this.groupColumnField;
            }
            set {
                this.groupColumnField = value;
            }
        }
        
        /// <remarks/>
        public int GroupOrder {
            get {
                return this.groupOrderField;
            }
            set {
                this.groupOrderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class ViewColumn {
        
        private int fieldIdField;
        
        private string headerTextField;
        
        private string descriptionField;
        
        private bool canChangeOrderField;
        
        private bool canDeleteField;
        
        /// <remarks/>
        public int FieldId {
            get {
                return this.fieldIdField;
            }
            set {
                this.fieldIdField = value;
            }
        }
        
        /// <remarks/>
        public string HeaderText {
            get {
                return this.headerTextField;
            }
            set {
                this.headerTextField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool CanChangeOrder {
            get {
                return this.canChangeOrderField;
            }
            set {
                this.canChangeOrderField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public partial class AdvancedSearchSettings {
        
        private bool metadataOnlyField;
        
        private bool includeArchiveField;
        
        private bool allVersionsField;
        
        private bool historicalMetadataField;
        
        private bool metadataOnlyIsSystemField;
        
        private bool includeArchiveIsSystemField;
        
        private bool allVersionsIsSystemField;
        
        private bool historicalMetadataIsSystemField;
        
        /// <remarks/>
        public bool MetadataOnly {
            get {
                return this.metadataOnlyField;
            }
            set {
                this.metadataOnlyField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeArchive {
            get {
                return this.includeArchiveField;
            }
            set {
                this.includeArchiveField = value;
            }
        }
        
        /// <remarks/>
        public bool AllVersions {
            get {
                return this.allVersionsField;
            }
            set {
                this.allVersionsField = value;
            }
        }
        
        /// <remarks/>
        public bool HistoricalMetadata {
            get {
                return this.historicalMetadataField;
            }
            set {
                this.historicalMetadataField = value;
            }
        }
        
        /// <remarks/>
        public bool MetadataOnlyIsSystem {
            get {
                return this.metadataOnlyIsSystemField;
            }
            set {
                this.metadataOnlyIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeArchiveIsSystem {
            get {
                return this.includeArchiveIsSystemField;
            }
            set {
                this.includeArchiveIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool AllVersionsIsSystem {
            get {
                return this.allVersionsIsSystemField;
            }
            set {
                this.allVersionsIsSystemField = value;
            }
        }
        
        /// <remarks/>
        public bool HistoricalMetadataIsSystem {
            get {
                return this.historicalMetadataIsSystemField;
            }
            set {
                this.historicalMetadataIsSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/librarymanager/userpreferences/")]
    public enum DownloadPreferences {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        GetCopy,
        
        /// <remarks/>
        CheckOut,
        
        /// <remarks/>
        PortalUser,
        
        /// <remarks/>
        View,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserMiscSettingsCompletedEventHandler(object sender, GetUserMiscSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserMiscSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserMiscSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MiscSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MiscSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetAdvancedSearchSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserAdvancedSearchSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetAdvancedSearchSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetAdvancedSearchSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAdvancedSearchSettingsSystemCompletedEventHandler(object sender, GetAdvancedSearchSettingsSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdvancedSearchSettingsSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdvancedSearchSettingsSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdvancedSearchSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdvancedSearchSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAdvancedSearchSettingsCompletedEventHandler(object sender, GetAdvancedSearchSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdvancedSearchSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdvancedSearchSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdvancedSearchSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdvancedSearchSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserAdvancedSearchSettingsCompletedEventHandler(object sender, GetUserAdvancedSearchSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAdvancedSearchSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAdvancedSearchSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdvancedSearchSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdvancedSearchSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDontShowMessageCompletedEventHandler(object sender, GetDontShowMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDontShowMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDontShowMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DontShowMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetAllMessagesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserDownloadPreferencesInWebClientCompletedEventHandler(object sender, GetUserDownloadPreferencesInWebClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDownloadPreferencesInWebClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDownloadPreferencesInWebClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DownloadPreferences Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadPreferences)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserDownloadPreferencesInWebClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSystemFieldsCompletedEventHandler(object sender, GetSystemFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewColumn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewColumn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSchemaFieldsCompletedEventHandler(object sender, GetSchemaFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewColumn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewColumn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetViewsCompletedEventHandler(object sender, GetViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetViewsForUserCompletedEventHandler(object sender, GetViewsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetViewDetailsCompletedEventHandler(object sender, GetViewDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewDefinition)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetViewDetailsForUserCompletedEventHandler(object sender, GetViewDetailsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewDetailsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewDetailsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewDefinition)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddViewCompletedEventHandler(object sender, AddViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddViewForUserCompletedEventHandler(object sender, AddViewForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddViewForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddViewForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateViewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFixedViewPageSizeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveViewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SavePersonalViewCompletedEventHandler(object sender, SavePersonalViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePersonalViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePersonalViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDefaultViewForContextCompletedEventHandler(object sender, GetDefaultViewForContextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultViewForContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultViewForContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DefaultView Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DefaultView)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetParentViewForContextCompletedEventHandler(object sender, GetParentViewForContextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParentViewForContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParentViewForContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DefaultView Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DefaultView)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDefaultViewForContextCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetViewSettingsCompletedEventHandler(object sender, GetViewSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewDefinition)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool isUserDefault {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetCustomViewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDefaultViewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCustomViewCompletedEventHandler(object sender, GetCustomViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViewColumn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViewColumn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetCustomViewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetViewPageSizeCompletedEventHandler(object sender, GetViewPageSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewPageSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewPageSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveADAMObjectsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetAlertSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserAlertSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetAlertSystemSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetAlertSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAlertSystemSettingsCompletedEventHandler(object sender, GetAlertSystemSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlertSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlertSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AlertSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AlertSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAlertSettingsCompletedEventHandler(object sender, GetAlertSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlertSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlertSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AlertSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AlertSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserAlertSettingsCompletedEventHandler(object sender, GetUserAlertSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAlertSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAlertSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AlertSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AlertSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddAlertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveAlertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAlertsCompletedEventHandler(object sender, GetAlertsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AlertInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AlertInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MarkAlertsAsReadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetReminderCompletedEventHandler(object sender, SetReminderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetReminderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetReminderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateReminderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveReminderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetRemindersCompletedEventHandler(object sender, GetRemindersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemindersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemindersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReminderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReminderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetReminderDetailsCompletedEventHandler(object sender, GetReminderDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReminderDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReminderDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Reminder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Reminder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void MarkRemindersAsReadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetWorkflowNotificationsSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserWorkflowNotificationSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetWorkflowNotificationsSystemSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetWorkflowNotificationsSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetWorkflowNotificationsSystemSettingsCompletedEventHandler(object sender, GetWorkflowNotificationsSystemSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowNotificationsSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowNotificationsSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowNotificationsSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowNotificationsSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetWorkflowNotificationsSettingsCompletedEventHandler(object sender, GetWorkflowNotificationsSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowNotificationsSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowNotificationsSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowNotificationsSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowNotificationsSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserWorkflowNotificationsSettingsCompletedEventHandler(object sender, GetUserWorkflowNotificationsSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserWorkflowNotificationsSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserWorkflowNotificationsSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowNotificationsSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowNotificationsSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDefaultTimeZoneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDefaultTimeZoneCompletedEventHandler(object sender, GetDefaultTimeZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetTimeZoneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTimeZoneCompletedEventHandler(object sender, GetTimeZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserLanguageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserPreferencesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserLanguageCompletedEventHandler(object sender, GetUserLanguageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserPreferencesCompletedEventHandler(object sender, GetUserPreferencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPreferencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPreferencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserProfile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserProfile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFDAAdvancedSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserFDAAdvancedSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFDAAdvancedSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetFDAAdvancedSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFDAAdvancedSettingsSystemCompletedEventHandler(object sender, GetFDAAdvancedSettingsSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFDAAdvancedSettingsSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFDAAdvancedSettingsSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FDAAdvancedSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FDAAdvancedSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFDAAdvancedSettingsCompletedEventHandler(object sender, GetFDAAdvancedSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFDAAdvancedSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFDAAdvancedSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FDAAdvancedSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FDAAdvancedSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserFDAAdvancedSettingsCompletedEventHandler(object sender, GetUserFDAAdvancedSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserFDAAdvancedSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserFDAAdvancedSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FDAAdvancedSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FDAAdvancedSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFastFindSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetFastFindSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetFastFindSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFastFindSettingsSystemCompletedEventHandler(object sender, GetFastFindSettingsSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFastFindSettingsSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFastFindSettingsSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FastFindSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FastFindSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFastFindSettingsCompletedEventHandler(object sender, GetFastFindSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFastFindSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFastFindSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FastFindSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FastFindSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetMiscSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUserMiscSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetMiscSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ResetMiscSettingsSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMiscSettingsSystemCompletedEventHandler(object sender, GetMiscSettingsSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMiscSettingsSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMiscSettingsSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MiscSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MiscSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMiscSettingsCompletedEventHandler(object sender, GetMiscSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMiscSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMiscSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MiscSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MiscSettings)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591