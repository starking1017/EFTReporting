//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EFTReporting.SessionManagerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SessionManagerSoap", Namespace="http://filehold.com/userrolemanager/sessionmanager/")]
    public partial class SessionManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StartSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartSessionAndChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartSessionForDomainUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSessionValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSelfRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSelfRegistrationSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogonAndPasswordSecuritySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStoredDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCurrentLicenseActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAPIVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultDomainOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SessionManager() {
            this.Url = global::EFTReporting.Properties.Settings.Default.EFTReporting_SessionManagerService_SessionManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StartSessionCompletedEventHandler StartSessionCompleted;
        
        /// <remarks/>
        public event StartSessionAndChangePasswordCompletedEventHandler StartSessionAndChangePasswordCompleted;
        
        /// <remarks/>
        public event StartSessionForDomainUserCompletedEventHandler StartSessionForDomainUserCompleted;
        
        /// <remarks/>
        public event EndSessionCompletedEventHandler EndSessionCompleted;
        
        /// <remarks/>
        public event IsSessionValidCompletedEventHandler IsSessionValidCompleted;
        
        /// <remarks/>
        public event GetSessionInfoCompletedEventHandler GetSessionInfoCompleted;
        
        /// <remarks/>
        public event UserSelfRegisterCompletedEventHandler UserSelfRegisterCompleted;
        
        /// <remarks/>
        public event GetSelfRegistrationSettingsCompletedEventHandler GetSelfRegistrationSettingsCompleted;
        
        /// <remarks/>
        public event GetLogonAndPasswordSecuritySettingsCompletedEventHandler GetLogonAndPasswordSecuritySettingsCompleted;
        
        /// <remarks/>
        public event GetStoredDomainsCompletedEventHandler GetStoredDomainsCompleted;
        
        /// <remarks/>
        public event IsCurrentLicenseActiveCompletedEventHandler IsCurrentLicenseActiveCompleted;
        
        /// <remarks/>
        public event CheckAPIVersionCompletedEventHandler CheckAPIVersionCompleted;
        
        /// <remarks/>
        public event GetDefaultDomainCompletedEventHandler GetDefaultDomainCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/StartSession", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartSession(string login, string password, Client clientType) {
            object[] results = this.Invoke("StartSession", new object[] {
                        login,
                        password,
                        clientType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionAsync(string login, string password, Client clientType) {
            this.StartSessionAsync(login, password, clientType, null);
        }
        
        /// <remarks/>
        public void StartSessionAsync(string login, string password, Client clientType, object userState) {
            if ((this.StartSessionOperationCompleted == null)) {
                this.StartSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionOperationCompleted);
            }
            this.InvokeAsync("StartSession", new object[] {
                        login,
                        password,
                        clientType}, this.StartSessionOperationCompleted, userState);
        }
        
        private void OnStartSessionOperationCompleted(object arg) {
            if ((this.StartSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionCompleted(this, new StartSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/StartSessionAndChangePassword", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartSessionAndChangePassword(string login, string oldPassword, string newPassword, Client clientType) {
            object[] results = this.Invoke("StartSessionAndChangePassword", new object[] {
                        login,
                        oldPassword,
                        newPassword,
                        clientType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionAndChangePasswordAsync(string login, string oldPassword, string newPassword, Client clientType) {
            this.StartSessionAndChangePasswordAsync(login, oldPassword, newPassword, clientType, null);
        }
        
        /// <remarks/>
        public void StartSessionAndChangePasswordAsync(string login, string oldPassword, string newPassword, Client clientType, object userState) {
            if ((this.StartSessionAndChangePasswordOperationCompleted == null)) {
                this.StartSessionAndChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionAndChangePasswordOperationCompleted);
            }
            this.InvokeAsync("StartSessionAndChangePassword", new object[] {
                        login,
                        oldPassword,
                        newPassword,
                        clientType}, this.StartSessionAndChangePasswordOperationCompleted, userState);
        }
        
        private void OnStartSessionAndChangePasswordOperationCompleted(object arg) {
            if ((this.StartSessionAndChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionAndChangePasswordCompleted(this, new StartSessionAndChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/StartSessionForDomainUser", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartSessionForDomainUser(string login, string password, System.Guid domain, Client clientType) {
            object[] results = this.Invoke("StartSessionForDomainUser", new object[] {
                        login,
                        password,
                        domain,
                        clientType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionForDomainUserAsync(string login, string password, System.Guid domain, Client clientType) {
            this.StartSessionForDomainUserAsync(login, password, domain, clientType, null);
        }
        
        /// <remarks/>
        public void StartSessionForDomainUserAsync(string login, string password, System.Guid domain, Client clientType, object userState) {
            if ((this.StartSessionForDomainUserOperationCompleted == null)) {
                this.StartSessionForDomainUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionForDomainUserOperationCompleted);
            }
            this.InvokeAsync("StartSessionForDomainUser", new object[] {
                        login,
                        password,
                        domain,
                        clientType}, this.StartSessionForDomainUserOperationCompleted, userState);
        }
        
        private void OnStartSessionForDomainUserOperationCompleted(object arg) {
            if ((this.StartSessionForDomainUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionForDomainUserCompleted(this, new StartSessionForDomainUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/EndSession", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndSession(string sessionId) {
            this.Invoke("EndSession", new object[] {
                        sessionId});
        }
        
        /// <remarks/>
        public void EndSessionAsync(string sessionId) {
            this.EndSessionAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void EndSessionAsync(string sessionId, object userState) {
            if ((this.EndSessionOperationCompleted == null)) {
                this.EndSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndSessionOperationCompleted);
            }
            this.InvokeAsync("EndSession", new object[] {
                        sessionId}, this.EndSessionOperationCompleted, userState);
        }
        
        private void OnEndSessionOperationCompleted(object arg) {
            if ((this.EndSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/IsSessionValid", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSessionValid(string sessionId, bool keepAlive) {
            object[] results = this.Invoke("IsSessionValid", new object[] {
                        sessionId,
                        keepAlive});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSessionValidAsync(string sessionId, bool keepAlive) {
            this.IsSessionValidAsync(sessionId, keepAlive, null);
        }
        
        /// <remarks/>
        public void IsSessionValidAsync(string sessionId, bool keepAlive, object userState) {
            if ((this.IsSessionValidOperationCompleted == null)) {
                this.IsSessionValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSessionValidOperationCompleted);
            }
            this.InvokeAsync("IsSessionValid", new object[] {
                        sessionId,
                        keepAlive}, this.IsSessionValidOperationCompleted, userState);
        }
        
        private void OnIsSessionValidOperationCompleted(object arg) {
            if ((this.IsSessionValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSessionValidCompleted(this, new IsSessionValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/GetSessionInfo", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SessionInfo GetSessionInfo(string sessionId) {
            object[] results = this.Invoke("GetSessionInfo", new object[] {
                        sessionId});
            return ((SessionInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionInfoAsync(string sessionId) {
            this.GetSessionInfoAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetSessionInfoAsync(string sessionId, object userState) {
            if ((this.GetSessionInfoOperationCompleted == null)) {
                this.GetSessionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionInfoOperationCompleted);
            }
            this.InvokeAsync("GetSessionInfo", new object[] {
                        sessionId}, this.GetSessionInfoOperationCompleted, userState);
        }
        
        private void OnGetSessionInfoOperationCompleted(object arg) {
            if ((this.GetSessionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionInfoCompleted(this, new GetSessionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/UserSelfRegister", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserSelfRegister(SelfRegisterUser selfRegisterUser) {
            this.Invoke("UserSelfRegister", new object[] {
                        selfRegisterUser});
        }
        
        /// <remarks/>
        public void UserSelfRegisterAsync(SelfRegisterUser selfRegisterUser) {
            this.UserSelfRegisterAsync(selfRegisterUser, null);
        }
        
        /// <remarks/>
        public void UserSelfRegisterAsync(SelfRegisterUser selfRegisterUser, object userState) {
            if ((this.UserSelfRegisterOperationCompleted == null)) {
                this.UserSelfRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSelfRegisterOperationCompleted);
            }
            this.InvokeAsync("UserSelfRegister", new object[] {
                        selfRegisterUser}, this.UserSelfRegisterOperationCompleted, userState);
        }
        
        private void OnUserSelfRegisterOperationCompleted(object arg) {
            if ((this.UserSelfRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSelfRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/GetSelfRegistrationSettings", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSelfRegistrationSettings(ref bool allowsSelfRegistration, ref System.Guid defaultFileHoldGroup) {
            object[] results = this.Invoke("GetSelfRegistrationSettings", new object[] {
                        allowsSelfRegistration,
                        defaultFileHoldGroup});
            allowsSelfRegistration = ((bool)(results[0]));
            defaultFileHoldGroup = ((System.Guid)(results[1]));
        }
        
        /// <remarks/>
        public void GetSelfRegistrationSettingsAsync(bool allowsSelfRegistration, System.Guid defaultFileHoldGroup) {
            this.GetSelfRegistrationSettingsAsync(allowsSelfRegistration, defaultFileHoldGroup, null);
        }
        
        /// <remarks/>
        public void GetSelfRegistrationSettingsAsync(bool allowsSelfRegistration, System.Guid defaultFileHoldGroup, object userState) {
            if ((this.GetSelfRegistrationSettingsOperationCompleted == null)) {
                this.GetSelfRegistrationSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSelfRegistrationSettingsOperationCompleted);
            }
            this.InvokeAsync("GetSelfRegistrationSettings", new object[] {
                        allowsSelfRegistration,
                        defaultFileHoldGroup}, this.GetSelfRegistrationSettingsOperationCompleted, userState);
        }
        
        private void OnGetSelfRegistrationSettingsOperationCompleted(object arg) {
            if ((this.GetSelfRegistrationSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSelfRegistrationSettingsCompleted(this, new GetSelfRegistrationSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/GetLogonAndPasswordSecuritySet" +
            "tings", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogonAndPasswordSettings GetLogonAndPasswordSecuritySettings() {
            object[] results = this.Invoke("GetLogonAndPasswordSecuritySettings", new object[0]);
            return ((LogonAndPasswordSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogonAndPasswordSecuritySettingsAsync() {
            this.GetLogonAndPasswordSecuritySettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetLogonAndPasswordSecuritySettingsAsync(object userState) {
            if ((this.GetLogonAndPasswordSecuritySettingsOperationCompleted == null)) {
                this.GetLogonAndPasswordSecuritySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogonAndPasswordSecuritySettingsOperationCompleted);
            }
            this.InvokeAsync("GetLogonAndPasswordSecuritySettings", new object[0], this.GetLogonAndPasswordSecuritySettingsOperationCompleted, userState);
        }
        
        private void OnGetLogonAndPasswordSecuritySettingsOperationCompleted(object arg) {
            if ((this.GetLogonAndPasswordSecuritySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogonAndPasswordSecuritySettingsCompleted(this, new GetLogonAndPasswordSecuritySettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/GetStoredDomains", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetStoredDomains() {
            object[] results = this.Invoke("GetStoredDomains", new object[0]);
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStoredDomainsAsync() {
            this.GetStoredDomainsAsync(null);
        }
        
        /// <remarks/>
        public void GetStoredDomainsAsync(object userState) {
            if ((this.GetStoredDomainsOperationCompleted == null)) {
                this.GetStoredDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStoredDomainsOperationCompleted);
            }
            this.InvokeAsync("GetStoredDomains", new object[0], this.GetStoredDomainsOperationCompleted, userState);
        }
        
        private void OnGetStoredDomainsOperationCompleted(object arg) {
            if ((this.GetStoredDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStoredDomainsCompleted(this, new GetStoredDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/IsCurrentLicenseActive", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCurrentLicenseActive(ref string[] features) {
            object[] results = this.Invoke("IsCurrentLicenseActive", new object[] {
                        features});
            features = ((string[])(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCurrentLicenseActiveAsync(string[] features) {
            this.IsCurrentLicenseActiveAsync(features, null);
        }
        
        /// <remarks/>
        public void IsCurrentLicenseActiveAsync(string[] features, object userState) {
            if ((this.IsCurrentLicenseActiveOperationCompleted == null)) {
                this.IsCurrentLicenseActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCurrentLicenseActiveOperationCompleted);
            }
            this.InvokeAsync("IsCurrentLicenseActive", new object[] {
                        features}, this.IsCurrentLicenseActiveOperationCompleted, userState);
        }
        
        private void OnIsCurrentLicenseActiveOperationCompleted(object arg) {
            if ((this.IsCurrentLicenseActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCurrentLicenseActiveCompleted(this, new IsCurrentLicenseActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/CheckAPIVersion", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckAPIVersion(string sessionId, string clientVersion, ref string serverVersion) {
            object[] results = this.Invoke("CheckAPIVersion", new object[] {
                        sessionId,
                        clientVersion,
                        serverVersion});
            serverVersion = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAPIVersionAsync(string sessionId, string clientVersion, string serverVersion) {
            this.CheckAPIVersionAsync(sessionId, clientVersion, serverVersion, null);
        }
        
        /// <remarks/>
        public void CheckAPIVersionAsync(string sessionId, string clientVersion, string serverVersion, object userState) {
            if ((this.CheckAPIVersionOperationCompleted == null)) {
                this.CheckAPIVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAPIVersionOperationCompleted);
            }
            this.InvokeAsync("CheckAPIVersion", new object[] {
                        sessionId,
                        clientVersion,
                        serverVersion}, this.CheckAPIVersionOperationCompleted, userState);
        }
        
        private void OnCheckAPIVersionOperationCompleted(object arg) {
            if ((this.CheckAPIVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAPIVersionCompleted(this, new CheckAPIVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://filehold.com/userrolemanager/sessionmanager/GetDefaultDomain", RequestNamespace="http://filehold.com/userrolemanager/sessionmanager/", ResponseNamespace="http://filehold.com/userrolemanager/sessionmanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid GetDefaultDomain() {
            object[] results = this.Invoke("GetDefaultDomain", new object[0]);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultDomainAsync() {
            this.GetDefaultDomainAsync(null);
        }
        
        /// <remarks/>
        public void GetDefaultDomainAsync(object userState) {
            if ((this.GetDefaultDomainOperationCompleted == null)) {
                this.GetDefaultDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultDomainOperationCompleted);
            }
            this.InvokeAsync("GetDefaultDomain", new object[0], this.GetDefaultDomainOperationCompleted, userState);
        }
        
        private void OnGetDefaultDomainOperationCompleted(object arg) {
            if ((this.GetDefaultDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultDomainCompleted(this, new GetDefaultDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/sessionmanager/")]
    public enum Client {
        
        /// <remarks/>
        WebClient,
        
        /// <remarks/>
        DesktopApplication,
        
        /// <remarks/>
        SharepointClient,
        
        /// <remarks/>
        MobileWebClient,
        
        /// <remarks/>
        CustomClient,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/sessionmanager/")]
    public partial class SessionInfo {
        
        private string sessionIdField;
        
        private string userNameField;
        
        private System.Guid userGuidField;
        
        private System.Guid[] groupGuidsField;
        
        private bool isDomainUserField;
        
        private int[] allowedOperationsField;
        
        /// <remarks/>
        public string SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UserGuid {
            get {
                return this.userGuidField;
            }
            set {
                this.userGuidField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] GroupGuids {
            get {
                return this.groupGuidsField;
            }
            set {
                this.groupGuidsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDomainUser {
            get {
                return this.isDomainUserField;
            }
            set {
                this.isDomainUserField = value;
            }
        }
        
        /// <remarks/>
        public int[] AllowedOperations {
            get {
                return this.allowedOperationsField;
            }
            set {
                this.allowedOperationsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/sessionmanager/")]
    public partial class DomainInfo {
        
        private string nameField;
        
        private System.Guid idField;
        
        private string addressField;
        
        private string containerField;
        
        private string userLoginField;
        
        private string userPasswordField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string Container {
            get {
                return this.containerField;
            }
            set {
                this.containerField = value;
            }
        }
        
        /// <remarks/>
        public string UserLogin {
            get {
                return this.userLoginField;
            }
            set {
                this.userLoginField = value;
            }
        }
        
        /// <remarks/>
        public string UserPassword {
            get {
                return this.userPasswordField;
            }
            set {
                this.userPasswordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/sessionmanager/")]
    public partial class LogonAndPasswordSettings {
        
        private int logonAttemptsAllowedTimesField;
        
        private int logInactiveUsersOffAfterMinutesField;
        
        private int minNumberOfCharactersInPasswordField;
        
        private bool passwordMustContainsUpperCaseField;
        
        private bool passwordMustContainsLowerCaseField;
        
        private bool passwordMustContainsSpecialCharacterField;
        
        private bool passwordMustContainsNumberField;
        
        private bool allowPasswordReuseField;
        
        private int passwordExpiresAfterDaysField;
        
        private bool allowPasswordRecoveryField;
        
        /// <remarks/>
        public int LogonAttemptsAllowedTimes {
            get {
                return this.logonAttemptsAllowedTimesField;
            }
            set {
                this.logonAttemptsAllowedTimesField = value;
            }
        }
        
        /// <remarks/>
        public int LogInactiveUsersOffAfterMinutes {
            get {
                return this.logInactiveUsersOffAfterMinutesField;
            }
            set {
                this.logInactiveUsersOffAfterMinutesField = value;
            }
        }
        
        /// <remarks/>
        public int MinNumberOfCharactersInPassword {
            get {
                return this.minNumberOfCharactersInPasswordField;
            }
            set {
                this.minNumberOfCharactersInPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool PasswordMustContainsUpperCase {
            get {
                return this.passwordMustContainsUpperCaseField;
            }
            set {
                this.passwordMustContainsUpperCaseField = value;
            }
        }
        
        /// <remarks/>
        public bool PasswordMustContainsLowerCase {
            get {
                return this.passwordMustContainsLowerCaseField;
            }
            set {
                this.passwordMustContainsLowerCaseField = value;
            }
        }
        
        /// <remarks/>
        public bool PasswordMustContainsSpecialCharacter {
            get {
                return this.passwordMustContainsSpecialCharacterField;
            }
            set {
                this.passwordMustContainsSpecialCharacterField = value;
            }
        }
        
        /// <remarks/>
        public bool PasswordMustContainsNumber {
            get {
                return this.passwordMustContainsNumberField;
            }
            set {
                this.passwordMustContainsNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowPasswordReuse {
            get {
                return this.allowPasswordReuseField;
            }
            set {
                this.allowPasswordReuseField = value;
            }
        }
        
        /// <remarks/>
        public int PasswordExpiresAfterDays {
            get {
                return this.passwordExpiresAfterDaysField;
            }
            set {
                this.passwordExpiresAfterDaysField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowPasswordRecovery {
            get {
                return this.allowPasswordRecoveryField;
            }
            set {
                this.allowPasswordRecoveryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://filehold.com/userrolemanager/sessionmanager/")]
    public partial class SelfRegisterUser {
        
        private string cityField;
        
        private string companyTitleField;
        
        private string countryRegionField;
        
        private string departmentField;
        
        private string divisionField;
        
        private string emailField;
        
        private string faxField;
        
        private string firstNameField;
        
        private string homeField;
        
        private string initialsField;
        
        private string instantMessangerField;
        
        private string iPPhoneField;
        
        private string lastNameField;
        
        private string mobileField;
        
        private string notesField;
        
        private string officeField;
        
        private string pagerField;
        
        private string passwordField;
        
        private string stateProvinceField;
        
        private string userNameField;
        
        private string webPageField;
        
        private string workField;
        
        private string zipPostalCodeField;
        
        private string pOBoxField;
        
        private string streetField;
        
        private string companyNameField;
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyTitle {
            get {
                return this.companyTitleField;
            }
            set {
                this.companyTitleField = value;
            }
        }
        
        /// <remarks/>
        public string CountryRegion {
            get {
                return this.countryRegionField;
            }
            set {
                this.countryRegionField = value;
            }
        }
        
        /// <remarks/>
        public string Department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        public string Division {
            get {
                return this.divisionField;
            }
            set {
                this.divisionField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Fax {
            get {
                return this.faxField;
            }
            set {
                this.faxField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string Home {
            get {
                return this.homeField;
            }
            set {
                this.homeField = value;
            }
        }
        
        /// <remarks/>
        public string Initials {
            get {
                return this.initialsField;
            }
            set {
                this.initialsField = value;
            }
        }
        
        /// <remarks/>
        public string InstantMessanger {
            get {
                return this.instantMessangerField;
            }
            set {
                this.instantMessangerField = value;
            }
        }
        
        /// <remarks/>
        public string IPPhone {
            get {
                return this.iPPhoneField;
            }
            set {
                this.iPPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Mobile {
            get {
                return this.mobileField;
            }
            set {
                this.mobileField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public string Office {
            get {
                return this.officeField;
            }
            set {
                this.officeField = value;
            }
        }
        
        /// <remarks/>
        public string Pager {
            get {
                return this.pagerField;
            }
            set {
                this.pagerField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string StateProvince {
            get {
                return this.stateProvinceField;
            }
            set {
                this.stateProvinceField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string WebPage {
            get {
                return this.webPageField;
            }
            set {
                this.webPageField = value;
            }
        }
        
        /// <remarks/>
        public string Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
            }
        }
        
        /// <remarks/>
        public string ZipPostalCode {
            get {
                return this.zipPostalCodeField;
            }
            set {
                this.zipPostalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string POBox {
            get {
                return this.pOBoxField;
            }
            set {
                this.pOBoxField = value;
            }
        }
        
        /// <remarks/>
        public string Street {
            get {
                return this.streetField;
            }
            set {
                this.streetField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void StartSessionCompletedEventHandler(object sender, StartSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void StartSessionAndChangePasswordCompletedEventHandler(object sender, StartSessionAndChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartSessionAndChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartSessionAndChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void StartSessionForDomainUserCompletedEventHandler(object sender, StartSessionForDomainUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartSessionForDomainUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartSessionForDomainUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void EndSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IsSessionValidCompletedEventHandler(object sender, IsSessionValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSessionValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSessionValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSessionInfoCompletedEventHandler(object sender, GetSessionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SessionInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SessionInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UserSelfRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSelfRegistrationSettingsCompletedEventHandler(object sender, GetSelfRegistrationSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSelfRegistrationSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSelfRegistrationSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool allowsSelfRegistration {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid defaultFileHoldGroup {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetLogonAndPasswordSecuritySettingsCompletedEventHandler(object sender, GetLogonAndPasswordSecuritySettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogonAndPasswordSecuritySettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogonAndPasswordSecuritySettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogonAndPasswordSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogonAndPasswordSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetStoredDomainsCompletedEventHandler(object sender, GetStoredDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStoredDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStoredDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IsCurrentLicenseActiveCompletedEventHandler(object sender, IsCurrentLicenseActiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCurrentLicenseActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCurrentLicenseActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] features {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckAPIVersionCompletedEventHandler(object sender, CheckAPIVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAPIVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAPIVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string serverVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDefaultDomainCompletedEventHandler(object sender, GetDefaultDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591